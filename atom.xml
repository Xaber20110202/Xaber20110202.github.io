<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xaber&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/531e6f83eb99753d1524c9fd45e94f22</icon>
  <subtitle>函数式编程，异步式做事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xaber.co/"/>
  <updated>2019-07-11T03:20:43.768Z</updated>
  <id>http://xaber.co/</id>
  
  <author>
    <name>Xaber</name>
    <email>xaber.twt@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>node 代理转发与 Google Cloud、域名配置</title>
    <link href="http://xaber.co/2018/12/28/node-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91%E4%B8%8E-Google-Cloud%E3%80%81%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/"/>
    <id>http://xaber.co/2018/12/28/node-代理转发与-Google-Cloud、域名配置/</id>
    <published>2018-12-27T16:15:03.000Z</published>
    <updated>2019-07-11T03:20:43.768Z</updated>
    
    <content type="html"><![CDATA[<p>此文介绍 node 简单搭建一个代理转发服务，部署至 Google Cloud 服务器，并为该服务绑定域名。</p><a id="more"></a><h3 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h3><p>需要访问的域名被拦截在墙外，而代码部署的服务器在墙内，无法访问外网服务。</p><h3 id="node-搭建服务"><a href="#node-搭建服务" class="headerlink" title="node 搭建服务"></a>node 搭建服务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>)</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">80</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'*'</span>, proxy(&#123;</span><br><span class="line">  target: <span class="string">'https://api.proxydemo.com/'</span>,</span><br><span class="line">  changeOrigin: <span class="literal">true</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.listen(port)</span><br></pre></td></tr></table></figure><h3 id="Google-Cloud"><a href="#Google-Cloud" class="headerlink" title="Google Cloud"></a>Google Cloud</h3><ol><li>Compute Engine 创建 vm 实例</li><li>SSH 连接服务器</li><li>部署上方 node 服务</li><li>生成（一般会自动生成）静态 IP 地址（外部 IP） <code>xxx.xxx.xxx.xxx</code></li></ol><h3 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h3><p>配置域名 <code>https://api.proxymiddle.com/</code> 解析至 <code>xxx.xxx.xxx.xxx</code></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>请求 <code>https://api.proxymiddle.com/</code> 查看最终结果是否为墙外 <code>https://api.proxydemo.com/</code> 的返回结果</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文介绍 node 简单搭建一个代理转发服务，部署至 Google Cloud 服务器，并为该服务绑定域名。&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="http://xaber.co/categories/node/"/>
    
    
      <category term="proxy" scheme="http://xaber.co/tags/proxy/"/>
    
      <category term="node" scheme="http://xaber.co/tags/node/"/>
    
      <category term="http-proxy-middleware" scheme="http://xaber.co/tags/http-proxy-middleware/"/>
    
  </entry>
  
  <entry>
    <title>Ganache 与 Truffle 介绍</title>
    <link href="http://xaber.co/2018/06/21/Ganache-%E4%B8%8E-Truffle-%E4%BB%8B%E7%BB%8D/"/>
    <id>http://xaber.co/2018/06/21/Ganache-与-Truffle-介绍/</id>
    <published>2018-06-21T11:36:28.000Z</published>
    <updated>2018-06-21T11:39:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ganache"><a href="#Ganache" class="headerlink" title="Ganache"></a>Ganache</h2><p>主要功能为在本地启动一个以太坊私有网络，并在一开始，创建10个account，供开发者使用。</p><p>下载开箱即用 <a href="https://truffleframework.com/ganache" target="_blank" rel="noopener">ganache</a></p><h2 id="Truffle"><a href="#Truffle" class="headerlink" title="Truffle"></a>Truffle</h2><p>官网介绍：以太坊智能合约开发、测试的一把瑞士军刀。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>npm install -g truffle</code></p><h3 id="教程系列"><a href="#教程系列" class="headerlink" title="教程系列"></a>教程系列</h3><p>运行完以下四个教程，基本能掌握 <code>truffle</code> 的大致用法（此文可不看）。</p><ol><li><a href="https://truffleframework.com/tutorials/debugger-variable-inspection" target="_blank" rel="noopener">VARIABLE INSPECTION: GOING DEEPER WITH THE TRUFFLE SOLIDITY DEBUGGER</a></li><li><a href="https://truffleframework.com/tutorials/debugging-a-smart-contract" target="_blank" rel="noopener">DEBUGGING A SMART CONTRACT</a></li><li><a href="https://truffleframework.com/tutorials/robust-smart-contracts-with-openzeppelin" target="_blank" rel="noopener">BUILDING ROBUST SMART CONTRACTS WITH OPENZEPPELIN</a></li><li><a href="https://truffleframework.com/tutorials/pet-shop" target="_blank" rel="noopener">ETHEREUM PET SHOP</a></li></ol><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>truffle init</code> 通过脚本工具创建一个初始化，里面包含</p><ol><li><code>contracts</code></li><li><code>migrations</code></li><li><code>tests</code></li><li><code>truffle.js</code></li></ol><p>其中 <code>truffle.js</code> 中配置项，用于连接对应的网络。例如 <code>Ganache</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// See &lt;http://truffleframework.com/docs/advanced/configuration&gt;</span></span><br><span class="line">  <span class="comment">// for more about customizing your Truffle configuration!</span></span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">      host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      port: <span class="number">7545</span>,</span><br><span class="line">      network_id: <span class="string">"*"</span> <span class="comment">// Match any network id</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>contracts</code> 目录下编写智能合约。</p><p><code>migrations</code> 目录下对应文件用于部署智能合约到区块链上，以 1、2、3… 等序号开头。</p><p><code>test</code> 目录下，用于编写测试。支持 智能合约<code>.sol</code>的测试，以及支持使用 <code>javascript</code> 进行测试（使用 <a href="https://github.com/mochajs/mocha" target="_blank" rel="noopener">mocha</a> 和 <a href="https://github.com/chaijs/chai" target="_blank" rel="noopener">chai</a>）。</p><h3 id="truffle-boxes"><a href="#truffle-boxes" class="headerlink" title="truffle boxes"></a>truffle boxes</h3><p><code>truffle init</code> 构建一个空项目。而 <code>truffle unbox &lt;boxname&gt;</code> 用于从远程仓库拉一个box下来做初始化。</p><p>当前已有的 box 列表见：<a href="https://truffleframework.com/boxes" target="_blank" rel="noopener">TRUFFLE BOXES</a></p><h3 id="truffle-compile"><a href="#truffle-compile" class="headerlink" title="truffle compile"></a>truffle compile</h3><p><code>truffle compile</code> 编译 <code>contracts</code> 目录下 <code>.sol</code> 文件，在 <code>build/contracts</code> 目录下生成对应 artifacts JSON 文件。</p><p>如果需要重新编译，使用 <code>truffle compile --all</code></p><p>其他内容具体见：<a href="https://truffleframework.com/docs/getting_started/compile" target="_blank" rel="noopener">COMPILING CONTRACTS</a></p><h3 id="truffle-migrate"><a href="#truffle-migrate" class="headerlink" title="truffle migrate"></a>truffle migrate</h3><p><code>truffle migrate</code> 按照 <code>migrations</code> 下的序号命名顺序，进行调用并部署。</p><p>此部分功能，主要使用 <a href="https://github.com/trufflesuite/truffle-contract" target="_blank" rel="noopener">truffle-contract</a> 工具实现。</p><p>一般形态为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Migrations = artifacts.require(<span class="string">"./Migrations.sol"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Migrations);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>artifacts</code> 是 <code>truffle-contract</code> 提供的功能，<code>require</code> 需要是 <code>contracts/&lt;name&gt;.sol</code> 文件中同名的 <code>name</code></p><p>而如果同一个<code>.sol</code>文件中，定义了两个 <code>contract</code>，可通过 <code>require(&lt;contract-name&gt;)</code> 的形式来引入。</p><p><code>function</code> 除了接收 <code>deployer</code> 之外，还接收 <code>network</code> 参数，<code>deployer.deploy</code> 也支持其他的参数形式传递。</p><p>具体见：<a href="https://truffleframework.com/docs/getting_started/migrations" target="_blank" rel="noopener">RUNNING MIGRATIONS</a></p><h3 id="truffle-test"><a href="#truffle-test" class="headerlink" title="truffle test"></a>truffle test</h3><p>详见：</p><ol><li><a href="https://truffleframework.com/docs/getting_started/testing" target="_blank" rel="noopener">TESTING YOUR CONTRACTS</a></li><li><a href="https://truffleframework.com/docs/getting_started/javascript-tests" target="_blank" rel="noopener">WRITING TESTS IN JAVASCRIPT</a></li><li><a href="https://truffleframework.com/docs/getting_started/solidity-tests" target="_blank" rel="noopener">WRITING TESTS IN SOLIDITY</a></li></ol><h3 id="packages"><a href="#packages" class="headerlink" title="packages"></a>packages</h3><p><code>import</code> 优先引用 <code>.sol</code> 模块（同名情况下）</p><h3 id="contract-packages"><a href="#contract-packages" class="headerlink" title="contract packages"></a>contract packages</h3><h4 id="ethpm"><a href="#ethpm" class="headerlink" title="ethpm"></a>ethpm</h4><p><code>truffle install &lt;eth-package-name&gt;</code></p><p>包列表（界面较为简陋，基本没什么人提交，时间戳还是错的，文件存在 ipfs 上）—— <a href="https://www.ethpm.com/registry/packages" target="_blank" rel="noopener">Ethereum Package Management</a></p><p>更多内容见：<a href="https://truffleframework.com/docs/getting_started/packages-ethpm" target="_blank" rel="noopener">PACKAGE MANAGEMENT VIA ETHPM</a></p><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><p>一些example contracts 可直接拿来使用：<a href="https://github.com/ConsenSys/example-truffle-library" target="_blank" rel="noopener">example-truffle-library</a> —— 包已经被移除了 😊</p><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ol><li>教程 <a href="https://truffleframework.com/tutorials/debugger-variable-inspection" target="_blank" rel="noopener">VARIABLE INSPECTION: GOING DEEPER WITH THE TRUFFLE SOLIDITY DEBUGGER</a></li><li>文档 <a href="https://truffleframework.com/docs/getting_started/debugging" target="_blank" rel="noopener">DEBUGGING YOUR CONTRACTS</a></li></ol><h3 id="Console-与-debug"><a href="#Console-与-debug" class="headerlink" title="Console 与 debug"></a>Console 与 debug</h3><p><code>truffle console</code>、<code>truffle develop</code> 都是进入 <code>truffle</code> 环境，相应的 <code>compile</code> 等命令，只需要敲一个 <code>compile</code> 即可，不需要 <code>truffle compile</code></p><p>另外一些高级选项，如在写、调试智能合约，如果有需要，可以再参考配置与更多参数选项 —— 见 <strong>ADVANCED</strong> 部分。<a href="https://truffleframework.com/docs/advanced/configuration" target="_blank" rel="noopener">CONFIGURATION</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><a href="https://github.com/trufflesuite/truffle-hdwallet-provider" target="_blank" rel="noopener">truffle-hdwallet-provider</a> 通过助记词构建一个 web3 provider。</li><li><a href="https://github.com/OpenZeppelin/openzeppelin-solidity" target="_blank" rel="noopener">openzeppelin-solidity</a> 已存在的、安全的智能合约通用代码，例如 <code>SafeMath</code> 等，降低出问题的风险。</li><li><a href="https://truffleframework.com/docs/drizzle/getting-started" target="_blank" rel="noopener">DRIZZLE</a> 前端开发Dapp的工具</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ganache&quot;&gt;&lt;a href=&quot;#Ganache&quot; class=&quot;headerlink&quot; title=&quot;Ganache&quot;&gt;&lt;/a&gt;Ganache&lt;/h2&gt;&lt;p&gt;主要功能为在本地启动一个以太坊私有网络，并在一开始，创建10个account，供开发者使用。&lt;/p&gt;
&lt;p&gt;下载开箱即用 &lt;a href=&quot;https://truffleframework.com/ganache&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ganache&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Truffle&quot;&gt;&lt;a href=&quot;#Truffle&quot; class=&quot;headerlink&quot; title=&quot;Truffle&quot;&gt;&lt;/a&gt;Truffle&lt;/h2&gt;&lt;p&gt;官网介绍：以太坊智能合约开发、测试的一把瑞士军刀。&lt;/p&gt;
    
    </summary>
    
      <category term="Blockchain" scheme="http://xaber.co/categories/Blockchain/"/>
    
    
      <category term="ethereum" scheme="http://xaber.co/tags/ethereum/"/>
    
      <category term="solidity" scheme="http://xaber.co/tags/solidity/"/>
    
      <category term="Tools" scheme="http://xaber.co/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Jest文档备注</title>
    <link href="http://xaber.co/2017/07/13/Jest%E6%96%87%E6%A1%A3%E5%A4%87%E6%B3%A8/"/>
    <id>http://xaber.co/2017/07/13/Jest文档备注/</id>
    <published>2017-07-13T09:51:44.000Z</published>
    <updated>2018-12-26T16:38:02.822Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://facebook.github.io/jest/" target="_blank" rel="noopener">Jest</a> 文档备注，方便个人Review查询</p><p>后续有需要会再做更新</p><a id="more"></a><p><img src="/images/Jest_zpsljkd3qt6.png" alt="JEST"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://facebook.github.io/jest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jest&lt;/a&gt; 文档备注，方便个人Review查询&lt;/p&gt;
&lt;p&gt;后续有需要会再做更新&lt;/p&gt;
    
    </summary>
    
      <category term="Test" scheme="http://xaber.co/categories/Test/"/>
    
    
      <category term="工具" scheme="http://xaber.co/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>node 图片合成</title>
    <link href="http://xaber.co/2017/07/12/node-%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90/"/>
    <id>http://xaber.co/2017/07/12/node-图片合成/</id>
    <published>2017-07-12T03:34:53.000Z</published>
    <updated>2017-07-12T03:42:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇关于两个工具模块<code>images</code>、<code>gm</code>的介绍与问题处理</p><a id="more"></a><h3 id="一、本地最简单的方式-images模块"><a href="#一、本地最简单的方式-images模块" class="headerlink" title="一、本地最简单的方式 - images模块"></a>一、本地最简单的方式 - images模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const images = require(&apos;images&apos;)</span><br><span class="line"></span><br><span class="line">images(distPath)</span><br><span class="line">    .draw(images(tag), 0, 0)</span><br><span class="line">    .save(distPath);</span><br></pre></td></tr></table></figure><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>mac 上运行正常，centos上需要自己编译各种不同的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Can&apos;t load the addon. Issue to: https://github.com/zhangyuanwei/node-images/issues Error: /lib64/libc.so.6: version `GLIBC_2.14&apos; not found (required by /data/webroot/www/wx_edit/node_modules/images/bindings/linux/x64/6.0.0/binding.node)</span><br></pre></td></tr></table></figure><p>具体见 <a href="https://github.com/zhangyuanwei/node-images/issues/45" target="_blank" rel="noopener">https://github.com/zhangyuanwei/node-images/issues/45</a></p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>操作太复杂成本太高</p><h3 id="二、gm模块"><a href="#二、gm模块" class="headerlink" title="二、gm模块"></a>二、gm模块</h3><p>推荐使用</p><p><a href="https://github.com/aheckmann/gm" target="_blank" rel="noopener">https://github.com/aheckmann/gm</a></p><p>调用的相关其他工具，GraphicsMagick、ImageMagick</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function comImage(distPath, tag) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        gm(distPath)</span><br><span class="line">        .command(&apos;composite&apos;)</span><br><span class="line">        .in(&apos;-gravity&apos;, &apos;NorthWest&apos;)</span><br><span class="line">        .in(tag)</span><br><span class="line">        .write(distPath, function(err) &#123;</span><br><span class="line">            if (!err) &#123;</span><br><span class="line">                resolve(distPath);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="坑-1"><a href="#坑-1" class="headerlink" title="坑"></a>坑</h4><p>mac 上运行正常，centos上通过<code>yum install imagemagick</code>、<code>yum install graphicsmagick</code>没法玩。</p><p>需要执行安装工具，见</p><ol><li><a href="https://gist.github.com/paul91/9008409" target="_blank" rel="noopener">How to install GraphicsMagick on CentOS 6.4</a></li><li><a href="https://gist.github.com/abernardobr/e4292953fc84f9456cfa" target="_blank" rel="noopener">Install Graphics Magick on CentOS 7</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># Install build dependencies</span><br><span class="line">yum install -y gcc libpng libjpeg libpng-devel libjpeg-devel ghostscript libtiff libtiff-devel freetype freetype-devel</span><br><span class="line"></span><br><span class="line"># Get GraphicsMagick source</span><br><span class="line">wget ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/1.3/GraphicsMagick-1.3.9.tar.gz</span><br><span class="line">tar zxvf GraphicsMagick-1.3.9.tar.gz</span><br><span class="line"></span><br><span class="line"># Configure and compile</span><br><span class="line">cd GraphicsMagick-1.3.9</span><br><span class="line">./configure --enable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># Ensure everything was installed correctly</span><br><span class="line">gm version</span><br><span class="line"></span><br><span class="line"># If you are going to use this with PHP you can also instal the pecl extension</span><br><span class="line">pecl install gmagick-1.0.8b2</span><br></pre></td></tr></table></figure><h4 id="继续坑-如果报错"><a href="#继续坑-如果报错" class="headerlink" title="继续坑 - 如果报错"></a>继续坑 - 如果报错</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gm: error while loading shared libraries: libGraphicsMagick.so.3: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p>解决方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;/usr/local/lib&quot; &gt;&gt; /etc/ld.so.conf</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure></p><ol><li><a href="http://wiki.octave.org/GraphicsMagick" target="_blank" rel="noopener">GraphicsMagick</a></li><li><a href="https://duntuk.com/how-install-graphicsmagick-gmagick-php-extension" target="_blank" rel="noopener">How to install GraphicsMagick with GMagick PHP extension</a></li></ol><h4 id="最终建议"><a href="#最终建议" class="headerlink" title="最终建议"></a>最终建议</h4><p>centOS上的依赖安装，让专业的运维操作解决</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇关于两个工具模块&lt;code&gt;images&lt;/code&gt;、&lt;code&gt;gm&lt;/code&gt;的介绍与问题处理&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="http://xaber.co/categories/Node/"/>
    
    
      <category term="工具" scheme="http://xaber.co/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>谈谈前端工程化</title>
    <link href="http://xaber.co/2017/05/21/%E8%B0%88%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <id>http://xaber.co/2017/05/21/谈谈前端工程化/</id>
    <published>2017-05-21T14:22:27.000Z</published>
    <updated>2017-05-21T15:09:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>此篇是前两天在公司作为研发部门的一个TT分享，同步至此。分享的准备过程，其实也是对自己体系化的整理。原本认为分享过程大家死气沉沉，却没想到后面有同学发消息说学到很多，挺好。</p><p>话不多说，开始正题。<strong>此篇卖点</strong>：</p><a id="more"></a><ol><li>前端工程化包含哪些内容</li><li>前端工程化汲取的思考借鉴</li></ol><p>分享PPT，移除了公司部分的信息、历程，具体内容可见 此 <a href="https://github.com/Xaber20110202/Container/blob/master/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%EF%BC%88%E5%AF%B9%E5%A4%96%EF%BC%89.pdf" target="_blank" rel="noopener">PDF文件</a>。</p><h3 id="基础的前端工程化"><a href="#基础的前端工程化" class="headerlink" title="基础的前端工程化"></a>基础的前端工程化</h3><p><img src="http://h0.hucdn.com/open/201720/6a17dbea03b4f9aa_697x346.png" alt="基础的前端工程化"></p><h3 id="进阶的前端工程化"><a href="#进阶的前端工程化" class="headerlink" title="进阶的前端工程化"></a>进阶的前端工程化</h3><p><img src="http://h0.hucdn.com/open/201720/81f7c0f34eb04f95_1149x954.png" alt="进阶的前端工程化"></p><h3 id="手淘的前端工程化参考"><a href="#手淘的前端工程化参考" class="headerlink" title="手淘的前端工程化参考"></a>手淘的前端工程化参考</h3><p><img src="http://h0.hucdn.com/open/201720/3cb1fb4eeeb59036_1859x1816.png" alt="手淘的前端工程化大图"></p><h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><ol><li>大部分公司停留在基础的前端工程化阶段，因为后续更多的工程化迭代，需要有庞大的体量，以及，资深、专家级别的工程师、甚至专门的架构组做体系化思考与梳理</li><li>而这类级别的工程师，对小公司来说，可遇不可求的同时，也没有能力和资源去寻求投入进行工程化建设</li><li>小公司内部做的优化，主体欠缺更大的考虑和方向</li></ol><p>活到老学到老</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><a href="https://github.com/fouber/blog" target="_blank" rel="noopener">张云龙前端工程化系列博客</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇是前两天在公司作为研发部门的一个TT分享，同步至此。分享的准备过程，其实也是对自己体系化的整理。原本认为分享过程大家死气沉沉，却没想到后面有同学发消息说学到很多，挺好。&lt;/p&gt;
&lt;p&gt;话不多说，开始正题。&lt;strong&gt;此篇卖点&lt;/strong&gt;：&lt;/p&gt;
    
    </summary>
    
      <category term="总结系列" scheme="http://xaber.co/categories/%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="前端工程化" scheme="http://xaber.co/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="能力" scheme="http://xaber.co/tags/%E8%83%BD%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>ES6基础系列 —— class的糖怎么吃</title>
    <link href="http://xaber.co/2017/04/27/ES6%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97-%E2%80%94%E2%80%94-class%E7%9A%84%E7%B3%96%E6%80%8E%E4%B9%88%E5%90%83/"/>
    <id>http://xaber.co/2017/04/27/ES6基础系列-——-class的糖怎么吃/</id>
    <published>2017-04-27T09:21:24.000Z</published>
    <updated>2018-12-26T16:38:02.822Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>原型前前后后大概分享过也不止3次了，面试的时候也经常在提，虽然老话常谈，也没什么好讲的东西</p><p>不过，还是要重点强调下，原型和闭包是JS中核心中的核心，这两个东西会玩，基本上日常类的需求、bug改造起来会驾轻就熟很多</p><h3 id="先来几个栗子"><a href="#先来几个栗子" class="headerlink" title="先来几个栗子"></a>先来几个栗子</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const A = function () &#123;&#125;;</span><br><span class="line">A.prototype = &#123;</span><br><span class="line">    num: 1,</span><br><span class="line">    text: &apos;aaa&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 第一题</span><br><span class="line">const x = new A();</span><br><span class="line">console.log(x.num); </span><br><span class="line">console.log(x.text);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const y = new A();</span><br><span class="line">A.prototype = &#123;</span><br><span class="line">    num: 2</span><br><span class="line">&#125;;</span><br><span class="line">// 第二题</span><br><span class="line">console.log(y.num); </span><br><span class="line">console.log(y.text); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y.num = 3;</span><br><span class="line">const z = new A();</span><br><span class="line">// 第三题</span><br><span class="line">console.log(z.num); </span><br><span class="line">console.log(z.text);</span><br></pre></td></tr></table></figure><h3 id="一张图描述ES-5-prototype与继承"><a href="#一张图描述ES-5-prototype与继承" class="headerlink" title="一张图描述ES 5 prototype与继承"></a>一张图描述ES 5 prototype与继承</h3><p><img src="/images/090E1138-EA5C-460C-9881-13ED191872F9_zps32bmqjrs.jpeg" alt=""></p><h3 id="引用值更改"><a href="#引用值更改" class="headerlink" title="引用值更改"></a>引用值更改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function A () &#123;&#125;</span><br><span class="line">A.prototype = &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">        str: &apos;aaa&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var x = new A();</span><br><span class="line">var z = new A();</span><br><span class="line">x.obj.str = &apos;bbb&apos;;</span><br><span class="line">console.log(z.obj.str);</span><br></pre></td></tr></table></figure><p>会发现：<code>obj.str</code> 属性共享了，混乱了</p><p><strong>一般推荐的正常做法</strong>是，属性放在实例上也就是构造函数上，每个实例各自创建，而方法放在原型上，用于继承与共享</p><h3 id="ES-6-class-小例子"><a href="#ES-6-class-小例子" class="headerlink" title="ES 6 class 小例子"></a>ES 6 class 小例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.obj = &#123;</span><br><span class="line">            str: &apos;aaa&apos;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        alert(this.obj.str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">y = new A();</span><br><span class="line">h = new A();</span><br><span class="line">y.obj.str = &apos;bbb&apos;;</span><br><span class="line"></span><br><span class="line">y.alert();</span><br><span class="line">h.alert();</span><br></pre></td></tr></table></figure><p>这里的<code>obj.str</code> 没有共享了，为什么？</p><h3 id="ES-6-语法糖-extends、super"><a href="#ES-6-语法糖-extends、super" class="headerlink" title="ES 6 语法糖 extends、super"></a>ES 6 语法糖 extends、super</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class B extends A &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        // super 必须在最开始</span><br><span class="line">        // 一方面的原因从下面这行也可以看出来</span><br><span class="line">        this.str2 = this.obj.str + &apos;bbb&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    alertAndLog() &#123;</span><br><span class="line">        super.alert();</span><br><span class="line">        console.log(this.str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ------ 等价于 ------</span><br><span class="line"></span><br><span class="line">// 构造函数</span><br><span class="line">function B (props) &#123;</span><br><span class="line">    A.call(this, props);</span><br><span class="line">    this.str2 = this.obj.str + &apos;bbb&apos;;</span><br><span class="line">&#125;</span><br><span class="line">B.prototype = Object.create(A.prototype);</span><br><span class="line">B.prototype.alertAndLog = function () &#123;</span><br><span class="line">    A.prototype.alert();</span><br><span class="line">    console.log(this.str2);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>上面class的写法是不是更一目了然？这大概就是ES 6 class 语法糖的意义</li><li>注意上面的 super 的区别，在constructor 中，它代表父类型的构造函数，在原型方法中，则代表父类型的原型</li><li>ES5的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6的继承机制完全不同，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。因此，如果有constructor 就必须有 super()</li></ol><h3 id="7-static-关键字"><a href="#7-static-关键字" class="headerlink" title="7. static 关键字"></a>7. static 关键字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class B extends A &#123;</span><br><span class="line">    static console () &#123;</span><br><span class="line">        console.log(this.str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var t = new B();</span><br><span class="line">t.console(); // 是什么？</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line">B.console = function () &#123;</span><br><span class="line">    console.log(this.num);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="8-静态方法里使用-super-是怎么样的？"><a href="#8-静态方法里使用-super-是怎么样的？" class="headerlink" title="8. 静态方法里使用 super 是怎么样的？"></a>8. 静态方法里使用 super 是怎么样的？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class C extends B &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">    &#125;,</span><br><span class="line">    static consoleAndAlert() &#123;</span><br><span class="line">        // 跟 constructor 功效一致</span><br><span class="line">        super.console();</span><br><span class="line">        alert(this.str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C.str2 = &apos;ccc&apos;;</span><br><span class="line">C.consoleAndAlert();</span><br></pre></td></tr></table></figure><h3 id="9-缺陷"><a href="#9-缺陷" class="headerlink" title="9. 缺陷"></a>9. 缺陷</h3><h4 id="没有-private-关键字"><a href="#没有-private-关键字" class="headerlink" title="没有 private 关键字"></a>没有 private 关键字</h4><p>a. 使用ES6 Symbol模拟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const bar = Symbol(&apos;bar&apos;);</span><br><span class="line">const snaf = Symbol(&apos;snaf&apos;);</span><br><span class="line"></span><br><span class="line">export default class myClass&#123;</span><br><span class="line">    // 公有方法</span><br><span class="line">    foo(baz) &#123;</span><br><span class="line">        return this[bar](baz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 私有方法</span><br><span class="line">    [bar](baz) &#123;</span><br><span class="line">        return this[snaf] = baz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>b. 使用闭包模拟<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myClass = (()=&gt; &#123;</span><br><span class="line">    let num = 1;</span><br><span class="line">    return class A &#123;</span><br><span class="line">        foo(num2) &#123;</span><br><span class="line">            num += num2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>c. ES7 提案 —— 用 # 号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">    #x = 0;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        #x; // 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="静态属性、属性没法在class外层中定义，ES7-提案"><a href="#静态属性、属性没法在class外层中定义，ES7-提案" class="headerlink" title="静态属性、属性没法在class外层中定义，ES7 提案"></a>静态属性、属性没法在class外层中定义，ES7 提案</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    a = 10;</span><br><span class="line">    static a = 20;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-与Java的类继承区别"><a href="#10-与Java的类继承区别" class="headerlink" title="10. 与Java的类继承区别"></a>10. 与Java的类继承区别</h3><ol><li>JS 始终还是基于原型做的继承实现，基于的属性、闭包变量搜索</li><li>而像JAVA，更多是通过重新构建的形式完成继承，类和实例是不同的东西</li><li>类在定义完成后，运行时是不可动态添加属性</li><li>至于特性方面，JAVA有非常多的关键字，也是基于关键字的作用域实现各种各样的功能，抽象、多态、重写、重载</li><li>例如：public、protected、private、abstract、final</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">ECMAScript 6 入门</a></p><p><a href="https://segmentfault.com/a/1190000003798438" target="_blank" rel="noopener">JavaScript 原型系统的变迁，以及 ES6 class</a></p><p><a href="http://www.codeceo.com/article/java-extends.html" target="_blank" rel="noopener">Java 继承详解</a></p><p><a href="http://changsiyuan.github.io/2015/11/23/js-prototype/" target="_blank" rel="noopener">JavaScript 原型和原型链的理解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;原型前前后后大概分享过也不止3次了，面试的时候也经常在提，虽然老话常谈，也没什么好讲的东西&lt;/p&gt;
&lt;p&gt;不过，还是要重点强调下，原型和闭包是JS中核心中的核心，这两个东西会玩，基本上日常类的需求、bug改造起来会驾轻就熟很多&lt;/p&gt;
&lt;h3 id=&quot;先来几个栗子&quot;&gt;&lt;a href=&quot;#先来几个栗子&quot; class=&quot;headerlink&quot; title=&quot;先来几个栗子&quot;&gt;&lt;/a&gt;先来几个栗子&lt;/h3&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://xaber.co/categories/JavaScript/"/>
    
    
      <category term="底层基础" scheme="http://xaber.co/tags/%E5%BA%95%E5%B1%82%E5%9F%BA%E7%A1%80/"/>
    
      <category term="ES6" scheme="http://xaber.co/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>网页在微信中分享部分场景小图标丢失问题</title>
    <link href="http://xaber.co/2017/04/12/%E7%BD%91%E9%A1%B5%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E5%88%86%E4%BA%AB%E9%83%A8%E5%88%86%E5%9C%BA%E6%99%AF%E5%B0%8F%E5%9B%BE%E6%A0%87%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
    <id>http://xaber.co/2017/04/12/网页在微信中分享部分场景小图标丢失问题/</id>
    <published>2017-04-12T10:57:51.000Z</published>
    <updated>2019-07-18T09:01:12.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h3><ol><li>在微信中点击右上角分享，显示的标题、描述、图片有助于用户了解这个链接具体内容</li><li>技术侧根据<a href="https://mp.weixin.qq.com/wiki" target="_blank" rel="noopener">微信JS-SDK说明文档</a>，先通过后端请求获取权限验证配置，之后通过<code>wx.config</code>配置jssdk，最后通过<code>wx.shareConfig</code>进行标题、描述、链接、图片配置</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>部分场景下，用户点击分享展示的消息，在标题、描述、链接都正常的情况下，图片丢失，始终不展示<br><img src="http://h0.hucdn.com/open/201715/d9dd9615de9a91a2_1434x1274.png" alt=""></p><a id="more"></a><h3 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h3><ol><li>其实第一点想到的是：我前端没问题，“你微信端测一测”。毕竟我们是按照标准的方式进行的配置</li><li>我们自己的图片访问不稳定，分享时微信将该图片存储了，导致展示错误</li></ol><p>因而当时想到的两种最快定位路径是：</p><ol><li>咨询是否有微信相关工程师资源协助排查</li><li>是否可以查询相关图片访问404的百分比</li></ol><h3 id="然而"><a href="#然而" class="headerlink" title="然而"></a>然而</h3><ol><li>资源这块不是你想联系就能联系到的，如果你朋友的朋友的朋友认识马云，但未必你能见得到</li><li>又拍云较难统计这块数据</li></ol><h3 id="排查路径"><a href="#排查路径" class="headerlink" title="排查路径"></a>排查路径</h3><ol><li>联系多个出问题的用户，了解到都是android用户，并且听到些许关键词：多选群发</li><li>个人IOS机器试了好久多选群发，没有问题，上面的问题被略过了</li><li>使用 <a href="https://github.com/nodeWechat/wechat4u" target="_blank" rel="noopener">wechat4u</a> 控制台聊天机器人，log相关消息内容，发现对于图片无法显示的情况，appattach段中缺少数据，排除了CDN网络的问题（即使传递了404图片，也有appattach字段）<br><img src="http://h0.hucdn.com/open/201715/dfbc66e91d75c5f6_484x495.jpg" alt=""></li><li>发现另一个用户也提到相关关键词——群发，进一步了解到，也是android用户</li><li>几个人拉群，android机器进行群发，问题复现</li><li>测试几台ios、android测试机，确定问题为微信android客户端问题：多选群发较高频率出现图片丢失情况</li></ol><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><ol><li>通过微信公众号“微信团队”反馈问题</li><li>知乎上搜索微信工程师，私信联系反馈</li><li>知乎上创建问题，继续@相关人反馈</li><li>朋友圈发消息寻求朋友相关资源协助（最终联系到一位微信工程师，定位到问题，并同步下个版本会做修复）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景描述&quot;&gt;&lt;a href=&quot;#背景描述&quot; class=&quot;headerlink&quot; title=&quot;背景描述&quot;&gt;&lt;/a&gt;背景描述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在微信中点击右上角分享，显示的标题、描述、图片有助于用户了解这个链接具体内容&lt;/li&gt;
&lt;li&gt;技术侧根据&lt;a href=&quot;https://mp.weixin.qq.com/wiki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信JS-SDK说明文档&lt;/a&gt;，先通过后端请求获取权限验证配置，之后通过&lt;code&gt;wx.config&lt;/code&gt;配置jssdk，最后通过&lt;code&gt;wx.shareConfig&lt;/code&gt;进行标题、描述、链接、图片配置&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;部分场景下，用户点击分享展示的消息，在标题、描述、链接都正常的情况下，图片丢失，始终不展示&lt;br&gt;&lt;img src=&quot;http://h0.hucdn.com/open/201715/d9dd9615de9a91a2_1434x1274.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其他技能" scheme="http://xaber.co/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="微信" scheme="http://xaber.co/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>前端职场技术路径</title>
    <link href="http://xaber.co/2017/03/30/%E5%89%8D%E7%AB%AF%E8%81%8C%E5%9C%BA%E6%8A%80%E6%9C%AF%E8%B7%AF%E5%BE%84/"/>
    <id>http://xaber.co/2017/03/30/前端职场技术路径/</id>
    <published>2017-03-29T16:07:36.000Z</published>
    <updated>2017-03-29T16:35:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下仅描述个人对技术岗（当前所在公司、阿里系类似评级）职场路径的看法。</p><p>虽谈前端工程师，PHP工程师、JAVA工程师、运营、产品，其实相似、相通。</p><a id="more"></a><h3 id="实习生"><a href="#实习生" class="headerlink" title="实习生"></a>实习生</h3><p>最好有一些想法，汇聚一些问题，向前辈们多请教多学习。这里切忌一点，如果没有一定了解，千万不要有乱七八糟的想法还固执己见不听取意见，跟一些资深前辈争执，这样会显得很不可理喻，除非是有过硬的知识背景。</p><h3 id="P4工程师"><a href="#P4工程师" class="headerlink" title="P4工程师"></a>P4工程师</h3><p>日常基本以小需求为主，积极进取，也就有更多的机会让上级了解到你，委派更重要的任务。过程中，提炼一些问题，并通过相关手段能够自行解决，带来一些小的优化产出。</p><p>偶尔产出一些稍微大点的优化成果，便是考评提升的依据。</p><h3 id="P5高级工程师"><a href="#P5高级工程师" class="headerlink" title="P5高级工程师"></a>P5高级工程师</h3><p>日常以中型业务需求为主，平时辅以一些小优化，这才是高级工程师的职责。</p><p>如果作为P5，大需求做太慢，一直在处理日常需求，只是满足业务需求，小优化见不了几个，这样的高级工程师是不合格的。</p><p>至于说一个季度不时有一些大的优化成果产出，那也便有了升职的可能。</p><h3 id="P6资深工程师"><a href="#P6资深工程师" class="headerlink" title="P6资深工程师"></a>P6资深工程师</h3><p>日常以中大型需求、项目为主，能独立承担大型项目主要开发、能协调相关资源、跟进相应时间节点、确保项目平稳上线。</p><p>同样的，除此之外，一个季度至少需要几个大优化保底，才能说比较符合资深工程师的身份。</p><p>至于说升职的可能，关键要素在于是否承担了大体系、大系统、基础层面的产品化方案设计与建设。看得准方向，推得了架构，能够拔高整个团队的段位和水平。</p><h3 id="P7专家"><a href="#P7专家" class="headerlink" title="P7专家"></a>P7专家</h3><p>日常工作主体以大体系、大系统、基础层面建设为主，稳步推动技术演进、升级迭代。</p><p>更多是参与到基础设施开创与完善的过程中，汇聚想法、综合方案，看准拍板。</p><h3 id="……"><a href="#……" class="headerlink" title="……"></a>……</h3><hr><h3 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h3><p>主体要素为：发现问题、解决问题。</p><p>因而主观能动性非常重要。</p><p>而差别则在于解决问题的方式、程度、范围、深度，即能力范畴。</p><p>好似封装的境界：封装页面代码、封装项目下的模块、抽离业务封装多项目间共享模块、上线组件系统定义模块构建规范与方式等……</p><p>每一个层面都会遇到不一样的问题，每一次的解决，积累的经验，也使得我们向更高的境界靠拢。</p><p>最后，万变不离其宗，多观察、多学习、多努力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下仅描述个人对技术岗（当前所在公司、阿里系类似评级）职场路径的看法。&lt;/p&gt;
&lt;p&gt;虽谈前端工程师，PHP工程师、JAVA工程师、运营、产品，其实相似、相通。&lt;/p&gt;
    
    </summary>
    
      <category term="总结系列" scheme="http://xaber.co/categories/%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="总结规划" scheme="http://xaber.co/tags/%E6%80%BB%E7%BB%93%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>使用atcon告别混乱的if else</title>
    <link href="http://xaber.co/2017/03/02/%E4%BD%BF%E7%94%A8atcon%E5%91%8A%E5%88%AB%E6%B7%B7%E4%B9%B1%E7%9A%84if-else/"/>
    <id>http://xaber.co/2017/03/02/使用atcon告别混乱的if-else/</id>
    <published>2017-03-01T16:23:45.000Z</published>
    <updated>2017-03-02T06:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，来聊聊混乱的<code>if、else</code>是怎么来的，怎么和他们说再见，以及写的一个工具函数<code>atcon</code>。</p><a id="more"></a><h3 id="一、代码是怎样混乱的"><a href="#一、代码是怎样混乱的" class="headerlink" title="一、代码是怎样混乱的"></a>一、代码是怎样混乱的</h3><p>最简单的一个需求：根据活动改变二维码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">qrcode = &apos;img_a&apos;;</span><br><span class="line"></span><br><span class="line">// 活动二</span><br><span class="line">if (activity === 2) &#123;</span><br><span class="line">    qrcode = &apos;img_b&apos;;</span><br><span class="line">// 活动三</span><br><span class="line">&#125; else if (activity === 3) &#123;</span><br><span class="line">    qrcode = &apos;img_c&apos;;</span><br><span class="line">// 活动四</span><br><span class="line">&#125; else if (activity === 4) &#123;</span><br><span class="line">    qrcode = &apos;img_d&apos;;</span><br><span class="line">// 活动五</span><br><span class="line">&#125; else if (activity === 5) &#123;</span><br><span class="line">    qrcode = &apos;img_e&apos;;</span><br><span class="line">// 活动六</span><br><span class="line">&#125; else if (activity === 6) &#123;</span><br><span class="line">    qrcode = &apos;img_f&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，这个逻辑看起来还是挺简单的。这时候，我们增加一个变量<code>notice</code>，因为需要根据活动改变文案，而且只在某些特殊情况变更，于是它可能变成了这样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">qrcode = &apos;img_a&apos;;</span><br><span class="line">notice = &apos;文案一&apos;;</span><br><span class="line"></span><br><span class="line">// 活动二</span><br><span class="line">if (activity === 2) &#123;</span><br><span class="line">    qrcode = &apos;img_b&apos;;</span><br><span class="line">// 活动三</span><br><span class="line">&#125; else if (activity === 3) &#123;</span><br><span class="line">    qrcode = &apos;img_c&apos;;</span><br><span class="line">    notice = &apos;文案三&apos;;</span><br><span class="line">// 活动四</span><br><span class="line">&#125; else if (activity === 4) &#123;</span><br><span class="line">    qrcode = &apos;img_d&apos;;</span><br><span class="line">// 活动五</span><br><span class="line">&#125; else if (activity === 5) &#123;</span><br><span class="line">    qrcode = &apos;img_e&apos;;</span><br><span class="line">    notice = &apos;文案五&apos;;</span><br><span class="line">// 活动六</span><br><span class="line">&#125; else if (activity === 6) &#123;</span><br><span class="line">    qrcode = &apos;img_f&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来也没什么。但是这时候，产品跑来说，活动下线了，二维码需要做区分。于是代码可能又变成了这样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">qrcode = &apos;img_a&apos;;</span><br><span class="line">notice = &apos;文案零&apos;;</span><br><span class="line"></span><br><span class="line">// 活动二</span><br><span class="line">if (activity === 2) &#123;</span><br><span class="line">    qrcode = &apos;img_b&apos;;</span><br><span class="line">    if (isEnd) &#123;</span><br><span class="line">        qrcode = &apos;img_h&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">// 活动三</span><br><span class="line">&#125; else if (activity === 3) &#123;</span><br><span class="line">    qrcode = &apos;img_c&apos;;</span><br><span class="line">    notice = &apos;文案三&apos;;</span><br><span class="line">    if (isEnd) &#123;</span><br><span class="line">        qrcode = &apos;img_i&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">// 活动四</span><br><span class="line">&#125; else if (activity === 4) &#123;</span><br><span class="line">    qrcode = &apos;img_d&apos;;</span><br><span class="line">    if (isEnd) &#123;</span><br><span class="line">        qrcode = &apos;img_j&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">// 活动五</span><br><span class="line">&#125; else if (activity === 5) &#123;</span><br><span class="line">    qrcode = &apos;img_e&apos;;</span><br><span class="line">    notice = &apos;文案五&apos;;</span><br><span class="line">    if (isEnd) &#123;</span><br><span class="line">        qrcode = &apos;img_k&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">// 活动六</span><br><span class="line">&#125; else if (activity === 6) &#123;</span><br><span class="line">    qrcode = &apos;img_f&apos;;</span><br><span class="line">    if (isEnd) &#123;</span><br><span class="line">        qrcode = &apos;img_l&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isEnd) &#123;</span><br><span class="line">    notice = &apos;下线了&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是开始有点懵逼了？Hold on，隔了几天，产品又跑来跟我们说，活动三、四、五效果不是特别好，我们准备改一版样式，做下ABTEST看看效果。</p><p>这意味着我们的代码里又要增加一个变量，于是我们只能说，卧槽。</p><h3 id="二、如何改造"><a href="#二、如何改造" class="headerlink" title="二、如何改造"></a>二、如何改造</h3><p>或者说，如何在一开始给自己留好后路。</p><p>我们先从第1步重新开始，如果用对象保存这些关联，是不是就会简单很多呢。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">imgMap = &#123;</span><br><span class="line">    &apos;2&apos;: &apos;img_b&apos;,</span><br><span class="line">    &apos;3&apos;: &apos;img_c&apos;,</span><br><span class="line">    &apos;4&apos;: &apos;img_d&apos;,</span><br><span class="line">    &apos;5&apos;: &apos;img_e&apos;,</span><br><span class="line">    &apos;6&apos;: &apos;img_f&apos;</span><br><span class="line">&#125;;</span><br><span class="line">qrcode = imgMap[activity] || &apos;img_a&apos;;</span><br></pre></td></tr></table></figure><p>第2步，增加的notice，其实和qrcode没有任何关联。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">noticeMap = &#123;</span><br><span class="line">    &apos;3&apos;: &apos;文案三&apos;,</span><br><span class="line">    &apos;5&apos;: &apos;文案五&apos;</span><br><span class="line">&#125;;</span><br><span class="line">notice = noticeMap[activity] || &apos;文案零&apos;;</span><br></pre></td></tr></table></figure><p>活动下线区分，我们稍稍改变下结构好了，几分钟的事。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">imgMap = &#123;</span><br><span class="line">    online: &#123;</span><br><span class="line">        &apos;2&apos;: &apos;img_b&apos;,</span><br><span class="line">        // .....etc.</span><br><span class="line">    &#125;,</span><br><span class="line">    offline: &#123;</span><br><span class="line">        &apos;2&apos;: &apos;img_h&apos;,</span><br><span class="line">        // .....etc.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var noticeMap = &#123;</span><br><span class="line">    online: &#123;</span><br><span class="line">        &apos;3&apos;: &apos;文案三&apos;,</span><br><span class="line">        &apos;5&apos;: &apos;文案五&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    offline: &apos;下线了&apos;</span><br><span class="line">&#125;;</span><br><span class="line">qrcode = imgMap[isEnd ? &apos;offline&apos; : &apos;online&apos;][activity] || &apos;img_a&apos;;</span><br><span class="line"></span><br><span class="line">if (isEnd) &#123;</span><br><span class="line">    notice = noticeMap.offline;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    notice = noticeMap.online[activity] || &apos;文案零&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面，我们的编码方式，整体还是挺不错的，每种状态都差不多能对应一个结果。</p><p>但是，有没有发现，我们在<code>notice</code>的处理上，又开始写<code>if、else</code>了。</p><p>这里先不提，我们继续下面一步。</p><p>如果只是对在线的活动二、三做abtest，并改变里面的二维码和图片，我们该怎么做呢？</p><p>如果采用上面imgMap一一对应的关系，数据结构就变成了这样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">imgMap = &#123;</span><br><span class="line">    online: &#123;</span><br><span class="line">        &apos;2&apos;: &#123;</span><br><span class="line">            a: &apos;img_b&apos;,</span><br><span class="line">            b: &apos;img_o&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;3&apos;: &#123;</span><br><span class="line">            a: &apos;img_b&apos;,</span><br><span class="line">            b: &apos;img_p&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;4&apos;: &#123;</span><br><span class="line">            a: &apos;img_c&apos;,</span><br><span class="line">            d: &apos;img_c&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        // .....etc.</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    offline: &#123;</span><br><span class="line">        &apos;2&apos;: &#123;</span><br><span class="line">            a: &apos;img_h&apos;,</span><br><span class="line">            b: &apos;img_h&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;3&apos;: &#123;</span><br><span class="line">            a: &apos;img_b&apos;,</span><br><span class="line">            b: &apos;img_b&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;4&apos;: &#123;</span><br><span class="line">            a: &apos;img_c&apos;,</span><br><span class="line">            d: &apos;img_c&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        // .....etc.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有没有发现，为了保证我们可以一次性访问到具体对应的值，我们做了<strong>非常多重复配置</strong>。</p><p>我们当然不希望进行重复配置，而是希望处理的结构可以像这样简单：</p><p>var noticeMap = {<br>    online: {<br>        ‘2’: {<br>            a: ‘abtest文案二’<br>        },<br>        ‘3’: {<br>            a: ‘abtest文案三’,<br>            b: ‘文案三’<br>        },<br>        ‘5’: ‘文案五’<br>    },<br>    offline: ‘下线了’<br>};</p><p>但是我们怎么提取对应的值，又如何避免提取的过程不会出错呢。</p><p>像上面notice一样，我们只能写<code>if、else</code>判断代码，外加循环判断对应属性的值是否存在，好像又要重走以前的老路。</p><h3 id="三、使用-atcon"><a href="#三、使用-atcon" class="headerlink" title="三、使用 atcon"></a>三、使用 atcon</h3><p>atcon就是用来解决这个问题，封装了属性值提取、reduce循环判断等处理，让大家可以拥有清晰美妙的结构的同时，也能非常方便地提取对应条件分支的值。</p><p>使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">imgMap = &#123;</span><br><span class="line">    online: &#123;</span><br><span class="line">        &apos;2&apos;: &#123;</span><br><span class="line">            a: &apos;img_b&apos;,</span><br><span class="line">            b: &apos;img_o&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;3&apos;: &#123;</span><br><span class="line">            a: &apos;img_b&apos;,</span><br><span class="line">            b: &apos;img_p&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;4&apos;: &apos;img_c&apos;,</span><br><span class="line">        &apos;5&apos;: &apos;img_d&apos;,</span><br><span class="line">        &apos;6&apos;: &apos;img_e&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    offline: &#123;</span><br><span class="line">        &apos;2&apos;: &apos;img_h&apos;,</span><br><span class="line">        &apos;3&apos;: &apos;img_i&apos;,</span><br><span class="line">        &apos;4&apos;: &apos;img_j&apos;,</span><br><span class="line">        &apos;5&apos;: &apos;img_k&apos;,</span><br><span class="line">        &apos;6&apos;: &apos;img_l&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    __DEFAULT__: &apos;img_a&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">noticeMap = &#123;</span><br><span class="line">    online: &#123;</span><br><span class="line">        &apos;2&apos;: &#123;</span><br><span class="line">            a: &apos;abtest文案二&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;3&apos;: &#123;</span><br><span class="line">            a: &apos;abtest文案三&apos;,</span><br><span class="line">            b: &apos;文案三&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;5&apos;: &apos;文案五&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    offline: &apos;下线了&apos;</span><br><span class="line">    __DEFAULT__: &apos;文案零&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">isImg = img =&gt; img.search(/\.(png|jpg)$/) !== -1;</span><br><span class="line">isString = str =&gt; Object.prototype.toString.call(str) === &apos;[object String]&apos;;</span><br><span class="line"></span><br><span class="line">qrcode = atcon(imgMap, [isEnd ? &apos;offline&apos; : &apos;online&apos;, activity, isAbtest ? &apos;a&apos; : &apos;b&apos;], isImg);</span><br><span class="line">notice = atcon(noticeMap, [isEnd ? &apos;offline&apos; : &apos;online&apos;, activity, isAbtest ? &apos;a&apos; : &apos;b&apos;], isString);</span><br></pre></td></tr></table></figure><p>atcon将我们一开始的默认值，也通过<code>__DEFAULT__</code>的提取，做了指定。因此，复杂的分支判断，只要先通过细致设想的结构，然后与atcon完美地结合起来，就可以开始和<code>if else</code>说再见了。</p><h3 id="四、结构变更"><a href="#四、结构变更" class="headerlink" title="四、结构变更"></a>四、结构变更</h3><p>如果这时候，需要把所有abtest的a，文案全部改成一样的，而下线的文案保持跟上线的文案一致，我们甚至能够直接改变noticeMap结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">noticeMap = &#123;</span><br><span class="line">    b: &#123;</span><br><span class="line">        &apos;3&apos;: &apos;文案三&apos;,</span><br><span class="line">        &apos;5&apos;: &apos;文案五&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    a: &apos;一样的ABTEST文案&apos;,</span><br><span class="line">    __DEFAULT__: &apos;文案零&apos;</span><br><span class="line">&#125;;</span><br><span class="line">notice = atcon(noticeMap, [isAbtest ? &apos;a&apos; : &apos;b&apos;, activity], isString);</span><br></pre></td></tr></table></figure><p>我们改变思路、结构的同时，改变atcon第二个数组参数的数组项位置和数量，就达到了调整复杂<code>if else</code>逻辑的目的。</p><h3 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h3><p>我们不改逻辑，基本不改代码，我们只改配置。</p><p>从现在起，告别混乱的<code>if else</code>。</p><p>具体见：<a href="https://github.com/Xaber20110202/atcon" target="_blank" rel="noopener">atcon</a></p><hr><h3 id="思路来源"><a href="#思路来源" class="headerlink" title="思路来源"></a>思路来源</h3><ul><li><a href="https://book.douban.com/subject/4822685/" target="_blank" rel="noopener">编码 隐匿在计算机软硬件背后的语言</a> —— 用符号代替语言</li><li><a href="https://book.douban.com/subject/26382780/" target="_blank" rel="noopener">JavaScript设计模式与开发实践</a> —— 策略模式、职责链模式</li><li><a href="https://github.com/milan-hwj/judgment" target="_blank" rel="noopener">milan-hwj</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一篇，来聊聊混乱的&lt;code&gt;if、else&lt;/code&gt;是怎么来的，怎么和他们说再见，以及写的一个工具函数&lt;code&gt;atcon&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="编程系列" scheme="http://xaber.co/categories/%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="可维护性" scheme="http://xaber.co/tags/%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7/"/>
    
      <category term="if else" scheme="http://xaber.co/tags/if-else/"/>
    
  </entry>
  
  <entry>
    <title>微信授权登录流程</title>
    <link href="http://xaber.co/2017/02/22/%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/"/>
    <id>http://xaber.co/2017/02/22/微信授权登录流程/</id>
    <published>2017-02-22T13:10:40.000Z</published>
    <updated>2018-12-26T16:38:02.822Z</updated>
    
    <content type="html"><![CDATA[<p>优点：</p><ul><li>仅在用户openid、unionid未绑定过平台账号情况下，需要手机号、验证码进行注册、登录、绑定</li><li>已经绑定过unionid的用户，在同一个公众平台下的不同公众号、小程序上第一次做注册、登录、绑定操作时，无需再通过手机号验证码，只要再进行一次用户信息授权（unionid、需用户确认）</li><li>当openid已存在绑定关系，利用静默信息授权（openid、无感知），进行登录操作</li></ul><a id="more"></a><p><img src="/images/2017.01.09_zpsz5wutexo.png" alt="微信授权登录流程"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅在用户openid、unionid未绑定过平台账号情况下，需要手机号、验证码进行注册、登录、绑定&lt;/li&gt;
&lt;li&gt;已经绑定过unionid的用户，在同一个公众平台下的不同公众号、小程序上第一次做注册、登录、绑定操作时，无需再通过手机号验证码，只要再进行一次用户信息授权（unionid、需用户确认）&lt;/li&gt;
&lt;li&gt;当openid已存在绑定关系，利用静默信息授权（openid、无感知），进行登录操作&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="其他技能" scheme="http://xaber.co/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>字符编码ASCII，Unicode和UTF-8学习</title>
    <link href="http://xaber.co/2017/02/22/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81ASCII%EF%BC%8CUnicode%E5%92%8CUTF-8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://xaber.co/2017/02/22/字符编码ASCII，Unicode和UTF-8学习/</id>
    <published>2017-02-22T13:02:01.000Z</published>
    <updated>2017-02-22T13:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>此文大量内容复制自<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode和UTF-8</a>，在此基础上，增加部分个人理解，用于存档。</p><a id="more"></a><h3 id="一、ASCII码"><a href="#一、ASCII码" class="headerlink" title="一、ASCII码"></a>一、ASCII码</h3><p>所有的信息最终都表示为一个二进制的字符串，八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。</p><p>上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。<br>ASCII码一共规定了128个字符的编码，比如空格”SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。</p><p>见 <a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">维基百科 - ASCII</a></p><h3 id="二、非ASCII编码"><a href="#二、非ASCII编码" class="headerlink" title="二、非ASCII编码"></a>二、非ASCII编码</h3><p>一个字节8位，代表256个字符，ASCII码占了128位，剩下128位，各个国家没法分。因而会造成，明明是同一个8位二进制，130（10000010）在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)，在俄语编码中又会代表另一个符号。</p><p>至于亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示256x256=65536个符号。</p><h3 id="三、Unicode"><a href="#三、Unicode" class="headerlink" title="三、Unicode"></a>三、Unicode</h3><p>世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。</p><p>可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，就像它的名字都表示的，这是一种所有符号的编码。</p><p>但是需要注意的是，<strong>Unicode只是字符集</strong>。它规定了一个字符，代表的十六进制是什么，例如汉字”严”的unicode是十六进制数4E25，二进制应该为（100111000100101），而其<strong>没有规定这个二进制代码应该怎么存储</strong>。</p><p>好比我发明了一个字，把 “卧槽” 两个字合成一个字，它的unicode可能是十六进制数EEEE，二进制是1110111011101110（才2位，也还好嘛）。但是，想想0x7FFFFFFF（1111111111111111111111111111111），就逆天了。</p><p>这里有两个问题：</p><ol><li><p>英文字母只用一个字节表示就够了，如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的</p></li><li><p>计算机怎么知道三个字节（11101110 11101110 11101110）表示一个符号，而不是分别表示三个符号？</p></li></ol><h3 id="四、UTF-8"><a href="#四、UTF-8" class="headerlink" title="四、UTF-8"></a>四、UTF-8</h3><p>互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种Unicode的实现方式。其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，<strong>UTF-8是Unicode的实现方式之一</strong>。</p><p>其解决了上面提到的两个问题，这也是它最大的一个特点，因为是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。其解决方式（编码规则）是这样的：</p><ol><li><p>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p></li><li><p>对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Unicode符号范围 | UTF-8编码方式</span><br><span class="line">(十六进制) | （二进制）</span><br><span class="line">--------------------+---------------------------------------------</span><br><span class="line">0000 0000 到 0000 007F | 0xxxxxxx</span><br><span class="line">0000 0080 到 0000 07FF | 110xxxxx 10xxxxxx</span><br><span class="line">0000 0800 到 0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line">0001 0000 到 0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure><p>计算机的识别可以理解为是这样的：依次读取，如果读到这个字节开头是0，这个字节完了就完了；读到这个字节前面有4个1，那就再读3个字节（包括当前的字节就是4个字节）（而且后面三个字节都是以10开头）拼凑起来。即：如果一个字节的第一位是0，则这个字节单独就是一个字符；如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节。</p><p>“严”的unicode是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800-0000 FFFF），因此”严”的UTF-8编码需要三个字节，即格式是”1110xxxx 10xxxxxx 10xxxxxx”。</p><p>然后，从”严”的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。即：100101填到 <code>1110xxxx 10xxxxxx 10xxxxxx</code>，最后那个字节的xxxxxx上，111000填到<code>1110xxxx 10xxxxxx 10xxxxxx</code>最后第二个xxxxxx上，100填到<code>1110xxxx 10xxxxxx 10xxxxxx</code>第一个xxxxxx末尾，得到<code>111xx100 10111000 10100101</code>，然后剩下的xx补为0，这样就得到了，”严”的UTF-8编码是”11100100 10111000 10100101”，其转换成十六进制就是E4B8A5。</p><p>有没有发现，其实”严”的Unicode码是4E25，UTF-8编码是E4B8A5，两者是不一样的。因为UTF-8编码方式的很多位，被用来作为“标志”。</p><h3 id="五、Little-endian和Big-endian"><a href="#五、Little-endian和Big-endian" class="headerlink" title="五、Little endian和Big endian"></a>五、Little endian和Big endian</h3><p>此外，Unicode码也可以采用UCS-2格式直接存储。以汉字”严”为例，Unicode码是4E25，需要用两个字节存储，一个字节是4E，另一个字节是25。存储的时候，4E在前，25在后，就是Big endian方式；25在前，4E在后，就是Little endian方式。</p><p>这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。</p><p>因此，第一个字节在前，就是”大头方式”（Big endian），第二个字节在前就是”小头方式”（Little endian）。</p><p>那么很自然的，就会出现一个问题：计算机怎么知道某一个文件到底采用哪一种方式（大头还是小头）编码？</p><p>Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做”零宽度非换行空格”（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。</p><p>如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。</p><h3 id="六、编码方式识别"><a href="#六、编码方式识别" class="headerlink" title="六、编码方式识别"></a>六、编码方式识别</h3><p>正如前面提到的，UCS-2 大头、小头分别使用FE FF、FF FE来区分，同样的道理，一个文件里有一个”严”字，其编码是六个字节”EF BB BF E4 B8 A5”，前三个字节”EF BB BF”表示这是UTF-8编码，后三个”E4B8A5”就是”严”的具体编码，它的存储顺序与编码顺序是一致的。</p><hr><h4 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h4><ul><li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode和UTF-8</a></li><li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">汉字对应表</a></li><li><a href="http://cenalulu.github.io/linux/character-encoding/" target="_blank" rel="noopener">十分钟搞清字符集和字符编码</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文大量内容复制自&lt;a href=&quot;http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;字符编码笔记：ASCII，Unicode和UTF-8&lt;/a&gt;，在此基础上，增加部分个人理解，用于存档。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="http://xaber.co/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="字符编码" scheme="http://xaber.co/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>ES6基础系列 —— 理解Generator及其应用场景</title>
    <link href="http://xaber.co/2017/01/25/ES6%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97-%E2%80%94%E2%80%94-%E7%90%86%E8%A7%A3generator%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://xaber.co/2017/01/25/ES6基础系列-——-理解generator及其应用场景/</id>
    <published>2017-01-24T16:12:21.000Z</published>
    <updated>2017-02-07T03:09:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天给团队做的一次关于Generator的分享，整理至此。这次分享的目的是：循序渐进地让大家对ES6的Generator有一个初步的了解、然后加深理解、再通过一个run函数知晓其应用场景，最后明晰Generator带来的意义。<br><a id="more"></a></p><h3 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h3><p>我们比较常遇见异步的两个场景：顺序调用和并行调用。</p><p>我们平时的异步处理一般是这样写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var getList1 = (success) =&gt; &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &apos;http://sapi.bbeeii.com/martgoods/category/fightgroup.html&apos;,</span><br><span class="line">        type: &apos;GET&apos;,</span><br><span class="line">        dataType: &apos;jsonp&apos;,</span><br><span class="line">        jsonpCallback: &apos;bbeeiiMartgoodsCategoryGet&apos;,</span><br><span class="line">        success</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">var getList2 = (success) =&gt; &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &apos;http://sapi.bbeeii.com/martshow/1-15----1.html&apos;,</span><br><span class="line">        type: &apos;GET&apos;,</span><br><span class="line">        dataType: &apos;jsonp&apos;,</span><br><span class="line">        jsonpCallback: &apos;bbeeiiMartshowGet&apos;,</span><br><span class="line">        success</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 顺序调用</span><br><span class="line">getList1((resp1) =&gt; &#123;</span><br><span class="line">    // do something</span><br><span class="line">    getList2(resp2 =&gt; &#123;</span><br><span class="line">        // do something</span><br><span class="line">        // ..... 回调地狱</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 可能的并行调用</span><br><span class="line">var getAllList = (getLists, callback) =&gt; &#123;</span><br><span class="line">    const listLen = getLists.length;</span><br><span class="line">    const resultArr = Array.from(&#123;</span><br><span class="line">        length: listLen</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    getLists.forEach((getList, index) =&gt; &#123;</span><br><span class="line">        getList((resp) =&gt; &#123;</span><br><span class="line">            resultArr[index] = resp;</span><br><span class="line"></span><br><span class="line">            // 简单判断 中间要做各种兼容处理、错误判断，比较复杂</span><br><span class="line">            if (resultArr.filter((result) =&gt; result).length === listLen) &#123;</span><br><span class="line">                callback(resultArr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面两个例子相对还比较简单，但当我们把场景搬到Node上，我们毫无疑问会遇到两个问题：</p><ol><li>错误处理</li><li>回调地狱</li></ol><h3 id="二、async-js-／-Promise"><a href="#二、async-js-／-Promise" class="headerlink" title="二、async.js ／ Promise"></a>二、async.js ／ Promise</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 顺序调用</span><br><span class="line">async.series([</span><br><span class="line">        (callback) =&gt; callback(null, &apos;one&apos;),</span><br><span class="line">        (callback) =&gt; callback(null, &apos;two&apos;)</span><br><span class="line">    ],</span><br><span class="line">    // optional callback</span><br><span class="line">    (err, results) =&gt; &#123;</span><br><span class="line">        // results is now equal to [&apos;one&apos;, &apos;two&apos;]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">// 并行调用</span><br><span class="line">async.parallel([</span><br><span class="line">        (callback) =&gt; setTimeout(() =&gt; callback(null, &apos;one&apos;), 200),</span><br><span class="line">        (callback) =&gt; setTimeout(() =&gt; callback(null, &apos;two&apos;), 100)</span><br><span class="line">    ],</span><br><span class="line">    // optional callback</span><br><span class="line">    (err, results) =&gt; &#123;</span><br><span class="line">        // the results array will equal [&apos;one&apos;,&apos;two&apos;] even though</span><br><span class="line">        // the second function had a shorter timeout.</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>我们可以理解为，async.js提供了异步流程控制，相当于上述开篇的进一步封装，但其仍是各种callback。</p><p>同理，Promise尽管提供了链式的调用，看起来告别了回调地狱，提供了非常大的便利，但本质还是“异步的编写方式”，写太多then也比较繁琐（因为不在本文主题之内，不做发散）。</p><h3 id="三、Generator"><a href="#三、Generator" class="headerlink" title="三、Generator"></a>三、Generator</h3><h4 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h4><p>Generator最初步的了解，需要大家至少从 <a href="http://es6.ruanyifeng.com/#docs/Generator" target="_blank" rel="noopener">阮一峰老师的ES6</a> 里了解对应的function*、yield、next、value、done这几个概念。</p><p>先抛一个最简单的理解：就把他看成一种新的语法，Generator函数执行，返回一个对象，对象拥有next方法。next方法每一次执行，依次迭代一个yield，返回一个新的对象，该对象拥有value、done属性。</p><h4 id="3-1-yield后面语句执行时机"><a href="#3-1-yield后面语句执行时机" class="headerlink" title="3.1 yield后面语句执行时机"></a>3.1 yield后面语句执行时机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 2个log哪个先出来</span><br><span class="line">const gen = function*() &#123;</span><br><span class="line">    yield setTimeout(() =&gt; &#123;</span><br><span class="line">        console.log(&apos;gen&apos;);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;;</span><br><span class="line">// Generator实例 拥有next方法</span><br><span class="line">var genResult = gen();</span><br><span class="line"></span><br><span class="line">// next调用执行后，返回一个对象，包含value与done属性</span><br><span class="line">console.log(genResult.next());</span><br></pre></td></tr></table></figure><p><strong>知识点一</strong>：这里有一个误区，有可能会误认为Generator执行环境在另一个线程中，但实际上不是。yield后面的语句，还是按照正常的环境在执行，yield相当于把该行的语句推出来执行，并且从Generator执行环境中退出来。</p><p>再换一个方式，大家再试试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let test = 1;</span><br><span class="line">const gen = function*() &#123;</span><br><span class="line">    yield test = 2;</span><br><span class="line">    test = 3;</span><br><span class="line">&#125;;</span><br><span class="line">const result = gen();</span><br><span class="line">console.log(test); // 1</span><br><span class="line">console.log(result.next().value); // 2</span><br><span class="line">// 补充注意：当迭代遇到return、发生错误、或最后一个yield执行完成再执行一遍next后，才会将done变更为true</span><br><span class="line">console.log(result.next().value, test); // undefined 3</span><br></pre></td></tr></table></figure></p><h4 id="3-2-yield的返回值"><a href="#3-2-yield的返回值" class="headerlink" title="3.2 yield的返回值"></a>3.2 yield的返回值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var gen = function*() &#123;</span><br><span class="line">    var b = yield 1 + 2;</span><br><span class="line">    console.log(&apos;b&apos;, b);</span><br><span class="line">&#125;;</span><br><span class="line">var result = gen();</span><br><span class="line">console.log(&apos;第1次迭代&apos;, result.next());</span><br><span class="line">console.log(&apos;第2次迭代&apos;, result.next());</span><br><span class="line"></span><br><span class="line">// 依次出现：</span><br><span class="line">// 第1次迭代 Object &#123;value: 3, done: false&#125;</span><br><span class="line">// b undefined</span><br><span class="line">// 第2次迭代 Object &#123;value: undefined, done: true&#125;</span><br></pre></td></tr></table></figure><p>这里或许大家会好奇，为什么b是undefined，而第一次迭代出来的对象，value属性得到了 1+2 的值3。</p><p><strong>知识点二</strong>：yield语句没有返回值，当 Generator实例调用next()方法后，返回对象value属性，得到了这一次yield 或return 后面语句的求值情况。</p><p>结合知识点一，可以把yield看成一种类return的语法。其返回值，只作用在next方法调用后返回的对象的value属性上。而其自身，是没有返回值的。</p><p>我们可以试着玩一点改造：把yield 语句换成 yieldFunc，并对后面语句进行一层function包裹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const yieldFunc = (() =&gt; &#123;</span><br><span class="line">    let yieldResult = undefined;</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">        yieldResult = 1 + 2;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">yieldFunc();</span><br></pre></td></tr></table></figure></p><p>如上，类似的，yieldFunc没有返回值，但是yieldResult得到了3。</p><p>再让我们把玩一番：将 function* 改造为 generatorFunc，进行一层function包裹。并将每一次yield、return拆分为不同的字符串，用于eval执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">const generatorFunc = (arr) =&gt; &#123;</span><br><span class="line">    let i = 0;</span><br><span class="line">    let yieldResult = undefined;</span><br><span class="line">    const len = arr.length;</span><br><span class="line"></span><br><span class="line">    const yieldFunc = (callback) =&gt; &#123;</span><br><span class="line">        yieldResult = callback();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // 用于保留作用域</span><br><span class="line">    let evalCall = (i) =&gt; &#123;</span><br><span class="line">        eval(arr[i]);</span><br><span class="line">        evalCall = () =&gt; eval(arr[i + 1]);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            next() &#123;</span><br><span class="line">                evalCall(i);</span><br><span class="line">                i += 1;</span><br><span class="line">                return &#123;</span><br><span class="line">                    value: yieldResult,</span><br><span class="line">                    done: i === len</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const gen = generatorFunc([`var a = 1; var b = yieldFunc(function () &#123;</span><br><span class="line">        return 1 + 2;</span><br><span class="line">    &#125;)`,</span><br><span class="line">    &apos;yieldFunc(function()&#123;console.log(&quot;a=&quot; + a + &quot;;b=&quot; + b)&#125;);&apos;</span><br><span class="line">]);</span><br><span class="line">const result = gen();</span><br><span class="line"></span><br><span class="line">console.log(&apos;第1次迭代&apos;, result.next());</span><br><span class="line">console.log(&apos;第2次迭代&apos;, result.next());</span><br><span class="line"></span><br><span class="line">// 依次出现</span><br><span class="line">// 第1次迭代 Object &#123;value: 3, done: false&#125;</span><br><span class="line">// a=1;b=undefined</span><br><span class="line">// 第2次迭代 Object &#123;value: undefined, done: true&#125;</span><br></pre></td></tr></table></figure><p>是不是发现还挺好玩的？</p><p>但是上面的处理，只是最基本的模拟实现，不支持next传递参数（好像说了什么不得了的东西）。</p><h4 id="3-3-next传递参数"><a href="#3-3-next传递参数" class="headerlink" title="3.3 next传递参数"></a>3.3 next传递参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const gen = function*() &#123;</span><br><span class="line">    const b = yield 1 + 2;</span><br><span class="line">    const c = yield b + &apos;测试&apos;;</span><br><span class="line">    console.log(&apos;c&apos;, c);</span><br><span class="line">&#125;;</span><br><span class="line">const result = gen();</span><br><span class="line">console.log(&apos;第1次迭代&apos;, result.next());</span><br><span class="line">console.log(&apos;第2次迭代&apos;, result.next(&apos;第2次迭代&apos;));</span><br><span class="line">console.log(&apos;第3次迭代&apos;, result.next(&apos;第3次迭代&apos;));</span><br><span class="line"></span><br><span class="line">// 依次出现：</span><br><span class="line">// 第1次迭代 Object &#123;value: 3, done: false&#125;</span><br><span class="line">// 第2次迭代 Object &#123;value: &quot;第2次迭代测试&quot;, done: false&#125;</span><br><span class="line">// c 第3次迭代</span><br><span class="line">// 第3次迭代 Object &#123;value: undefined, done: true&#125;</span><br></pre></td></tr></table></figure><p>我们发现，第一次迭代，得到的value 3毫无疑问，是第一次yield出来的求值情况。而yield是没有返回值的，为什么第二次迭代中，b获得了<em>第2次迭代</em>这个字符串，而在第三次迭代中，为什么c获得了<em>第3次迭代</em>这个字符串。</p><p><strong>知识点三</strong>：next方法可以接受参数，参数替代了上一次yield语句的位置，被作为“返回值”。</p><h3 id="Generator总结"><a href="#Generator总结" class="headerlink" title="Generator总结"></a>Generator总结</h3><p>记住上面三个知识点，非常重要。</p><p>巩固一下最简单的理解（表现层面）：把他看成一种新的语法，Generator函数执行，返回一个对象，对象拥有next方法。</p><ol><li>next方法每一次执行，依次迭代一个yield（这时候才推出后面的语句，进行执行），返回一个新的对象</li><li>yield语句类似于return 本身没有返回值，但其后面语句的求值结果会被作为返回对象的value属性</li><li>next方法可以接受参数，参数被当作上一次yield 语句的返回值</li></ol><p>下面开始明晰其应用场景</p><h3 id="Generator应用场景"><a href="#Generator应用场景" class="headerlink" title="Generator应用场景"></a>Generator应用场景</h3><h4 id="至关重要的run函数"><a href="#至关重要的run函数" class="headerlink" title="至关重要的run函数"></a>至关重要的run函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const run = (fn) =&gt; &#123;</span><br><span class="line">    const gen = fn();</span><br><span class="line">    const next = (data) =&gt; &#123;</span><br><span class="line">        // 第一次传递的data undefined</span><br><span class="line">        const result = gen.next(data);</span><br><span class="line">        if (result.done) return;</span><br><span class="line">        // 只要保证genrator 内部 yield 出来的东西是函数即可</span><br><span class="line">        // yield 出来的是一个函数，接受另一个函数作为参数</span><br><span class="line">        // 也就达到了顺序执行的目的</span><br><span class="line">        result.value(next);</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var getList1 = (success) =&gt; &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &apos;http://sapi.bbeeii.com/martgoods/category/fightgroup.html&apos;,</span><br><span class="line">        type: &apos;GET&apos;,</span><br><span class="line">        dataType: &apos;jsonp&apos;,</span><br><span class="line">        jsonpCallback: &apos;bbeeiiMartgoodsCategoryGet&apos;,</span><br><span class="line">        success</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">var getList2 = (success) =&gt; &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &apos;http://sapi.bbeeii.com/martshow/1-15----1.html&apos;,</span><br><span class="line">        type: &apos;GET&apos;,</span><br><span class="line">        dataType: &apos;jsonp&apos;,</span><br><span class="line">        jsonpCallback: &apos;bbeeiiMartshowGet&apos;,</span><br><span class="line">        success</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">var genFunc = function*() &#123;</span><br><span class="line">    // 注意a/b，是通过 上面的data传进来的东西（而不是函数的返回值）</span><br><span class="line">    // 写惯了异步，还是非常不习惯的</span><br><span class="line">    var a = yield getList1;</span><br><span class="line">    var b = yield getList2;</span><br><span class="line">    console.log(a, b);</span><br><span class="line">&#125;;</span><br><span class="line">run(genFunc);</span><br></pre></td></tr></table></figure><p>记住上面提到的三个知识点，能理解a、b值的情况，相信对Generator理解的问题，便不大了。</p><p>再让我们加深下理解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">run(function * () &#123;</span><br><span class="line">    var a = yield (callback) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            alert(1);</span><br><span class="line">            callback(2);</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var b = yield (callback) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(a, b);</span><br><span class="line">            var c = a + b;</span><br><span class="line">            callback(c);</span><br><span class="line">        &#125;, 3000);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(a, b);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><strong>话糙的最关键点一</strong>：yield没有返回值，通过.next传递进来的值，代替上一个yield语句执行的地方；</li><li><strong>话糙的最关键点二</strong>：yield出来的东西，作为.next迭代出来的对象的value属性</li><li>概念：不是两个线程，是协程（具体名词还未深究）。但会发现，我们完全用了同步的写法，而底层机制仍然是异步，这是比较精髓的地方。</li><li>当我们把上面的data参数，换成error, data，结合generator.throw，进行try catch等操作，包括yield语句本身可以推出任何东西，这里面的可玩空间，就非常大了。</li><li>TJ的co库，应该也是基于上面类似的方式，并且与Promise、<a href="https://github.com/tj/node-thunkify" target="_blank" rel="noopener">thunkify</a>结合，了解run函数，也是从<a href="https://github.com/tj/node-thunkify" target="_blank" rel="noopener">thunkify</a>了解到。</li><li>理解了Generator的概念／机制／应用场景，对ES7 async／await的理解，KOA的使用，相信后续也会方便很多。</li></ol><hr><h4 id="参考来源："><a href="#参考来源：" class="headerlink" title="参考来源："></a>参考来源：</h4><ul><li><a href="https://www.zhihu.com/question/25413141/answer/30767780" target="_blank" rel="noopener">nodejs异步控制「co、async、Q 、『es6原生promise』、then.js、bluebird」有何优缺点？最爱哪个？哪个简单？</a></li><li><a href="https://zhuanlan.zhihu.com/p/20794401" target="_blank" rel="noopener">生成器（Generator）——《实战 ES2015》章节试读</a></li><li><a href="http://www.alloyteam.com/2016/02/generators-in-depth/" target="_blank" rel="noopener">【转向Javascript系列】深入理解Generators</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/04/generator.html" target="_blank" rel="noopener">Generator 函数的含义与用法</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/05/thunk.html" target="_blank" rel="noopener">Thunk 函数的含义和用法</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/05/co.html" target="_blank" rel="noopener">co 函数库的含义和用法</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/05/async.html" target="_blank" rel="noopener">async 函数的含义和用法</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天给团队做的一次关于Generator的分享，整理至此。这次分享的目的是：循序渐进地让大家对ES6的Generator有一个初步的了解、然后加深理解、再通过一个run函数知晓其应用场景，最后明晰Generator带来的意义。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://xaber.co/categories/JavaScript/"/>
    
    
      <category term="底层基础" scheme="http://xaber.co/tags/%E5%BA%95%E5%B1%82%E5%9F%BA%E7%A1%80/"/>
    
      <category term="ES6" scheme="http://xaber.co/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>杭州半日</title>
    <link href="http://xaber.co/2017/01/01/%E6%9D%AD%E5%B7%9E%E5%8D%8A%E6%97%A5/"/>
    <id>http://xaber.co/2017/01/01/杭州半日/</id>
    <published>2016-12-31T17:08:26.000Z</published>
    <updated>2018-12-26T16:38:02.816Z</updated>
    
    <content type="html"><![CDATA[<p>16年最后一天，想先记一记最后一天上班日的事。</p><a id="more"></a><p>昨天是16年上班日的最后一天，给自己请（放）了半天假，一个人单独出去走走。</p><p>早上上班，中午吃过，一点出发。手机没电，先到武林广场武林银泰七楼借了个移动电源（芝麻信用，还挺好用）。</p><p>公交到茅家埠2点40左右。</p><p>为什么突如其来想到这么短暂的出游，感觉下来，客观因素还有半天年假以为年底就到期，主观因素是2016年发生了太多事，奔跑的一年心力交瘁，计划赶不上变化，马上就要结束，想着找个安静的地方坐一坐躺一躺看一看，晒晒太阳（天气确实不错）。</p><p>至于地点，也只是蚂蜂窝上看到，宁静淡然，评价不错。</p><p>杭州这座城市，2010年9月起大学入学到现在，也呆了快6年半了。而对这座城市，却仍然陌生。</p><p>大学前四年宅在下沙大学寝室里，大一和朋友谈天说地抽烟，几乎躺遍了下沙各高校的操场。毕业工作后，始终围绕着九堡转着圈。上班、下班，两点一线。</p><p>直至15年初，交了女朋友，逛吃逛吃了不少的街，才知道杭州有龙翔桥、湖滨银泰、利星、武林广场，衣服有HM、ZARA、Gap… 女装有snidel、Basic House、Jucy Judy… 化妆品有YSL、纪梵希…</p><p>自小到大，像是另一个世界没接触过的东西，开始“闯”进我的生活。确实多亏了女朋友，感谢她，带我了解杭州这座城市，了解这里的美食、街道，从而融入杭州这座城市。</p><p>杭州不大不小，确实零散去了一些地方，但就我个人感官，杭州不止于此。我们经常认为看到的是全部，说什么从你的全世界路过，其实大部分连生活所在的城市都不了解，又何谈世界。</p><p>回到茅家埠，绕着西里湖转了大半圈。走走停停拍照坐下躺下吹吹风，冬天里风和日丽，别样的惬意，好似能忘却不少事，又想起不少事，回荡起一丝丝情绪。</p><p><img src="/images/UNADJUSTEDNONRAW_thumb_2bbd_zpsqlaqmo9e.jpg" alt=""></p><p><img src="/images/UNADJUSTEDNONRAW_thumb_2bd3_zpsufi96knn.jpg" alt=""></p><p><img src="/images/UNADJUSTEDNONRAW_thumb_2be1_zpsxwaegtcm.jpg" alt=""></p><p>枯萎的看似荷花，因而认为夏日来会是另一番滋味。虽是周五，也有些许人。后来在亭子里稍作休憩，陌生人在旁边玩着《王者荣耀》。笑看他站那玩了十几分钟，起身询问要不要一起开个黑。尽管平台不同没玩成也没关系，倒也别有一番乐趣。</p><p>4点半，准备到龙翔桥。走到马路边，吃了一惊。发现在这里的路面，和日本的道路有的一拼，干净、整洁。突然发现，对这个城市在这之前存在不少关于脏乱差的误解。<br><img src="/images/UNADJUSTEDNONRAW_thumb_2bf0_zpshcaapls3.jpg" alt=""></p><p>龙翔桥星巴克坐着，下面十字路口人头攒动，自然而然联想到涉谷那个亚洲人流最大的十字路口。<br><img src="/images/UNADJUSTEDNONRAW_thumb_2bf5_zpsnu8i4ogf.jpg" alt=""></p><p>想吃臻货，约了朋友，离他近的地方，找了一家西子国际店。诶？庆春银泰对面什么时候耸立起这样两座高楼。银座，又像是来到日本，还蛮意思。<br><a href="/images/3mT1QLg3TcaXES86CCa9aA_thumb_2bfa_zpsre9urzw4.jpg"></a></p><p>约完，回家，坐反车，上天桥，最后留个影，回家。<br><img src="/images/UNADJUSTEDNONRAW_thumb_2c04_zpsfkwyilto.jpg" alt=""><br><img src="/images/UNADJUSTEDNONRAW_thumb_2c01_zpsjqz5towy.jpg" alt=""></p><p>之前听过一个说法，人来人往，都只是在不同地方，画着或大或小的交际圈。</p><p>但实际我们会发现，人不应该停止探索的脚步，带着发现的眼睛，哪怕就这样走一走，也会看见或多或少不一样的东西。这也是从《人类简史》中对欧洲的描述所了解到的。</p><p>固步自封，停在原点，夜郎自大，管中窥豹，这些词我是希望离我个人包括周围的人远一点。</p><p>嗯，The End.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;16年最后一天，想先记一记最后一天上班日的事。&lt;/p&gt;
    
    </summary>
    
      <category term="记录系列" scheme="http://xaber.co/categories/%E8%AE%B0%E5%BD%95%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>谈谈技术核心职责是什么</title>
    <link href="http://xaber.co/2016/12/23/%E8%B0%88%E8%B0%88%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83%E8%81%8C%E8%B4%A3%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://xaber.co/2016/12/23/谈谈技术核心职责是什么/</id>
    <published>2016-12-23T03:40:16.000Z</published>
    <updated>2018-12-26T16:38:02.817Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写文了，哈。</p><p>过去三年的工作经历，回头发现，大部分时间都在拼了命地支撑运营需求，想让业务快速发展，好让自己快速提升。甚至站在了运营层面提出过各种各样的东西，但实际上这样好吗？</p><p>一直在跟着业务跑，在业务上做过不少迭代优化，也带来过一些提升。而在技术层面上，却在一两年前就到达了自己的技术瓶颈，不再明确自己核心应该考虑什么。</p><p>在业务一开始的“初创”阶段，我们没法思考太多，只能拼了命地快速迭代，还挺享受这种从无到有的快感。但当一个业务稳定下来之后，不需要再疲于奔命的时候，我们该做什么？</p><a id="more"></a><ol><li>我们说要有高大上的追求，纵观几年下来，我们积累了什么东西</li><li>我们过程中总是在遇到各种问题之后临时去解决</li><li>天天跟着业务跑，没了成长，到底什么才是你我想要的，是业务能力还是技术能力</li></ol><p>这是值得深思的点，好比为什么有的技术能产出weex、HMS，有的能提出模块化、服务化的概念，有的做了CTO，而有的转行做了产品，有的做了运营总监。当然，我觉得“而”字后面的相对来说还是较少。</p><p>昨天参与了社群运营部门leader的总结规划会，几乎听不懂。但是经常被提起的一个点是：你的部门核心价值是什么？</p><p>昨晚回去，我也在想，我们部门的核心职责是什么？支撑运营需求？协助运营、产品快速提升GMV、日活、客单价？</p><p>是的，没错，但是我们如何结合我们的技术，到底做哪些可以提升GMV、日活、客单价呢？</p><p>不知道。</p><p>术业有专攻，运营的运营能力一般会强于我们，产品的产品能力一般会强于我们，而我们的技术能力一般会强于他们。当然不排除某些运营、产品做过技术，也不排除技术可以从无到有从构想一个产品到运营策略到开发一人包办，确实谁专业谁驱动。这中间，逻辑分析能力倒是共通的。</p><p>例如：产品说，我要做一个活动，用来吸收粉丝、发券、提升GMV，但是他又不说这个活动想要达到什么值，于是你没法分析里面的价值，而开发要花15天。哎哟卧槽，这产品傻逼吧，也许你会这样想。然后你再一想，哎？好像活动形式换一下，也差不多能达到类似效果，但是开发只要花2天。</p><p>这可以理解为产品向技术的初始阶段，但是是在需求评审过程。但当我们脱离支撑需求，分析需求合理性逻辑性目的可达成性之外，我们应该考虑什么。</p><p>现在我的想法是，技术的核心应该还是提供更健全的系统和服务、完善流程，提供运营、产品、开发更高的效率，带给团队提升空间，这比一切务虚的更能带来价值。</p><p>而作为前端，除了业务支撑里的做页面、做活动、做需求，我们之前也提了不少业务优化、技术优化，但是我们还是不知道我们下个季度可以做什么。因为我们说的业务优化、技术优化，缺乏目标和方向。</p><p>思索下来，我把前端的核心职能、应做的考虑、能带来的东西汇总为：</p><h3 id="一、体验"><a href="#一、体验" class="headerlink" title="一、体验"></a>一、体验</h3><h5 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h5><p>例如：页面加载时长，页面渲染时长等</p><h5 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h5><p>例如：UI呈现，UI还原度，CSS3动效，用户交互习惯提升，更好的交互体验等</p><h3 id="二、效率"><a href="#二、效率" class="headerlink" title="二、效率"></a>二、效率</h3><h5 id="决策效率"><a href="#决策效率" class="headerlink" title="决策效率"></a>决策效率</h5><p>如何建立数据反馈、打点机制，更快、更友好地响应决策，以及发现中间的问题</p><p>例如：上线一个系统，运营、产品、技术能清晰地知晓我们做的调整触发了怎样的波动</p><p>例如：上线一个系统，看一眼系统界面，就能知道代码错误出在第几行第几列</p><h5 id="运营效率"><a href="#运营效率" class="headerlink" title="运营效率"></a>运营效率</h5><p>是否可以通过系统配置来提升公司运营（注，这里是动词不是名词）效率？可以提升多少量化数据？</p><p>例如：搭建系统可以让页面（活动页面、营销玩法、后台页面等）快速上线</p><h5 id="开发效率"><a href="#开发效率" class="headerlink" title="开发效率"></a>开发效率</h5><p>举例：</p><ol><li>前后端对接慢 —— mock系统</li><li>开发慢 —— 引入新技术，好比mvvm框架；引入模块化，提供xxx组件</li><li>打包慢 —— 依赖打包，节省发布时间</li><li>为什么这些事情天天重复在做，是否可以封装节省时间？</li><li>开放式环境经常被打扰，工作流经常被打断，每天都在聊QQ划水怎么办？ —— 涉及到项目管理，是否有什么流程机制解决？</li></ol><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><h5 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h5><ol><li>代码规范 —— jshint、eshint等</li><li>代码复杂度 —— 是否有工具</li></ol><h5 id="bug情况"><a href="#bug情况" class="headerlink" title="bug情况"></a>bug情况</h5><ol><li>原因是什么？—— 能做什么动作减少bug？</li></ol><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ol><li>如何保障更牛逼的流量进入而系统不崩？</li><li>如何做到更快的问题响应？</li><li>如何将线上风险前置，如何规避风险？</li></ol><h3 id="团队发展"><a href="#团队发展" class="headerlink" title="团队发展"></a>团队发展</h3><ol><li>如何打造更强有力的团队？</li><li>团队知识体系如稳健提升？—— 上面的动作以及分享是否ok？</li><li>如何持续不断创新？</li></ol><h3 id="业务创收"><a href="#业务创收" class="headerlink" title="业务创收"></a>业务创收</h3><p>这部分更多是运营、产品需要去考虑的。而在我们其他一些方面做的还OK的情况，或者我们有了解可以做的事情，我们也可以从业务角度达到一种创收的效果，不过这很大程度超出一个技术能力范围之外。</p><p>例如：</p><ol><li>大数据做卖广告的平台，微信推出小程序</li><li>推出了3D游戏、AR游戏，提升了xxx效果</li><li>我们在业务优化上做了什么什么，提升了xxx量，这也是我们通过我们自己达到的创收</li></ol><h3 id="公司／业界影响力"><a href="#公司／业界影响力" class="headerlink" title="公司／业界影响力"></a>公司／业界影响力</h3><p>例如，阿里推出的系列全套，seajs、weex等等等等。当然这也是解决了内部一些问题之后，所提炼开源出来的</p><p>而在KPI制定这一块，我们不能像以前一样一直跟着业务去走，甚至给自己定GMV、流量，这些大部分都不是我们能控制的。单纯的业务支撑，最终总结的时候，说我们支撑了xxx业务，达到了xxx体量，太空，没含金量，中间可能我们也没做什么努力，但是它也达成了，也就没有成就感。</p><p>在想我们要做什么的时候，我发现可以按照上面的内容展开我们的考虑，因为这些是我们技术所能提供的。KPI是我们的目标，而这个目标到底是什么，要解决的是什么问题，而我们为之能做出什么动作。S是基本不可达成的，B是基本要求，A则是凭着我们自己蹦一蹦可以达到的，那么我们的B／S怎么来设定，能通过什么数据来做量化验证，这就是我们所要面临的问题。</p><p>我们可以从上面几个维度去构想我们未来的事情，想要解决或者优化的问题，也可以和自己想学习的技术相结合，甚至说去做业务创收，但是我们要有能力想好做什么能达成我们的目标。写一个虚的东西，最终评价完全没法展开。</p><p>我们要做什么，一定要有原因。想不好要解决的问题，也就想不好自己要做什么，也就盲目。盲目是一个不好的状态。我们不应该只知道跟着业务跑，而忽略了我们自身的能力所能提供的；也不应该只知道引入新技术（Google这几年推的热气球、人工智能等等项目，想要达成创收，也占据了不少眼球，有的甚至上了科技TOP10，但是这两天从好奇心日报了解到，这些项目这一年大部分都砍掉了），而偏离了我们的目标（是盈利、社会奉献还是满足自身的探索满足）。针对我们要解决的问题，发散思考，提出能解决的方案，于是我们有了目标，有了行动策略，这样，我们也就有了方向与踏踏实实的成就感。</p><p>以上，暂时想到这么多。</p><p>搞了三年，积累了不少产品相关能力，也挺好。</p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>补充一张前端大图 —— 2017.03.10</p><p><img src="/images/C2905A76-2425-42E6-BD72-D15E9FC00D02_zpseyliwsgu.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没写文了，哈。&lt;/p&gt;
&lt;p&gt;过去三年的工作经历，回头发现，大部分时间都在拼了命地支撑运营需求，想让业务快速发展，好让自己快速提升。甚至站在了运营层面提出过各种各样的东西，但实际上这样好吗？&lt;/p&gt;
&lt;p&gt;一直在跟着业务跑，在业务上做过不少迭代优化，也带来过一些提升。而在技术层面上，却在一两年前就到达了自己的技术瓶颈，不再明确自己核心应该考虑什么。&lt;/p&gt;
&lt;p&gt;在业务一开始的“初创”阶段，我们没法思考太多，只能拼了命地快速迭代，还挺享受这种从无到有的快感。但当一个业务稳定下来之后，不需要再疲于奔命的时候，我们该做什么？&lt;/p&gt;
    
    </summary>
    
      <category term="总结系列" scheme="http://xaber.co/categories/%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="总结规划" scheme="http://xaber.co/tags/%E6%80%BB%E7%BB%93%E8%A7%84%E5%88%92/"/>
    
      <category term="核心职能" scheme="http://xaber.co/tags/%E6%A0%B8%E5%BF%83%E8%81%8C%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础系列 —— 定时器</title>
    <link href="http://xaber.co/2016/04/02/JavaScript%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97-%E2%80%94%E2%80%94-%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>http://xaber.co/2016/04/02/JavaScript基础系列-——-定时器/</id>
    <published>2016-04-02T03:36:19.000Z</published>
    <updated>2016-04-02T03:38:40.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>setTimeout、setInterval</p><a id="more"></a><h4 id="接受的参数"><a href="#接受的参数" class="headerlink" title="接受的参数"></a>接受的参数</h4><ol><li><p>function (也可用字符串但是不建议)</p></li><li><p>delay</p></li></ol><h4 id="返回值：定时器序列号——number类型"><a href="#返回值：定时器序列号——number类型" class="headerlink" title="返回值：定时器序列号——number类型"></a>返回值：定时器序列号——number类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var a = setTimeout(function () &#123;&#125;, 0);</span><br><span class="line">var b = setTimeout(function () &#123;&#125;, 30);</span><br><span class="line">var c = setInterval(function () &#123;console.log(&apos;interval func loading&apos;);&#125;, 1000);</span><br><span class="line"></span><br><span class="line">console.log(&apos;a is &apos; + a);</span><br><span class="line">console.log(&apos;b is &apos; + b);</span><br><span class="line">console.log(&apos;c is &apos; + c);</span><br><span class="line"></span><br><span class="line">console.log(typeof a, typeof b, typeof c);</span><br><span class="line"></span><br><span class="line">// 此时，如果使用number直接关闭定时器，会怎么样呢。例如：</span><br><span class="line">clearInterval(16);  // 16只是类比的一个number</span><br></pre></td></tr></table></figure><h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h4><ol><li>为什么setTimeout 明明只执行一次，为什么又要有clearTimeout的存在？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var timer = null;</span><br><span class="line">var func = function () &#123;</span><br><span class="line">    console.log(&apos;timeout func loading&apos;);</span><br><span class="line">    timer = setTimeout(func, 1000);</span><br><span class="line">&#125;;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><h4 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function () &#123;</span><br><span class="line">    alert(&apos;timeout&apos;);</span><br><span class="line">&#125;, 0);</span><br><span class="line">alert(now);</span><br></pre></td></tr></table></figure><h4 id="setTimeout-与-setInterval-的区别"><a href="#setTimeout-与-setInterval-的区别" class="headerlink" title="setTimeout 与 setInterval 的区别"></a>setTimeout 与 setInterval 的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var sleep = function (ms) &#123;</span><br><span class="line">    // do something</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// timeout</span><br><span class="line">var timer = null;</span><br><span class="line">var func = function () &#123;</span><br><span class="line">    console.log(&apos;timeout func loading&apos;);</span><br><span class="line">    timer = setTimeout(func, 20);</span><br><span class="line">&#125;;</span><br><span class="line">setTimeout(func, 20);</span><br><span class="line">sleep(100);</span><br><span class="line"></span><br><span class="line">// interval</span><br><span class="line">setInterval(function () &#123;</span><br><span class="line">    console.log(&apos;interval func loading&apos;);</span><br><span class="line">&#125;, 20);</span><br><span class="line">sleep(100);</span><br></pre></td></tr></table></figure><h4 id="可能的用法"><a href="#可能的用法" class="headerlink" title="可能的用法"></a>可能的用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 将一个函数的调用，设置为没500ms只触发一次</span><br><span class="line">var renderMinatoInfo = (function() &#123;</span><br><span class="line">    var timer = null,</span><br><span class="line">        helper = function(tips) &#123;</span><br><span class="line">            var data = [];</span><br><span class="line">            tips = tips &amp;&amp; tips.length ? tips : [];</span><br><span class="line"></span><br><span class="line">            _.each(Status, function(items, eventId) &#123;</span><br><span class="line">                if (Utils.specialFilter(eventId)) &#123;</span><br><span class="line">                    _.each(items, function(item, cartId) &#123;</span><br><span class="line">                        // 需要过滤非选中的商品</span><br><span class="line">                        if (Utils.specialFilter(cartId) &amp;&amp; item.checked !== false) &#123;</span><br><span class="line">                            data.push([Number(cartId), Models.effectiveCarts[eventId][cartId].sku_id, item.num]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            // 发送请求</span><br><span class="line">            Api.getMinatoInfo(&#123;</span><br><span class="line">                postdata: JSON.stringify(data),</span><br><span class="line">                total_fee: Status.subtotalPrice</span><br><span class="line"></span><br><span class="line">            &#125;, function(resp) &#123;</span><br><span class="line">                if (resp.tips &amp;&amp; resp.tips.length) &#123;</span><br><span class="line">                    tips = tips.concat(resp.tips);</span><br><span class="line">                &#125;</span><br><span class="line">                Views.renderActivityTips(tips);</span><br><span class="line">                </span><br><span class="line">            &#125;, function () &#123;</span><br><span class="line">                Views.renderActivityTips(tips);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    return function(tips) &#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(function() &#123;</span><br><span class="line">            helper(tips);</span><br><span class="line">        &#125;, 500);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h4&gt;&lt;p&gt;setTimeout、setInterval&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://xaber.co/categories/JavaScript/"/>
    
    
      <category term="底层基础" scheme="http://xaber.co/tags/%E5%BA%95%E5%B1%82%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础系列 —— hook</title>
    <link href="http://xaber.co/2016/03/08/JavaScript%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97-%E2%80%94%E2%80%94-hook/"/>
    <id>http://xaber.co/2016/03/08/JavaScript基础系列-——-hook/</id>
    <published>2016-03-08T02:18:33.000Z</published>
    <updated>2017-02-07T03:10:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>背景：彼时刚毕业没多久，后端遇到一个问题，一个按钮在很多的时间内被双击了，导致可能创建了两笔相同的订单，或者创建了两笔相同的售后。于是有了这样一个需求——如何防止手残党双击，并且是在那么多页面的情况下。思路是：给这些按钮赋予一个类名，最后重新设置这些按钮上绑定的事件函数，在中间插入一些内容（点击后0.5s内不响应操作，代码见下方 <strong>防双击通用函数</strong> ）。</p><p>当时想的好牛逼。连大后端都说，卧槽，牛逼啊，hook啊。于是才知道了hook（钩子）一词。于是才明白，什么算法不算法，也只是名字而已。其实日常中不经意间可能就用了对应的一些概念。顿时，自豪感爆棚。ヽ(•̀ω•́ )ゝ</p><a id="more"></a><h3 id="简单范例"><a href="#简单范例" class="headerlink" title="简单范例"></a>简单范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var _alert = alert;</span><br><span class="line">window.alert = function(s) &#123;</span><br><span class="line">    console.log(&quot;Hooked!&quot;);</span><br><span class="line">    _alert(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="业务示例"><a href="#业务示例" class="headerlink" title="业务示例"></a>业务示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lib.api</span><br><span class="line">lib.api 中 匹配 follow 默认打点</span><br></pre></td></tr></table></figure><h3 id="重写-appendChild-反劫持"><a href="#重写-appendChild-反劫持" class="headerlink" title="重写 appendChild 反劫持"></a>重写 appendChild 反劫持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var fuck61160200156 = function () &#123;</span><br><span class="line">    var db = document.body,</span><br><span class="line">        whiteList = [&apos;zhemi.com&apos;, &apos;bbeeii.com&apos;], // 自己网站的脚本服务器列表</span><br><span class="line">        reg = new RegExp(whiteList.join(&apos;|&apos;), &apos;gi&apos;); // 其实也只是匹配src 所以只需要符合这里的正则就好了</span><br><span class="line"></span><br><span class="line">    if (db &amp;&amp; db.appendChild) &#123;</span><br><span class="line">        // 保存原始引用</span><br><span class="line">        db._appendChild = db.appendChild;</span><br><span class="line">        // 仅仅覆盖document.body 防止频繁操作和误操作</span><br><span class="line">        // 仅仅针对上述场景</span><br><span class="line">        db.appendChild = function (dom) &#123;</span><br><span class="line">            var domReady = false,</span><br><span class="line">                tagName = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">            if (dom &amp;&amp; dom.nodeType &amp;&amp; dom.nodeType === 1) &#123;</span><br><span class="line">                domReady = document.readyState === &apos;complete&apos; ||</span><br><span class="line">                        (document &amp;&amp; document.getElementById &amp;&amp; document.getElementsByTagName); // from Pro JavaScript Techniques  不太准确</span><br><span class="line">                if (!window.$ || !domReady || !(window.$ &amp;&amp; window.$.isReady)) &#123; // 确定domReady之后执行</span><br><span class="line">                    if ((dom.nodeName || dom.tagName).toUpperCase() === &apos;SCRIPT&apos;) &#123; // script 标签</span><br><span class="line">                        if (dom.src &amp;&amp; dom.src.search(reg) !== -1) &#123; // 自己的域名</span><br><span class="line">                            document.write(&apos;\&lt;script src=\&quot;&apos; + dom.src + &apos;\&quot; type=\&quot;text\/javascript\&quot; id=\&quot;bdstat\&quot;\&gt;\&lt;\/script\&gt;&apos;); // 用于欺骗运营商广告中的bdstat判断 以及是否生效的测试考虑</span><br><span class="line">                            return dom; // 该返回的返回</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // return this._appendChild.call(this, dom); IE 6 7 8 这样的形式不可用会报错</span><br><span class="line">            return db._appendChild(dom); // 原始调用</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="防双击通用函数"><a href="#防双击通用函数" class="headerlink" title="防双击通用函数"></a>防双击通用函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">var avoidDblTrigger = function (selector, eventType, waiting, waitingFunc) &#123;</span><br><span class="line">    var $dom = null,</span><br><span class="line">        oriBinds = [],// 原来绑定的所有事件函数的散列表</span><br><span class="line">        temp;</span><br><span class="line"></span><br><span class="line">    if ( !selector || !($dom = $(selector)).length ) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    eventType = eventType || &apos;click&apos;;</span><br><span class="line">    waiting = waiting || 500;</span><br><span class="line">    waitingFunc = $.isFunction(waitingFunc) ? waitingFunc : function () &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    // 有绑定过相应事件</span><br><span class="line">    if ( (temp = $._data($dom[0]).events) &amp;&amp;</span><br><span class="line">            (temp = temp[eventType]) ) &#123;</span><br><span class="line"></span><br><span class="line">        // 获得 绑定事件的函数数组</span><br><span class="line">        // 不可在循环中使用off  因off中会将 $._data($dom[0]).events[eventType] 中的事件绑定函数移除</span><br><span class="line">        // 也就类似 循环的过程中改变循环的数组</span><br><span class="line">        $.each( temp, function (key, handle) &#123;</span><br><span class="line">            if (handle.handler) &#123;</span><br><span class="line">                oriBinds.push(handle.handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // 解除绑定</span><br><span class="line">        $.each(oriBinds, function (key, handler) &#123;</span><br><span class="line">            $dom.off(eventType, handler);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $dom.each(function () &#123;</span><br><span class="line"></span><br><span class="line">            var thisDom = this;</span><br><span class="line"></span><br><span class="line">            thisDom.isDblTrigger = false;</span><br><span class="line">            $(thisDom).on(eventType, function () &#123;</span><br><span class="line">                var args = arguments,</span><br><span class="line">                    // 初始返回值即为undefined</span><br><span class="line">                    result;</span><br><span class="line"></span><br><span class="line">                // 在延时时间内再次触发 只针对单个的DOM</span><br><span class="line">                // 不对不是连续两次触发过的其他元素影响</span><br><span class="line">                if (thisDom.isDblTrigger) &#123;</span><br><span class="line">                    waitingFunc.apply(thisDom, args);</span><br><span class="line"></span><br><span class="line">                    // 顺便禁掉默认事件</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                thisDom.isDblTrigger = true;</span><br><span class="line">                // 设置定时</span><br><span class="line">                setTimeout(function () &#123;</span><br><span class="line">                    thisDom.isDblTrigger = false;</span><br><span class="line">                &#125;, waiting);</span><br><span class="line"></span><br><span class="line">                $.each(oriBinds, function (key, handler) &#123;</span><br><span class="line"></span><br><span class="line">                    // 原来绑定的所有事件函数 调用</span><br><span class="line">                    result = handler.apply(thisDom, args);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                return result;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背景：彼时刚毕业没多久，后端遇到一个问题，一个按钮在很多的时间内被双击了，导致可能创建了两笔相同的订单，或者创建了两笔相同的售后。于是有了这样一个需求——如何防止手残党双击，并且是在那么多页面的情况下。思路是：给这些按钮赋予一个类名，最后重新设置这些按钮上绑定的事件函数，在中间插入一些内容（点击后0.5s内不响应操作，代码见下方 &lt;strong&gt;防双击通用函数&lt;/strong&gt; ）。&lt;/p&gt;
&lt;p&gt;当时想的好牛逼。连大后端都说，卧槽，牛逼啊，hook啊。于是才知道了hook（钩子）一词。于是才明白，什么算法不算法，也只是名字而已。其实日常中不经意间可能就用了对应的一些概念。顿时，自豪感爆棚。ヽ(•̀ω•́ )ゝ&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://xaber.co/categories/JavaScript/"/>
    
    
      <category term="底层基础" scheme="http://xaber.co/tags/%E5%BA%95%E5%B1%82%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础系列 —— 链式调用</title>
    <link href="http://xaber.co/2016/03/08/JavaScript%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97-%E2%80%94%E2%80%94-%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/"/>
    <id>http://xaber.co/2016/03/08/JavaScript基础系列-——-链式调用/</id>
    <published>2016-03-08T02:14:55.000Z</published>
    <updated>2016-03-08T02:37:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>遥记得，当年还没出山之前，最最开始的面试，人家问我：你觉得jQuery最好用、最厉害的地方是什么？</p><p>我说：链式调用</p><p>233333，当然现在觉得这个回答很搞笑。但是就当时而言，认为链式调用是多么神奇的一件事情。直到看了《JavaScript语言精粹》，才发现是这么的简单。</p><a id="more"></a><h4 id="基础链式调用"><a href="#基础链式调用" class="headerlink" title="基础链式调用"></a>基础链式调用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[3, 2, 1].map(function (v) &#123;</span><br><span class="line">    return v * 2;</span><br><span class="line">&#125;).reverse()</span><br><span class="line">.reduce(function (pre, cur, curIndex, arr) &#123;</span><br><span class="line">    console.log(pre, cur, curIndex, arr);</span><br><span class="line">    return pre + cur;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&apos;dfgkig&apos;.split(&apos;&apos;).sort().join(&apos;&apos;);</span><br></pre></td></tr></table></figure><h4 id="jquery-链式调用"><a href="#jquery-链式调用" class="headerlink" title="jquery 链式调用"></a>jquery 链式调用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var random = function (num) &#123;</span><br><span class="line">    return Math.random() * num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$.fn.test = function () &#123;</span><br><span class="line">    return this.each(function (index, value) &#123;</span><br><span class="line">        console.log(&apos;in each&apos;);</span><br><span class="line">        if (index &gt; 2) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        $(this)</span><br><span class="line">            .css(&#123;</span><br><span class="line">                position: &apos;absolute&apos;,</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 100,</span><br><span class="line">                left: random(500),</span><br><span class="line">                right: random(500)</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 例子</span><br><span class="line">$(&apos;img&apos;).test().css(&apos;background&apos;, &apos;red&apos;).animate(&#123;</span><br><span class="line">    opacity: 0</span><br><span class="line">&#125;, 5000);</span><br></pre></td></tr></table></figure><h4 id="underscore-链式调用"><a href="#underscore-链式调用" class="headerlink" title="underscore 链式调用"></a>underscore 链式调用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">var _ = function(obj) &#123;</span><br><span class="line">    if (obj instanceof _) return obj;</span><br><span class="line">    if (!(this instanceof _)) return new _(obj);</span><br><span class="line">    // 把obj挂载到了 underscore 实例的 _wrapped 属性上</span><br><span class="line">    this._wrapped = obj;</span><br><span class="line">&#125;;</span><br><span class="line">_.chain = function(obj) &#123;</span><br><span class="line">    var instance = _(obj);</span><br><span class="line">    instance._chain = true;</span><br><span class="line">    return instance;</span><br><span class="line">&#125;;</span><br><span class="line">var result = function(instance, obj) &#123;</span><br><span class="line">    return instance._chain ? _(obj).chain() : obj;</span><br><span class="line">&#125;;</span><br><span class="line">_.mixin = function(obj) &#123;</span><br><span class="line">    _.each(_.functions(obj), function(name) &#123;</span><br><span class="line">        var func = _[name] = obj[name];</span><br><span class="line">        // 给 _ 的原型上，放置了 静态方法同名的方法</span><br><span class="line">        _.prototype[name] = function() &#123;</span><br><span class="line">            // 拿到原来的obj对象</span><br><span class="line">            var args = [this._wrapped];</span><br><span class="line">            push.apply(args, arguments);</span><br><span class="line">            return result(this, func.apply(_, args));</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">_.mixin(_);</span><br><span class="line"></span><br><span class="line">// 例子</span><br><span class="line">var stooges = [&#123;name: &apos;curly&apos;, age: 25&#125;, &#123;name: &apos;moe&apos;, age: 21&#125;, &#123;name: &apos;larry&apos;, age: 23&#125;];</span><br><span class="line">var youngest = _.chain(stooges)</span><br><span class="line">  .sortBy(function(stooge)&#123; return stooge.age; &#125;)</span><br><span class="line">  .map(function(stooge)&#123; return stooge.name + &apos; is &apos; + stooge.age; &#125;)</span><br><span class="line">  .first()</span><br><span class="line">  .value();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遥记得，当年还没出山之前，最最开始的面试，人家问我：你觉得jQuery最好用、最厉害的地方是什么？&lt;/p&gt;
&lt;p&gt;我说：链式调用&lt;/p&gt;
&lt;p&gt;233333，当然现在觉得这个回答很搞笑。但是就当时而言，认为链式调用是多么神奇的一件事情。直到看了《JavaScript语言精粹》，才发现是这么的简单。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://xaber.co/categories/JavaScript/"/>
    
    
      <category term="底层基础" scheme="http://xaber.co/tags/%E5%BA%95%E5%B1%82%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>前端技能树面试法——面试官角度</title>
    <link href="http://xaber.co/2016/02/29/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%83%BD%E6%A0%91%E9%9D%A2%E8%AF%95%E6%B3%95%E2%80%94%E2%80%94%E9%9D%A2%E8%AF%95%E5%AE%98%E8%A7%92%E5%BA%A6/"/>
    <id>http://xaber.co/2016/02/29/前端技能树面试法——面试官角度/</id>
    <published>2016-02-29T10:21:06.000Z</published>
    <updated>2016-03-01T09:06:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>挖到底，定PM级。</p><p>随时间，不定期更新。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">HTML基础</span><br><span class="line">    语义化</span><br><span class="line">        ul和ol的区别</span><br><span class="line">    可访问性</span><br><span class="line">    HTML5标签</span><br><span class="line"></span><br><span class="line">CSS基础</span><br><span class="line">    CSS reset</span><br><span class="line">    盒模型</span><br><span class="line">    浮动</span><br><span class="line">    定位</span><br><span class="line">    CSS3特性</span><br><span class="line"></span><br><span class="line">JavaScript基础</span><br><span class="line">    基础值与引用值</span><br><span class="line">    原型</span><br><span class="line">    闭包</span><br><span class="line">    作用域链</span><br><span class="line">    this</span><br><span class="line"></span><br><span class="line">规范</span><br><span class="line">    可维护的代码</span><br><span class="line"></span><br><span class="line">性能</span><br><span class="line">    减少HTTP请求</span><br><span class="line">        请求合并</span><br><span class="line">            接口请求合并</span><br><span class="line">            资源合并</span><br><span class="line">                雪碧图</span><br><span class="line">    减小请求大小</span><br><span class="line">        资源压缩</span><br><span class="line">            图片</span><br><span class="line">                压缩</span><br><span class="line">                开启webp</span><br><span class="line">            代码压缩</span><br><span class="line">            gzip压缩</span><br><span class="line">    代码性能</span><br><span class="line">    性能测试</span><br><span class="line"></span><br><span class="line">移动端开发</span><br><span class="line">    跨终端的方式与利弊</span><br><span class="line">    Hybrid APP</span><br><span class="line">    更高的性能优化策略</span><br><span class="line"></span><br><span class="line">兼容性</span><br><span class="line">    PC</span><br><span class="line">        IE</span><br><span class="line">    H5</span><br><span class="line">        不同机型</span><br><span class="line"></span><br><span class="line">工作技能</span><br><span class="line">    图片格式</span><br><span class="line">        png24、png8、jpg、webp</span><br><span class="line">    跨域</span><br><span class="line">        jsonp</span><br><span class="line">            why</span><br><span class="line">        图像ping</span><br><span class="line">            what</span><br><span class="line">        iframe跨子域</span><br><span class="line">            how</span><br><span class="line">        Access-Control-Allow-Origin</span><br><span class="line">            where</span><br><span class="line">    请求代理工具</span><br><span class="line">        fiddler、charles</span><br><span class="line">    代码管理工具</span><br><span class="line">        git、svn</span><br><span class="line"></span><br><span class="line">代码</span><br><span class="line">    代码简化</span><br><span class="line">        重复即不合理</span><br><span class="line">    封装</span><br><span class="line">    模块化</span><br><span class="line">    组件化</span><br><span class="line">    MVC</span><br><span class="line">    面向对象</span><br><span class="line">    函数式编程</span><br><span class="line">    设计模式</span><br><span class="line">    编程模式</span><br><span class="line"></span><br><span class="line">库与框架</span><br><span class="line">    jQuery / Zepto</span><br><span class="line">    underscore</span><br><span class="line">    vue</span><br><span class="line">    react</span><br><span class="line">    react-native</span><br><span class="line">    angularJS</span><br><span class="line">    其他</span><br><span class="line"></span><br><span class="line">工程化构建工具</span><br><span class="line">    gulp ／ grunt ／ npm script</span><br><span class="line">    browserify</span><br><span class="line">    webpack</span><br><span class="line">    postcss</span><br><span class="line">    bower</span><br><span class="line"></span><br><span class="line">高科技</span><br><span class="line">    NODE.js</span><br><span class="line">    ES6</span><br><span class="line">    typescript</span><br><span class="line"></span><br><span class="line">工作附属附加技能</span><br><span class="line">    HTTP</span><br><span class="line">    linux</span><br><span class="line">    后端语言：PHP、Java、python</span><br><span class="line">    数据库：mysql、mongodb</span><br><span class="line">    防劫持</span><br><span class="line"></span><br><span class="line">软技能</span><br><span class="line">    热情</span><br><span class="line">    个人素养与追求</span><br><span class="line">        S situation 在什么场景</span><br><span class="line">        T task 要做什么</span><br><span class="line">        A action 做了什么</span><br><span class="line">        R result 对应的结果是什么</span><br><span class="line">    交互设计</span><br><span class="line">    知识管理</span><br><span class="line">        如何管理</span><br><span class="line">    团队协作</span><br><span class="line">        沟通技巧</span><br><span class="line">        前后端如何更好的协作</span><br><span class="line">    团队管理</span><br><span class="line">    团队建设</span><br><span class="line">        人员配置</span><br><span class="line">        人员培养</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;挖到底，定PM级。&lt;/p&gt;
&lt;p&gt;随时间，不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="总结系列" scheme="http://xaber.co/categories/%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript基础系列 —— this call apply</title>
    <link href="http://xaber.co/2016/02/15/JavaScript%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97-%E2%80%94%E2%80%94-this-call-apply/"/>
    <id>http://xaber.co/2016/02/15/JavaScript基础系列-——-this-call-apply/</id>
    <published>2016-02-15T07:17:27.000Z</published>
    <updated>2016-02-15T07:32:56.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">var name = &apos;aaa&apos;;</span><br><span class="line">var yo = function () &#123;</span><br><span class="line">    // console.log(this);</span><br><span class="line">    console.log(this.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var x = &#123;</span><br><span class="line">    name: &apos;ddd&apos;,</span><br><span class="line">    yo: yo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 题目一</span><br><span class="line">yo();</span><br><span class="line"></span><br><span class="line">// 题目二</span><br><span class="line">x.yo();</span><br><span class="line"></span><br><span class="line">// 题目三</span><br><span class="line">(function () &#123;</span><br><span class="line">    yo();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">// 题目四</span><br><span class="line">(function () &#123;</span><br><span class="line">    var name = &apos;eee&apos;;</span><br><span class="line">    yo();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">// 题目五</span><br><span class="line">x.yo.call(window);</span><br></pre></td></tr></table></figure><h3 id="call-和-apply"><a href="#call-和-apply" class="headerlink" title="call 和 apply"></a>call 和 apply</h3><ol><li>有什么区别</li><li>Math.max.apply(Math, [1, 2, 3, 4, 5, 6]) 值</li><li>[1, 2, 3].map(parseInt) 值（坑题，和this 关系不大）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot; class=&quot;headerlink&quot; title=&quot;this&quot;&gt;&lt;/a&gt;this&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://xaber.co/categories/JavaScript/"/>
    
    
      <category term="底层基础" scheme="http://xaber.co/tags/%E5%BA%95%E5%B1%82%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础系列 —— 基本值引用值、作用域作用域链与闭包</title>
    <link href="http://xaber.co/2016/02/06/JavaScript%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97-%E2%80%94%E2%80%94-%E5%9F%BA%E6%9C%AC%E5%80%BC%E5%BC%95%E7%94%A8%E5%80%BC%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%B8%8E%E9%97%AD%E5%8C%85/"/>
    <id>http://xaber.co/2016/02/06/JavaScript基础系列-——-基本值引用值、作用域作用域链与闭包/</id>
    <published>2016-02-05T20:33:44.000Z</published>
    <updated>2016-02-05T20:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这位选手请仔细听题，并准备好你的秒表。</strong></p><p>一到三题，你有60s作答时间；四到八题你有150s作答时间；九到十题你有90s作答时间。<br>总计 5分钟，Ready? Go!</p><a id="more"></a><h3 id="一到三题，理解基本值与引用值"><a href="#一到三题，理解基本值与引用值" class="headerlink" title="一到三题，理解基本值与引用值"></a>一到三题，理解基本值与引用值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 题目一</span><br><span class="line">var a = 1;</span><br><span class="line">a = 2;</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 题目二</span><br><span class="line">var a = &#123;</span><br><span class="line">    num: 1</span><br><span class="line">&#125;;</span><br><span class="line">var b = a;</span><br><span class="line">b = &#123;</span><br><span class="line">    num: 2</span><br><span class="line">&#125;;</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 题目三</span><br><span class="line">var a = &#123;</span><br><span class="line">    num: 1</span><br><span class="line">&#125;;</span><br><span class="line">var c = a;</span><br><span class="line">c.num = 3;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><h3 id="四到九题，理解作用域与作用域链"><a href="#四到九题，理解作用域与作用域链" class="headerlink" title="四到九题，理解作用域与作用域链"></a>四到九题，理解作用域与作用域链</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// 题目四</span><br><span class="line">var a = 1;</span><br><span class="line">(function () &#123;</span><br><span class="line">    var a = 2;</span><br><span class="line">&#125;)();</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 题目五</span><br><span class="line">var a = 1;</span><br><span class="line">(function () &#123;</span><br><span class="line">    a = 2;</span><br><span class="line">&#125;)();</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 题目六</span><br><span class="line">var a = 1;</span><br><span class="line">(function (a) &#123;</span><br><span class="line">    a = 2;</span><br><span class="line">&#125;)(a);</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 题目七</span><br><span class="line">var a = &#123;</span><br><span class="line">    num: 1</span><br><span class="line">&#125;;</span><br><span class="line">(function (a) &#123;</span><br><span class="line">    a.num = 2;</span><br><span class="line">&#125;)(a);</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 题目八</span><br><span class="line">var a = &#123;</span><br><span class="line">    num: 1</span><br><span class="line">&#125;;</span><br><span class="line">(function (a) &#123;</span><br><span class="line">    a = &#123;</span><br><span class="line">        num: 3</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(a);</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><h3 id="九到十题，理解闭包"><a href="#九到十题，理解闭包" class="headerlink" title="九到十题，理解闭包"></a>九到十题，理解闭包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">var b = (function () &#123;</span><br><span class="line">    var c = 1;</span><br><span class="line">    return function (x) &#123;</span><br><span class="line">        return (c = c + x);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 题目九</span><br><span class="line">console.log(b(a));</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 题目十</span><br><span class="line">console.log(b(a));</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;这位选手请仔细听题，并准备好你的秒表。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一到三题，你有60s作答时间；四到八题你有150s作答时间；九到十题你有90s作答时间。&lt;br&gt;总计 5分钟，Ready? Go!&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://xaber.co/categories/JavaScript/"/>
    
    
      <category term="底层基础" scheme="http://xaber.co/tags/%E5%BA%95%E5%B1%82%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
