<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xaber&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/531e6f83eb99753d1524c9fd45e94f22</icon>
  <subtitle>函数式编程，异步式做事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xaber.co/"/>
  <updated>2019-09-09T14:08:30.684Z</updated>
  <id>http://xaber.co/</id>
  
  <author>
    <name>Xaber</name>
    <email>xaber.twt@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>babel 7 插件开发相关</title>
    <link href="http://xaber.co/2019/09/09/babel-7-%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    <id>http://xaber.co/2019/09/09/babel-7-插件开发相关/</id>
    <published>2019-09-09T13:21:40.000Z</published>
    <updated>2019-09-09T14:08:30.684Z</updated>
    
    <content type="html"><![CDATA[<p>此文前，需要先阅读</p><ol><li><a href="http://xaber.co/2019/09/04/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91-AST-%E4%B8%8E-%E7%BC%96%E8%AF%91%E5%99%A8-Compiler/">抽象语法树 AST 与 编译器 Compiler</a></li><li><a href="http://xaber.co/2019/09/07/babel-7-%E5%85%A8%E5%A5%97/">babel 7 全套</a></li><li><a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-introduction" target="_blank" rel="noopener">Babel 6 插件手册</a> （PS：尽管大部分 API 已过时，但是大概的理念仍然适用）</li></ol><a id="more"></a><p>概念</p><ul><li>树形遍历</li><li>Visitors（访问者）</li><li>Paths（路径）</li><li>State（状态）</li><li>Scopes（作用域）</li><li>Bindings（绑定） —— 或者叫变量引用？</li><li>转换操作（插件 / transform / 节点操作） —— 类似 jQuery</li></ul><p>PS：<em>如果不开发插件，其实看插件相关内容意义不大</em>，但对于理解 babel 整套流程，还是有一定帮助。</p><h2 id="babel-helper-xxxx-xxxx"><a href="#babel-helper-xxxx-xxxx" class="headerlink" title="@babel/helper-xxxx-xxxx"></a>@babel/helper-xxxx-xxxx</h2><p>各种各样的辅助函数、方法 / 功能。例如：</p><ol><li><a href="https://github.com/babel/babel/blob/master/packages/babel-helper-plugin-utils/src/index.js" target="_blank" rel="noopener">@babel/helper-plugin-utils index.js</a> 辅助插件开发，但只是做了一层 wrapper</li><li><a href="https://github.com/babel/babel/blob/master/packages/babel-helper-builder-react-jsx/src/index.js" target="_blank" rel="noopener">@babel/helper-builder-react-jsx index.js</a> 用于 <a href="https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-react-inline-elements/src/index.js" target="_blank" rel="noopener">@babel/plugin-transform-react-inline-elements index.js</a>、<a href="https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-react-jsx-compat/src/index.js" target="_blank" rel="noopener">@babel/plugin-transform-react-jsx-compat index.js</a> 转换插件</li><li>等等 …</li></ol><h2 id="babel-plugin-xxxx-xxxx"><a href="#babel-plugin-xxxx-xxxx" class="headerlink" title="@babel/plugin-xxxx-xxxx"></a>@babel/plugin-xxxx-xxxx</h2><p>为什么会有 <code>plugin-syntax-xxxx-xxxx</code> 和 <code>plugin-transform-xxxx-xxxx</code> 插件？ —— <a href="https://stackoverflow.com/questions/34898418/transform-plugin-vs-syntax-plugin-in-babel" target="_blank" rel="noopener">Transform plugin vs Syntax plugin in Babel</a></p><p>即 <code>plugin-syntax-xxxx-xxxx</code> 是 <code>plugin-transform-xxxx-xxxx</code> 的前提，或者说，就是用来给 <code>plugin-transform-xxxx-xxxx</code>、<code>plugin-proposal-xxxx-xxxx</code> 继承用的。</p><p>需要有 <code>plugin-syntax-xxxx-xxxx</code>，设定语法解析的方式，对应的语法，才能被 <code>@babel/parser</code> 正确地处理，类似的： 如果不设定解析 generator 函数，<code>function*(x) { }</code> 肯定是报错的</p><p>再例如：</p><ol><li><a href="https://github.com/babel/babel/blob/master/packages/babel-plugin-proposal-function-bind/src/index.js" target="_blank" rel="noopener">@babel/plugin-proposal-function-bind index.js</a> 作为转换插件，其继承了</li><li><a href="https://github.com/babel/babel/blob/master/packages/babel-plugin-syntax-function-bind/src/index.js" target="_blank" rel="noopener">@babel/plugin-syntax-function-bind index.js</a>，而 <a href="https://github.com/babel/babel/blob/master/packages/babel-plugin-syntax-function-bind/src/index.js" target="_blank" rel="noopener">@babel/plugin-syntax-function-bind index.js</a> 内部，通过 <code>parserOpts.plugins.push(&quot;functionBind&quot;);</code> 设定了 <code>functionBind</code> 的解析</li><li>parser 阶段，根据 <code>functionBind</code> 的设定，进行不同的 <a href="https://github.com/babel/babel/blob/4da7a01aa9d9e444b770a7249ad76b41eed7d450/packages/babel-parser/src/tokenizer/index.js#L689" target="_blank" rel="noopener">词法分析（tokenizer/index.js）</a> （其他插件可能也会有不同的语法分析），最终生成 AST</li><li><code>@babel/plugin-proposal-function-bind</code> 对 AST 进行转换</li></ol><p>所以，如果我们想编写 babel 插件来将 <code>@@@hello</code> 转换为 <code>world.hello</code> 是做不到的，因为 <code>@@@hello</code> 在 babel 的 parser 上不支持。其内置的，可以进行配置的额外插件见：<a href="https://github.com/babel/babel/blob/da0af5fd99a9b747370a2240df3abf2940b9649c/packages/babel-parser/typings/babel-parser.d.ts#L97" target="_blank" rel="noopener">@babel/parser/typings/babel-parser.d.ts</a></p><p>而如果我们想编写一些插件，又依赖一些语法（可能该新语法未启用），需要进行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">manipulateOptions(opts, parserOpts) &#123;</span><br><span class="line">  <span class="comment">// 类似的 parser 插件处理</span></span><br><span class="line">  parserOpts.plugins.push(<span class="string">"functionBind"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babel-plugin-proposal-xxxx-xxxx"><a href="#babel-plugin-proposal-xxxx-xxxx" class="headerlink" title="@babel/plugin-proposal-xxxx-xxxx"></a>@babel/plugin-proposal-xxxx-xxxx</h3><p>同 <code>@babel/plugin-transform-xxxx-xxxxx</code>，只是一些未确定落地的草案 AST transform 实现。</p><h2 id="babel-types"><a href="#babel-types" class="headerlink" title="@babel/types"></a>@babel/types</h2><p>包含功能</p><ul><li><a href="https://github.com/babel/babel/tree/master/packages/babel-types/src/definitions" target="_blank" rel="noopener">definitions</a> —— 定义 （包括一些节点名的别名）</li><li><a href="https://github.com/babel/babel/tree/master/packages/babel-types/src/builders" target="_blank" rel="noopener">builders</a> —— 节点生成工具</li><li><a href="https://github.com/babel/babel/tree/master/packages/babel-types/src/validators" target="_blank" rel="noopener">validators</a> —— 节点判断工具</li><li><a href="https://github.com/babel/babel/tree/master/packages/babel-types/src/asserts" target="_blank" rel="noopener">asserts</a> —— 节点断言工具，就是 validators 的包装，如果判断不通过，会报错</li><li>converters</li><li>modifications</li><li>…</li></ul><p>用于生成 AST、AST 节点类型检查等等，类似 <code>lodash</code> 的工具库</p><p>详细内容见：<a href="https://babeljs.io/docs/en/next/babel-types.html" target="_blank" rel="noopener">@babel/types docs</a></p><h2 id="babel-template"><a href="#babel-template" class="headerlink" title="@babel/template"></a>@babel/template</h2><p>在编写 babel 插件时，如果涉及到大规模代码变动 / 转换，如果只使用 <code>@babel/types</code>，大概率会累死</p><p>此工具使用 <code>@babel/parser</code> 将字符串处理成 AST，并替换掉占位符内容</p><p>例如：<a href="https://github.com/babel/babel/blob/eac4c5bc17133c2857f2c94c1a6a8643e3b547a7/packages/babel-helper-function-name/src/index.js#L2" target="_blank" rel="noopener">@babel/helper-function-name</a></p><h2 id="开发个最简单的插件"><a href="#开发个最简单的插件" class="headerlink" title="开发个最简单的插件"></a>开发个最简单的插件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pluginUtils = <span class="built_in">require</span>(<span class="string">'@babel/helper-plugin-utils'</span>)</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'@babel/core'</span>)</span><br><span class="line"><span class="keyword">const</span> t = babel.types</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pluginDemo = pluginUtils.declare(<span class="function"><span class="params">api</span> =&gt;</span> &#123;</span><br><span class="line">  api.assertVersion(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: <span class="string">"plugin-demo"</span>,</span><br><span class="line">    visitor: &#123;</span><br><span class="line">      BinaryExpression(path) &#123;</span><br><span class="line">        <span class="keyword">if</span> (path.node.operator !== <span class="string">"==="</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path.node.left = t.identifier(<span class="string">"sebmck"</span>);</span><br><span class="line">        path.node.right = t.identifier(<span class="string">"dork"</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// config</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">api</span>) </span>&#123;</span><br><span class="line">  api.cache(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> presets = [</span><br><span class="line">    [<span class="string">'@babel/env'</span>, &#123;</span><br><span class="line">      useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">      corejs: <span class="number">3</span>,</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    presets,</span><br><span class="line">    plugins: [</span><br><span class="line">      [<span class="string">'@babel/transform-runtime'</span>, &#123;</span><br><span class="line">        corejs: <span class="number">3</span>,</span><br><span class="line">      &#125;],</span><br><span class="line">      pluginDemo,</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="https://github.com/babel-utils/babel-plugin-tester" target="_blank" rel="noopener">babel-plugin-tester</a> —— 插件测试工具</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文前，需要先阅读&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://xaber.co/2019/09/04/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91-AST-%E4%B8%8E-%E7%BC%96%E8%AF%91%E5%99%A8-Compiler/&quot;&gt;抽象语法树 AST 与 编译器 Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://xaber.co/2019/09/07/babel-7-%E5%85%A8%E5%A5%97/&quot;&gt;babel 7 全套&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-introduction&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Babel 6 插件手册&lt;/a&gt; （PS：尽管大部分 API 已过时，但是大概的理念仍然适用）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="总结系列" scheme="http://xaber.co/categories/%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="能力" scheme="http://xaber.co/tags/%E8%83%BD%E5%8A%9B/"/>
    
      <category term="babel" scheme="http://xaber.co/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>babel 7 全套</title>
    <link href="http://xaber.co/2019/09/07/babel-7-%E5%85%A8%E5%A5%97/"/>
    <id>http://xaber.co/2019/09/07/babel-7-全套/</id>
    <published>2019-09-07T05:24:25.000Z</published>
    <updated>2019-09-09T14:08:25.287Z</updated>
    
    <content type="html"><![CDATA[<p>babel 官方在 2018-08-27 发布了文章，babel 7 正式发布，距离 babel 6 相隔3年。</p><p>包含内容（官网cp）：</p><ol><li>upgrade tool</li><li>JavaScript 配置文件 <code>babel.config.js</code></li><li>选择性的配置 <code>overrides</code></li><li>TC39 提案 支持 <a href="https://github.com/babel/proposals/" target="_blank" rel="noopener">@babel/proposals</a></li><li>jsx、typescript、flow 的支持</li><li>Babel 辅助函数的变化</li><li>自动 Polyfill (试验) <code>useBuiltins</code></li></ol><p>详细内容可见：<a href="https://babel.docschina.org/blog/2018/08/27/7.0.0" target="_blank" rel="noopener">Babel 7 发布</a></p><p>此篇文章主要介绍 babel 7 相关 <code>presets</code>、<code>plugins</code>、<code>@babel 下其他所有的 packages</code>、babel 其他工具、以及 babel 插件相关，即 babel 全套（包含部分流程上的源码链接）</p><p>至于 AST 抽象语法树相关可见另一文 <strong><a href="http://xaber.co/2019/09/04/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91-AST-%E4%B8%8E-%E7%BC%96%E8%AF%91%E5%99%A8-Compiler/">抽象语法树-AST-与-编译器-Compiler</a></strong> 内容。</p><a id="more"></a><h2 id="transform-or-polyfill"><a href="#transform-or-polyfill" class="headerlink" title="transform or polyfill"></a>transform or polyfill</h2><p>ES 相关功能可分为：</p><ol><li>新的写法、运算符、async/await、const、let、class 等老浏览器无法识别的一类</li><li>Object.assign 等可通过 现有 JavaScript 代码封装实现（例如 core-js / polyfill）的语法糖</li></ol><p>要注意的是，babel 作为转换工具，@babel/core, 大部分（也可以理解为全部） babel plugins 只会作用于第1类。</p><p>像 第2类 的处理，需要 @babel/polyfill （已废弃，替代品见下文），或者 @babel/preset-env 设定 <code>useBuiltIns</code> 进行，参见：<a href="https://github.com/babel/babel/blob/ef3f555be9ce1ef780e05cd1594a98e9567a1b80/packages/babel-preset-env/src/index.js#L190" target="_blank" rel="noopener">babel-preset-env index.js L190</a></p><p>具体需要用到 polyfill 的功能，可见 </p><ul><li><a href="https://babel.docschina.org/docs/en/learn" target="_blank" rel="noopener">Babel - 学习 ES2015</a>（当前页面搜索 polyfill）</li><li><a href="https://medium.com/hackernoon/polyfills-everything-you-ever-wanted-to-know-or-maybe-a-bit-less-7c8de164e423" target="_blank" rel="noopener">Polyfills: everything you ever wanted to know, or maybe a bit less</a></li></ul><h2 id="babel-概览"><a href="#babel-概览" class="headerlink" title="babel 概览"></a>babel 概览</h2><h3 id="babel-仓库-packages"><a href="#babel-仓库-packages" class="headerlink" title="babel 仓库 packages"></a>babel 仓库 packages</h3><p>详见： <a href="https://github.com/babel/babel/tree/master/packages" target="_blank" rel="noopener">babel monorepo</a></p><p>babel 7 升级后，相应 babel 包全部统一至 <strong>@babel namespace</strong> 下。</p><p>可以理解为，babel 自身的能力，全部在 <strong>@babel namespace</strong> 下，而像 <strong>babel-loader</strong>、<strong>gulp-babel</strong> 此类其他工具的插件，则仍然作为单独的 package</p><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>从上方的仓库包内，或者 <a href="https://babeljs.io/docs/en/plugins/#transform-plugins" target="_blank" rel="noopener">babel 官网 plugins</a> 上，可以看到非常多的 <code>plugins</code></p><p>这里我们先关注 <code>transform</code>/ <code>proposal</code> 的插件。其对应的作用，就是将抽象语法树 A（es 2015 及以上等等） 转换为 抽象语法树 B（es 5），在上一文 <strong><a href="http://xaber.co/2019/09/04/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91-AST-%E4%B8%8E-%E7%BC%96%E8%AF%91%E5%99%A8-Compiler/">抽象语法树-AST-与-编译器-Compiler</a></strong> 中，称为 visitor</p><h3 id="presets"><a href="#presets" class="headerlink" title="presets"></a>presets</h3><p>babel 6 支持 <code>preset-es2015</code> 这类年份已经成规范的内容，以及 <code>preset-stage-0</code> 这类未确定的草案的内容。</p><p>而 babel 7 统一：</p><ol><li>将 <code>preset-es2015</code> 这类年份已经成规范的内容统一为 <code>@babel/preset-env</code>，因为规范已落地，可以放心提前使用，提前了解 JS 新规范特性，也减少大家的配置负担（不需要关心到底是 es2015、es2016 还是 es2017）</li><li>将 <code>preset-stage-0</code> 这类未确定的草案，移出 <strong>preset</strong>。因为草案未落地，使用了这些最新的特性，可能对大家未来没有太大帮助。减少未确定的语法的干扰</li></ol><p>当下 <code>presets</code> 官方支持的有：</p><ul><li>@babel/preset-env</li><li>@babel/preset-flow</li><li>@babel/preset-react</li><li>@babel/preset-typescript</li></ul><p>而如果我们还是想要使用到一些草案性质的语法、方法，在 <a href="https://github.com/babel/babel/tree/master/packages" target="_blank" rel="noopener">babel monorepo</a> 列表中，可以看到很多 <code>plugin-proposal-</code> 前缀的，可以使用对应的 plugin 进行引入</p><p>另一方面，我们如果查看 <code>@babel/preset-env</code> 的 <a href="https://github.com/babel/babel/blob/master/packages/babel-preset-env/package.json" target="_blank" rel="noopener"><code>package.json</code> 文件</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// etc...</span><br><span class="line">&quot;@babel/plugin-proposal-object-rest-spread&quot;: &quot;^7.5.5&quot;,</span><br><span class="line">&quot;@babel/plugin-proposal-optional-catch-binding&quot;: &quot;^7.2.0&quot;,</span><br><span class="line">&quot;@babel/plugin-proposal-unicode-property-regex&quot;: &quot;^7.4.4&quot;,</span><br><span class="line">// etc...</span><br></pre></td></tr></table></figure><p>也就更清楚，<code>presets</code> 的含义，就是 “预设” 的 <code>plugins</code>，进行的相应组装</p><p>注意：<strong>Plugin 会运行在 Preset 之前，Plugin 会从前到后顺序执行，Preset 的顺序则是从后向前。</strong></p><h2 id="babel-转换流程"><a href="#babel-转换流程" class="headerlink" title="babel 转换流程"></a>babel 转换流程</h2><p>以此段代码为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>].includes(a))</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"babel src --out-dir dist"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babel-cli"><a href="#babel-cli" class="headerlink" title="@babel/cli"></a>@babel/cli</h3><ol><li><a href="https://github.com/babel/babel/blob/4d12c8971b32e4167011908ee35daf5a00981add/packages/babel-cli/src/babel/options.js#L131" target="_blank" rel="noopener">commander 解析</a></li><li><a href="https://github.com/babel/babel/blob/4d12c8971b32e4167011908ee35daf5a00981add/packages/babel-cli/src/babel/dir.js#L32" target="_blank" rel="noopener">dir 文件</a></li><li><a href="https://github.com/babel/babel/blob/4d12c8971b32e4167011908ee35daf5a00981add/packages/babel-cli/src/babel/util.js#L80" target="_blank" rel="noopener">util.compile</a></li><li><a href="https://github.com/babel/babel/blob/eac4c5bc17133c2857f2c94c1a6a8643e3b547a7/packages/babel-cli/src/babel/options.js" target="_blank" rel="noopener">默认 / 相关配置项</a></li><li><a href="https://github.com/babel/babel/blob/4d12c8971b32e4167011908ee35daf5a00981add/packages/babel-cli/src/babel/util.js#L90" target="_blank" rel="noopener">调用 @babel/core transformFile</a></li></ol><p>基于 babel 配置 / 命令行配置，使用 <code>@babel/core</code> 进行编译、输出</p><h3 id="babel-core"><a href="#babel-core" class="headerlink" title="@babel/core"></a>@babel/core</h3><ol><li><a href="https://github.com/babel/babel/blob/504b331da4ef43a12d733cc1875df46b59015271/packages/babel-core/src/transform-file.js#L60" target="_blank" rel="noopener">transformFile 读取文件，运行 runAsync</a></li><li><a href="https://github.com/babel/babel/blob/504b331da4ef43a12d733cc1875df46b59015271/packages/babel-core/src/transformation/index.js#L36" target="_blank" rel="noopener">transformation/index.js runSync</a></li><li><a href="https://github.com/babel/babel/blob/504b331da4ef43a12d733cc1875df46b59015271/packages/babel-core/src/transformation/normalize-file.js" target="_blank" rel="noopener">normalizeFile</a></li><li><a href="https://github.com/babel/babel/blob/504b331da4ef43a12d733cc1875df46b59015271/packages/babel-core/src/transformation/index.js#L74" target="_blank" rel="noopener">transformFile</a></li><li><a href="https://github.com/babel/babel/blob/504b331da4ef43a12d733cc1875df46b59015271/packages/babel-core/src/transformation/file/generate.js" target="_blank" rel="noopener">generateCode</a></li></ol><h4 id="babel-parser"><a href="#babel-parser" class="headerlink" title="@babel/parser"></a>@babel/parser</h4><ol><li>上方的 normalizeFile 对应的调用 <a href="https://github.com/babel/babel/blob/504b331da4ef43a12d733cc1875df46b59015271/packages/babel-core/src/transformation/normalize-file.js#L84" target="_blank" rel="noopener">@babel/parser</a></li></ol><h4 id="babel-traverse"><a href="#babel-traverse" class="headerlink" title="@babel/traverse"></a>@babel/traverse</h4><ol><li>上方的 transformFile 对应的合并 plugin vistors，调用 <a href="https://github.com/babel/babel/blob/504b331da4ef43a12d733cc1875df46b59015271/packages/babel-core/src/transformation/index.js#L105" target="_blank" rel="noopener">@babel/traverse</a></li></ol><h4 id="babel-generator"><a href="#babel-generator" class="headerlink" title="@babel/generator"></a>@babel/generator</h4><ol><li>上方的 generateCode 对应的调用 <a href="https://github.com/babel/babel/blob/504b331da4ef43a12d733cc1875df46b59015271/packages/babel-core/src/transformation/file/generate.js#L38" target="_blank" rel="noopener">@babel/generator</a></li></ol><h4 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h4><p>即 <code>@babel/core</code> <code>transform / transformFile ...</code> 方法，包含了 @babel/parser，@babel/traverse，@babel/generator 连串调用。</p><h2 id="babel-preset-env-配置项"><a href="#babel-preset-env-配置项" class="headerlink" title="@babel/preset-env 配置项"></a>@babel/preset-env 配置项</h2><h3 id="useBuiltIns-amp-amp-corejs"><a href="#useBuiltIns-amp-amp-corejs" class="headerlink" title="useBuiltIns &amp;&amp; corejs"></a>useBuiltIns &amp;&amp; corejs</h3><h4 id="useBuiltIns-‘entry’"><a href="#useBuiltIns-‘entry’" class="headerlink" title="useBuiltIns: ‘entry’"></a>useBuiltIns: ‘entry’</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须在开头引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@babel/polyfill'</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>].includes(a))</span><br></pre></td></tr></table></figure><h5 id="corejs-2"><a href="#corejs-2" class="headerlink" title="corejs: 2"></a>corejs: 2</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译后，@babel/polyfill 被拆分成 N 个包</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"core-js/modules/es6.array.copy-within"</span>);</span><br><span class="line"><span class="comment">// *** 省略 200+行 ***</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"regenerator-runtime/runtime"</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>].includes(a))</span><br></pre></td></tr></table></figure><h5 id="corejs-3"><a href="#corejs-3" class="headerlink" title="corejs: 3"></a>corejs: 3</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没变化</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"@babel/polyfill"</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>].includes(a));</span><br></pre></td></tr></table></figure><p>因为 <a href="https://github.com/babel/babel/blob/master/packages/babel-polyfill/package.json#L13" target="_blank" rel="noopener">@babel/polyfill</a> 只是 core-js 2.x + regenerator-runtime 的组合，因此其无法被处理出 core-js 3</p><p><code>corejs: 3 + useBuiltIns: &#39;entry&#39;</code> 的话，就会报警告： <code>@babel/polyfill is deprecated. Please, use required parts of core-js and regenerator-runtime/runtime separately</code></p><p>如果将原代码更改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'core-js'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'regenerator-runtime/runtime'</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>].includes(a))</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译后，core-js 被拆分成 N 个包</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"core-js/modules/es.symbol"</span>);</span><br><span class="line"><span class="comment">// *** 省略 500+行 ***</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"regenerator-runtime/runtime"</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>].includes(a))</span><br></pre></td></tr></table></figure><h4 id="useBuiltIns-‘usage’"><a href="#useBuiltIns-‘usage’" class="headerlink" title="useBuiltIns: ‘usage’"></a>useBuiltIns: ‘usage’</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以省略</span></span><br><span class="line"><span class="comment">// import '@babel/polyfill'</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>].includes(a))</span><br></pre></td></tr></table></figure><h5 id="corejs-2-1"><a href="#corejs-2-1" class="headerlink" title="corejs: 2"></a>corejs: 2</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多了这两行</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"core-js/modules/es7.array.includes"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"core-js/modules/es6.string.includes"</span>);</span><br><span class="line"><span class="comment">// import '@babel/polyfill'</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>].includes(a));</span><br></pre></td></tr></table></figure><h5 id="corejs-3-1"><a href="#corejs-3-1" class="headerlink" title="corejs: 3"></a>corejs: 3</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"core-js/modules/es.array.includes"</span>);</span><br><span class="line"><span class="comment">// import '@babel/polyfill'</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>].includes(a));</span><br></pre></td></tr></table></figure><h4 id="概括-1"><a href="#概括-1" class="headerlink" title="概括"></a>概括</h4><ol><li><code>@babel/polyfill</code> 已被弃用，建议使用 <code>core-js</code> 和 <code>regenerator-runtime/runtime</code> 代替。因 <code>@babel/polyfill</code> 就是它俩组成，用来模拟完整的 ES2015+ 环境。确实没必要再包一层</li><li>corejs 3 比 2 更完善</li><li>根据具体需要使用 <code>useBuiltIns: &#39;usage&#39;</code> 或 <code>useBuiltIns: &#39;entry&#39;</code> （ usage 风险：npm 的 dependencies 包进行业务开发，babel 默认是不会检测 依赖包的代码的。 也就是说，如果某个需要 polyfill 的特性，依赖包使用了但是业务代码没有使用，会引起未可知的 BUG）</li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://github.com/sorrycc/blog/issues/80" target="_blank" rel="noopener">Polyfill 方案的过去、现在和未来</a></li><li><a href="https://juejin.im/post/5cb9833b6fb9a068a84fe4d0" target="_blank" rel="noopener">Babel 社区概览</a></li></ol><h3 id="其他配置项"><a href="#其他配置项" class="headerlink" title="其他配置项"></a>其他配置项</h3><ol><li>详见：<a href="https://babeljs.io/docs/en/babel-preset-env" target="_blank" rel="noopener">@babel/preset-env docs</a></li></ol><h2 id="babel-namespace-下其他工具"><a href="#babel-namespace-下其他工具" class="headerlink" title="@babel namespace 下其他工具"></a>@babel namespace 下其他工具</h2><h3 id="弃用"><a href="#弃用" class="headerlink" title="弃用"></a>弃用</h3><h4 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="@babel/polyfill"></a>@babel/polyfill</h4><p>已废弃，使用 <code>import &#39;core-js&#39;; import &#39;regenerator-runtime/runtime&#39;</code> 代替</p><h3 id="babel-其他运行方式"><a href="#babel-其他运行方式" class="headerlink" title="babel 其他运行方式"></a>babel 其他运行方式</h3><h4 id="babel-node"><a href="#babel-node" class="headerlink" title="@babel/node"></a>@babel/node</h4><ol><li><a href="https://github.com/babel/babel/blob/master/packages/babel-node/src/babel-node.js#L84" target="_blank" rel="noopener">以 child_process 形式</a></li><li><a href="https://github.com/babel/babel/blob/master/packages/babel-node/src/_babel-node.js#L125" target="_blank" rel="noopener">@babel/core transform</a>，与上方 transformFile 流程类似</li><li><a href="https://github.com/babel/babel/blob/master/packages/babel-node/src/_babel-node.js#L214" target="_blank" rel="noopener">node repl 调用</a>、<a href="https://github.com/babel/babel/blob/master/packages/babel-node/src/_babel-node.js#L131" target="_blank" rel="noopener">node vm 运行</a></li><li>才疏学浅，也不好解释更多。最关键：<strong>不要在生产环境运行</strong>。 开发环境大概可以减少一点测试时间，类似 <strong><a href="https://github.com/TypeStrong/ts-node" target="_blank" rel="noopener">ts-node</a></strong>，属于偷懒用法 / 做法，用处不大</li><li>详见：<a href="https://babeljs.io/docs/en/next/babel-node.html" target="_blank" rel="noopener">@babel/node docs</a></li></ol><h4 id="babel-register"><a href="#babel-register" class="headerlink" title="@babel/register"></a>@babel/register</h4><ol><li>通过 <a href="https://github.com/ariporad/pirates" target="_blank" rel="noopener">pirates</a> 工具，给 node <code>require</code> 加了 hook</li><li>在文件顶部使用 <code>require(&#39;@babel/register&#39;)</code> 后，后续 <code>require(&quot;./my-plugin.xxx&quot;)</code> 都会经过 <code>babel.transfrom</code> 后，得到编译后的代码再运行</li><li>文档：<a href="https://www.babeljs.cn/docs/babel-register" target="_blank" rel="noopener">@babel/register</a></li><li>类似 @babel/node，偷懒用法 / 做法，最关键：<strong>不要在生产环境运行</strong></li></ol><h4 id="babel-standalone-——-浏览器-特定环境"><a href="#babel-standalone-——-浏览器-特定环境" class="headerlink" title="@babel/standalone —— 浏览器 / 特定环境"></a>@babel/standalone —— 浏览器 / 特定环境</h4><ol><li>一个完整的 babel.js / babel.min.js 文件，用来进行 原代码 transform 等功能</li><li>文档：<a href="https://www.babeljs.cn/docs/babel-standalone" target="_blank" rel="noopener">@babel/standalone</a></li><li>一般情况下，用处不大，也用不上。除非是需要特有环境下运行的，例如：JSFiddle, JS Bin, the REPL on the Babel site</li></ol><h3 id="parser-阶段语法检查"><a href="#parser-阶段语法检查" class="headerlink" title="parser 阶段语法检查"></a>parser 阶段语法检查</h3><h4 id="babel-highlight"><a href="#babel-highlight" class="headerlink" title="@babel/highlight"></a>@babel/highlight</h4><ol><li>使用 <a href="https://github.com/lydell/js-tokens" target="_blank" rel="noopener">js-tokens</a>（有趣的是，其内部用的是 <a href="https://github.com/lydell/js-tokens/blob/master/package.json#L26" target="_blank" rel="noopener">另一个老牌解析器 esprima</a>） 分词</li><li>使用 <a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">命令行高亮</a></li><li>具体用法见：<a href="https://babeljs.io/docs/en/next/babel-highlight.html" target="_blank" rel="noopener">@babel/highlight</a></li></ol><h4 id="babel-code-frame"><a href="#babel-code-frame" class="headerlink" title="@babel/code-frame"></a>@babel/code-frame</h4><ol><li>使用 @babel/highlight，大致是优化了错误代码的显示，加了代码下方的箭头 / 错误信息。具体用法见：<a href="https://babeljs.io/docs/en/next/babel-code-frame.html" target="_blank" rel="noopener">@babel/code-frame docs</a></li></ol><h3 id="编译结果优化"><a href="#编译结果优化" class="headerlink" title="编译结果优化"></a>编译结果优化</h3><h4 id="babel-plugin-transform-runtime"><a href="#babel-plugin-transform-runtime" class="headerlink" title="@babel/plugin-transform-runtime"></a>@babel/plugin-transform-runtime</h4><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>如果不使用此插件，编译后内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123; <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>); &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  _classCallCheck(<span class="keyword">this</span>, A);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果是多个文件，那么每个文件都会有 <code>_classCallCheck</code> 方法，如果再把这些文件合并在一起，<code>_classCallCheck</code> 就会有 N 次定义，以此类推，还有其他各种函数。</p><p>如果使用了插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  [<span class="string">'@babel/transform-runtime'</span>, &#123;</span><br><span class="line">    <span class="comment">// corejs: false, use @babel/runtime</span></span><br><span class="line">    <span class="comment">// corejs: 2, use @babel/runtime-corejs2</span></span><br><span class="line">    corejs: <span class="number">3</span>, <span class="comment">// use @babel/runtime-corejs3</span></span><br><span class="line">  &#125;],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>对应的编译后内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// corejs false</span></span><br><span class="line"><span class="keyword">var</span> _interopRequireDefault = <span class="built_in">require</span>(<span class="string">"@babel/runtime/helpers/interopRequireDefault"</span>);</span><br><span class="line"><span class="keyword">var</span> _classCallCheck2 = _interopRequireDefault(<span class="built_in">require</span>(<span class="string">"@babel/runtime/helpers/classCallCheck"</span>));</span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  (<span class="number">0</span>, _classCallCheck2[<span class="string">"default"</span>])(<span class="keyword">this</span>, A);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// corejs 2</span></span><br><span class="line"><span class="keyword">var</span> _interopRequireDefault = <span class="built_in">require</span>(<span class="string">"@babel/runtime-corejs2/helpers/interopRequireDefault"</span>);</span><br><span class="line"><span class="keyword">var</span> _classCallCheck2 = _interopRequireDefault(<span class="built_in">require</span>(<span class="string">"@babel/runtime-corejs2/helpers/classCallCheck"</span>));</span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  (<span class="number">0</span>, _classCallCheck2[<span class="string">"default"</span>])(<span class="keyword">this</span>, A);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// corejs 3</span></span><br><span class="line"><span class="keyword">var</span> _interopRequireDefault = <span class="built_in">require</span>(<span class="string">"@babel/runtime-corejs3/helpers/interopRequireDefault"</span>);</span><br><span class="line"><span class="keyword">var</span> _classCallCheck2 = _interopRequireDefault(<span class="built_in">require</span>(<span class="string">"@babel/runtime-corejs3/helpers/classCallCheck"</span>));</span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  (<span class="number">0</span>, _classCallCheck2[<span class="string">"default"</span>])(<span class="keyword">this</span>, A);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>就仍然会是 require 形式引用。最终 webpack、browserify 等工具进行打包时， 就不会有 N 个重复的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123; <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>); &#125; &#125;</span><br></pre></td></tr></table></figure></p><ol><li>文档见：<a href="https://babeljs.io/docs/en/next/babel-plugin-transform-runtime" target="_blank" rel="noopener">@babel/plugin-transform-runtime docs</a></li><li>看起来上方，corejs 的配置最终编译后内容没什么差距，但实际上 Symbol 等使用，编译后结果会有一些差异。因此还是推荐根据 @babel/env 配置 的 corejs 版本，相应的也 进行 @babel/transform-runtime 插件的 corejs 配置。</li></ol><h4 id="babel-runtime-babel-runtime-corejs2-babel-runtime-corejs3"><a href="#babel-runtime-babel-runtime-corejs2-babel-runtime-corejs3" class="headerlink" title="@babel/runtime, @babel/runtime-corejs2, @babel/runtime-corejs3"></a>@babel/runtime, @babel/runtime-corejs2, @babel/runtime-corejs3</h4><p>针对 <code>@babel/env</code> 的 <code>corejs</code> 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'@babel/env'</span>, &#123;</span><br><span class="line">  useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">  corejs: <span class="number">3</span>,</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>对应的 <code>runtime</code> 版本，仅用于 <code>@babel/transform-runtime</code> 插件内部</p><h3 id="babel-plugin-external-helpers"><a href="#babel-plugin-external-helpers" class="headerlink" title="@babel/plugin-external-helpers"></a>@babel/plugin-external-helpers</h3><p>功能 与 <code>@babel/plugin-transform-runtime</code> 类似 或者 说有冲突，推荐使用 <code>@babel/plugin-transform-runtime</code>，此工具也就没必要了。</p><p>其需要配合 <code>@babel/cli</code> 的 <code>babel-external-helpers</code> 命令行工具使用，参考阅读：<a href="https://segmentfault.com/a/1190000011155061#articleHeader5" target="_blank" rel="noopener">babel-external-helpers</a></p><p>babel 关于移除 <code>@babel/plugin-external-helpers</code> 的讨论 - <a href="https://github.com/babel/babel/issues/5699" target="_blank" rel="noopener">Remove babel-plugin-external-helpers in favor of modular helpers</a></p><h3 id="babel-helpers"><a href="#babel-helpers" class="headerlink" title="@babel/helpers"></a>@babel/helpers</h3><p>像前文提到的，会有 <code>_classCallCheck</code> 产生：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其是通过 <a href="https://github.com/babel/babel/blob/daf25af47c4161025dfa552fd41b837f062efe47/packages/babel-helpers/src/helpers.js#L284" target="_blank" rel="noopener">@babel/helpers helpers.js</a>，经过 <code>@babel/template</code> 转换成 AST 后，插入的。</p><p>而像 <code>@babel/plugin-transform-runtime</code>，实际上有一个 <a href="https://github.com/babel/babel/blob/daf25af47c4161025dfa552fd41b837f062efe47/packages/babel-plugin-transform-runtime/scripts/build-dist.js" target="_blank" rel="noopener">build-dist.js</a> 将 <a href="https://github.com/babel/babel/blob/daf25af47c4161025dfa552fd41b837f062efe47/packages/babel-helpers/src/helpers.js#L284" target="_blank" rel="noopener">@babel/helpers helpers.js</a> 里面的这些 <code>helper</code>，一个个的编译成单独的文件放在 <code>@babel/runtime</code> <code>helpers</code> 目录下，相应处理后，此部分原来被添加的代码片段，就变成了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _classCallCheck2 = _interopRequireDefault(<span class="built_in">require</span>(<span class="string">"@babel/runtime/helpers/classCallCheck"</span>));</span><br></pre></td></tr></table></figure><p>其他 <code>helpers</code> 同理</p><h3 id="其他-解析-转换-插件开发相关"><a href="#其他-解析-转换-插件开发相关" class="headerlink" title="其他 - 解析 / 转换 / 插件开发相关"></a>其他 - 解析 / 转换 / 插件开发相关</h3><ul><li>@babel/types</li><li>@babel/template</li><li>@babel/helper-xxxx-xxxx</li><li>@babel/plugin-proposal-xxxx-xxxx</li><li>@babel/plugin-syntax-xxxx-xxxx</li><li>@babel/plugin-transform-xxxx-xxxx</li></ul><p>此部分内容，为避免此文太长（不看），单独放到 <a href="http://saber.co/2019/09/09/babel-%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/" target="_blank" rel="noopener">babel 插件开发相关</a> 一文内。</p><h2 id="其他-babel-工具"><a href="#其他-babel-工具" class="headerlink" title="其他 babel 工具"></a>其他 babel 工具</h2><h3 id="还好用"><a href="#还好用" class="headerlink" title="还好用"></a>还好用</h3><ul><li><a href="https://github.com/babel/babel-loader" target="_blank" rel="noopener">babel-loader</a></li><li><a href="https://github.com/rollup/rollup-plugin-babel" target="_blank" rel="noopener">rollup-plugin-babel</a></li><li><a href="https://github.com/babel/gulp-babel/blob/master/index.js" target="_blank" rel="noopener">gulp-babel</a> —— <code>through.obj</code> 包了一下，<code>babel.transformAsync</code> 转了一下</li><li><a href="https://github.com/facebook/jest/tree/master/packages/babel-jest" target="_blank" rel="noopener">babel-jest</a><ol><li>已经移动到 jest 仓库，主要为 jest 的测试代码 提供 babel 转换，让其可以使用 es6 的方式编写</li><li>使用 <a href="https://github.com/kulshekhar/ts-jest" target="_blank" rel="noopener">ts-jest</a> 貌似更好一些</li></ol></li><li><a href="https://github.com/babel/babel-eslint" target="_blank" rel="noopener">babel-eslint</a>，一个 AST parser，原代码 -&gt; babel AST -&gt; estree<ol><li>eslint 仅仅支持 es 最新的语法，不支持一些 proposals 的内容，因此需要 babel-eslint 将这些内容，通过 babel 转换出新的 AST，给到 eslint</li><li>补充：前文<strong><a href="http://xaber.co/2019/09/04/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91-AST-%E4%B8%8E-%E7%BC%96%E8%AF%91%E5%99%A8-Compiler/">抽象语法树-AST-与-编译器-Compiler</a></strong> 提到 eslint 使用 <a href="https://github.com/eslint/espree" target="_blank" rel="noopener">espree</a>，而 babel 根据自身情况做了一些<a href="http://babel.docschina.org/docs/en/babel-parser#output" target="_blank" rel="noopener">ESTree 的调整</a>，因此又做了一步 <a href="https://github.com/babel/babel-eslint/tree/master/lib/babylon-to-espree" target="_blank" rel="noopener">babylon-to-espree</a></li><li><code>.eslintrc.js</code> -&gt; <code>module.exports = { parser: &quot;babel-eslint&quot; };</code></li><li>配合使用 对应的规则调整 <a href="https://github.com/babel/eslint-plugin-babel" target="_blank" rel="noopener">eslint-plugin-babel</a></li><li>使用 <a href="https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser" target="_blank" rel="noopener">typescript-eslint</a> 也行。不过都可以直接用 <a href="https://github.com/palantir/tslint" target="_blank" rel="noopener">ts-lint</a> 了。玩法（轮子）真多 (&gt; w &lt;)</li></ol></li><li><a href="https://github.com/babel/babel-upgrade" target="_blank" rel="noopener">babel-upgrade</a> —— babel 6 -&gt; babel 7 的升级工具</li></ul><h3 id="用处不大-再见了您"><a href="#用处不大-再见了您" class="headerlink" title="用处不大 / 再见了您"></a>用处不大 / 再见了您</h3><ul><li>ember-cli-babel</li><li>broccoli-babel-transpiler</li><li>babelify</li><li>babel-brunch</li><li>grunt-babel</li><li>generator-babel-plugin</li></ul><h2 id="其他-presets-or-plugins"><a href="#其他-presets-or-plugins" class="headerlink" title="其他 presets or plugins"></a>其他 presets or plugins</h2><ul><li><a href="https://github.com/Rikkiabb/metro-react-native-babel-preset" target="_blank" rel="noopener">metro-react-native-babel-preset</a></li><li><a href="https://github.com/babel/minify/tree/master/packages/babel-preset-minify" target="_blank" rel="noopener">babel-preset-minify</a></li><li>…</li></ul><h2 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h2><ul><li><strong><a href="http://xaber.co/2019/09/04/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91-AST-%E4%B8%8E-%E7%BC%96%E8%AF%91%E5%99%A8-Compiler/">抽象语法树-AST-与-编译器-Compiler</a></strong></li><li><a href="https://babeljs.io/blog/2018/08/27/7.0.0" target="_blank" rel="noopener">Babel 7 Released</a></li><li><a href="https://babeljs.io/docs/en/config-files#6x-vs-7x-babelrc-loading" target="_blank" rel="noopener">6.x vs 7.x comparison</a></li><li><a href="https://github.com/babel/babel/tree/master/packages" target="_blank" rel="noopener">babel monorepo</a></li><li><a href="https://zhuanlan.zhihu.com/p/72995336" target="_blank" rel="noopener">【第六期】babel深入教程（babel7版本）</a></li><li><strong><a href="https://github.com/jamiebuilds/babel-handbook/tree/master/translations/zh-Hans" target="_blank" rel="noopener">Babel 手册</a></strong></li><li><a href="https://fed.taobao.org/blog/2016/09/30/babel-plugins/" target="_blank" rel="noopener">理解 Babel 插件</a></li><li><a href="https://juejin.im/post/5cf5dfe2f265da1bd522baaa" target="_blank" rel="noopener">最全的Eslint配置模板，从此统一团队的编程习惯</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;babel 官方在 2018-08-27 发布了文章，babel 7 正式发布，距离 babel 6 相隔3年。&lt;/p&gt;
&lt;p&gt;包含内容（官网cp）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;upgrade tool&lt;/li&gt;
&lt;li&gt;JavaScript 配置文件 &lt;code&gt;babel.config.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择性的配置 &lt;code&gt;overrides&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TC39 提案 支持 &lt;a href=&quot;https://github.com/babel/proposals/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@babel/proposals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jsx、typescript、flow 的支持&lt;/li&gt;
&lt;li&gt;Babel 辅助函数的变化&lt;/li&gt;
&lt;li&gt;自动 Polyfill (试验) &lt;code&gt;useBuiltins&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;详细内容可见：&lt;a href=&quot;https://babel.docschina.org/blog/2018/08/27/7.0.0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Babel 7 发布&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此篇文章主要介绍 babel 7 相关 &lt;code&gt;presets&lt;/code&gt;、&lt;code&gt;plugins&lt;/code&gt;、&lt;code&gt;@babel 下其他所有的 packages&lt;/code&gt;、babel 其他工具、以及 babel 插件相关，即 babel 全套（包含部分流程上的源码链接）&lt;/p&gt;
&lt;p&gt;至于 AST 抽象语法树相关可见另一文 &lt;strong&gt;&lt;a href=&quot;http://xaber.co/2019/09/04/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91-AST-%E4%B8%8E-%E7%BC%96%E8%AF%91%E5%99%A8-Compiler/&quot;&gt;抽象语法树-AST-与-编译器-Compiler&lt;/a&gt;&lt;/strong&gt; 内容。&lt;/p&gt;
    
    </summary>
    
      <category term="总结系列" scheme="http://xaber.co/categories/%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="能力" scheme="http://xaber.co/tags/%E8%83%BD%E5%8A%9B/"/>
    
      <category term="babel" scheme="http://xaber.co/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>抽象语法树 AST 与 编译器 Compiler</title>
    <link href="http://xaber.co/2019/09/04/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91-AST-%E4%B8%8E-%E7%BC%96%E8%AF%91%E5%99%A8-Compiler/"/>
    <id>http://xaber.co/2019/09/04/抽象语法树-AST-与-编译器-Compiler/</id>
    <published>2019-09-04T08:30:25.000Z</published>
    <updated>2019-09-09T03:12:53.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="the-super-tiny-compiler-超级微小的编译器"><a href="#the-super-tiny-compiler-超级微小的编译器" class="headerlink" title="the-super-tiny-compiler / 超级微小的编译器"></a>the-super-tiny-compiler / 超级微小的编译器</h2><p>此部分 <em>the-super-tiny-compiler / 超级微小的编译器</em> 内容，均摘取自 <strong><a href="https://github.com/YongzeYao/the-super-tiny-compiler-CN" target="_blank" rel="noopener">the-super-tiny-compiler-CN</a></strong>，先看完 <strong><a href="https://github.com/YongzeYao/the-super-tiny-compiler-CN" target="_blank" rel="noopener">the-super-tiny-compiler-CN</a></strong> 才有看后续的意义。</p><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>大部分编译器的工作可以被分解为三个主要阶段：解析（Parsing），转化（Transformation）以及 代码生成（Code Generation）</p><ol><li><em>解析</em> 将源代码转换为一个更抽象的形式。</li><li><em>转换</em> 接受解析产生的抽象形式并且操纵这些抽象形式做任何编译器想让它们做的事。</li><li><em>代码生成</em> 基于转换后的代码表现形式（code representation）生成目标代码。</li></ol><a id="more"></a><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ol><li><em>词法分析</em> —— tokenizer 通过一个叫做tokenizer（词素生成器，也叫lexer）的工具将源代码分解成一个个词素。（词素是描述编程语言语法的对象。它可以描述数字，标识符，标点符号，运算符等等。）</li><li><em>语法分析</em> —— parser 接收词素并将它们组合成一个描述了源代码各部分之间关系的中间表达形式：抽象语法树。（抽象语法树是一个深度嵌套的对象，这个对象以一种既能够简单地操作又提供很多关于源代码信息的形式，来展现代码。）</li></ol><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>编译器的下一个阶段是转换阶段。再回顾一遍，这个过程接收解析生成的抽象语法树并对它做出改动。转换阶段可以改变抽象语法树使代码保持在同一个语言（例如Babel，Babel接收的是JS代码生成的也是JS代码），或者编译成另外一门语言。</p><p>traverser函数，这个函数接收抽象语法树以及一个访问者对象</p><p><code>transformer</code> -&gt; <code>traverser(ast, visitor)</code></p><p>接收创造的抽象语法树并将它和一个访问者对象传给 <code>traverser</code> 函数。然后创造一个新的抽象语法树</p><h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h3><p><code>codeGenerator</code> 生成新的代码</p><h2 id="babel-是如何工作的？"><a href="#babel-是如何工作的？" class="headerlink" title="babel 是如何工作的？"></a>babel 是如何工作的？</h2><ol><li>解析 —— <a href="https://github.com/babel/babel/tree/master/packages/babel-parser" target="_blank" rel="noopener">@babel/parser</a>（包含 上方提到的 <a href="https://github.com/babel/babel/tree/master/packages/babel-parser/src/tokenizer" target="_blank" rel="noopener">tokenizer</a>、<a href="https://github.com/babel/babel/tree/master/packages/babel-parser/src/parser" target="_blank" rel="noopener">parser</a>），根据 es2015, es2016… 标准，生成 AST</li><li>转换 —— <a href="https://github.com/babel/babel/tree/master/packages/babel-traverse" target="_blank" rel="noopener">@babel/traverse</a> + plugins （visitor）</li><li>代码生成 —— <a href="https://github.com/babel/babel/tree/master/packages/babel-generator" target="_blank" rel="noopener">@babel/generator</a></li></ol><h2 id="AST-定义"><a href="#AST-定义" class="headerlink" title="AST 定义"></a>AST 定义</h2><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API#%E8%8A%82%E7%82%B9%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener">SpiderMonkey in MDN</a></li><li><a href="https://github.com/estree/estree" target="_blank" rel="noopener">The ESTree Spec</a></li><li><a href="https://github.com/babel/babel/blob/master/packages/babel-parser/ast/spec.md" target="_blank" rel="noopener">babel AST</a> 针对 <a href="http://babel.docschina.org/docs/en/babel-parser#output" target="_blank" rel="noopener">ESTree 的调整</a></li><li><a href="https://github.com/facebook/jsx/blob/master/AST.md" target="_blank" rel="noopener">jsx-AST</a></li></ol><h2 id="AST-生成工具-parser"><a href="#AST-生成工具-parser" class="headerlink" title="AST 生成工具 (parser)"></a>AST 生成工具 (parser)</h2><ol><li><a href="https://github.com/jquery/esprima" target="_blank" rel="noopener">esprima</a> —— 老牌解析器</li><li><a href="https://github.com/acornjs/acorn" target="_blank" rel="noopener">acorn</a> —— esprima 后的轮子，目前使用最多。webpack 也使用此工具</li><li><a href="https://astexplorer.net/" target="_blank" rel="noopener">astexplorer</a> —— 在线生成工具</li><li><a href="https://github.com/eslint/espree" target="_blank" rel="noopener">espree</a> —— 最初从 esprima fork 出来，来自 eslint，用于 eslint</li><li><a href="https://github.com/babel/babel/tree/master/packages/babel-parser/src/parser" target="_blank" rel="noopener">babel-parser</a> —— 原 <a href="https://github.com/babel/babylon" target="_blank" rel="noopener">babylon</a>，最初 从 <a href="https://github.com/acornjs/acorn" target="_blank" rel="noopener">acorn</a> fork 出来</li><li><a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="noopener">UglifyJS2</a> —— <a href="https://github.com/mishoo/UglifyJS2/blob/76df77c08c684bc49bebb35d6d527d90cea48108/lib/parse.js" target="_blank" rel="noopener">自带 parser</a></li><li><a href="https://github.com/shapesecurity/shift-parser-js" target="_blank" rel="noopener">shift-parser-js</a> —— 自己定义了一套 AST 规范 <a href="https://github.com/shapesecurity/shift-spec" target="_blank" rel="noopener">shift-spec</a></li></ol><h2 id="其他-AST-转换工具-（transformer）"><a href="#其他-AST-转换工具-（transformer）" class="headerlink" title="其他 AST 转换工具 （transformer）"></a>其他 AST 转换工具 （transformer）</h2><ol><li><a href="https://github.com/estools/estraverse" target="_blank" rel="noopener">estraverse</a></li><li>…</li></ol><h2 id="代码生成工具-（codeGenerator）"><a href="#代码生成工具-（codeGenerator）" class="headerlink" title="代码生成工具 （codeGenerator）"></a>代码生成工具 （codeGenerator）</h2><ol><li><a href="https://github.com/estools/escodegen" target="_blank" rel="noopener">escodegen</a></li><li>…</li></ol><h2 id="其他编译工具"><a href="#其他编译工具" class="headerlink" title="其他编译工具"></a>其他编译工具</h2><ol><li><a href="https://github.com/google/traceur-compiler" target="_blank" rel="noopener">traceur-compiler</a></li><li>…</li></ol><h2 id="基于-AST-的工具"><a href="#基于-AST-的工具" class="headerlink" title="基于 AST 的工具"></a>基于 AST 的工具</h2><p>如上所描述：</p><ol><li>eslint</li><li>webpack</li><li>UglifyJS 代码压缩</li><li><a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">prettier</a> —— 使用 <a href="https://github.com/babel/babel/tree/master/packages/babel-parser/src/parser" target="_blank" rel="noopener">@babel/parser</a>、<a href="https://github.com/ikatyang/angular-estree-parser" target="_blank" rel="noopener">angular-estree-parser</a>… etc.</li><li>typescript —— 自带 parser、transformer、codeGenerator</li><li>代码重构<ol><li><a href="https://github.com/benjamn/recast" target="_blank" rel="noopener">recast</a></li><li><a href="https://github.com/facebook/jscodeshift" target="_blank" rel="noopener">jscodeshift</a></li><li><a href="https://github.com/reactjs/react-codemod" target="_blank" rel="noopener">react-codemod</a></li></ol></li><li>其他，例如：IDE 错误提示、格式化、高亮、自动补全 等</li><li>…</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/YongzeYao/the-super-tiny-compiler-CN" target="_blank" rel="noopener">the-super-tiny-compiler-CN</a></li><li><a href="https://zhaomenghuan.js.org/blog/js-ast-principle-reveals.html" target="_blank" rel="noopener">JS AST 原理揭秘</a></li><li><a href="https://www.qianduandaren.com/2018/12/29/javascript-engine-v8/" target="_blank" rel="noopener">JavaScript基础——JS编译器你都做了啥？</a></li><li><a href="https://juejin.im/post/5bfc21d2e51d4544313df666" target="_blank" rel="noopener">平庸前端码农之蜕变 — AST</a></li><li><a href="https://imweb.io/topic/57b13b4f93d9938132cc8dfd" target="_blank" rel="noopener">代码重构利器 —— jscodeshift</a></li><li><a href="http://ambeta.github.io/2017/08/13/jscodeshift.html" target="_blank" rel="noopener">利用 AST 对项目代码进行迁移</a></li><li><a href="https://tianqi.name/blog/2018/01/12/jscodeshift.html" target="_blank" rel="noopener">jscodeshift 入门指南</a></li><li><a href="http://borninsummer.com/files/2018/11/acorn.js-intro.pdf" target="_blank" rel="noopener">ACORN.JS：原理与应⽤</a></li><li><a href="https://juejin.im/post/582425402e958a129926fcb4" target="_blank" rel="noopener">使用 Acorn 来解析 JavaScript</a></li><li><a href="https://esprima.org/test/compare.html" target="_blank" rel="noopener">Speed Comparison</a></li><li><a href="https://github.com/addyosmani/es6-tools" target="_blank" rel="noopener">es6-tools</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;the-super-tiny-compiler-超级微小的编译器&quot;&gt;&lt;a href=&quot;#the-super-tiny-compiler-超级微小的编译器&quot; class=&quot;headerlink&quot; title=&quot;the-super-tiny-compiler / 超级微小的编译器&quot;&gt;&lt;/a&gt;the-super-tiny-compiler / 超级微小的编译器&lt;/h2&gt;&lt;p&gt;此部分 &lt;em&gt;the-super-tiny-compiler / 超级微小的编译器&lt;/em&gt; 内容，均摘取自 &lt;strong&gt;&lt;a href=&quot;https://github.com/YongzeYao/the-super-tiny-compiler-CN&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the-super-tiny-compiler-CN&lt;/a&gt;&lt;/strong&gt;，先看完 &lt;strong&gt;&lt;a href=&quot;https://github.com/YongzeYao/the-super-tiny-compiler-CN&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the-super-tiny-compiler-CN&lt;/a&gt;&lt;/strong&gt; 才有看后续的意义。&lt;/p&gt;
&lt;h3 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h3&gt;&lt;p&gt;大部分编译器的工作可以被分解为三个主要阶段：解析（Parsing），转化（Transformation）以及 代码生成（Code Generation）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;解析&lt;/em&gt; 将源代码转换为一个更抽象的形式。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;转换&lt;/em&gt; 接受解析产生的抽象形式并且操纵这些抽象形式做任何编译器想让它们做的事。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;代码生成&lt;/em&gt; 基于转换后的代码表现形式（code representation）生成目标代码。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="总结系列" scheme="http://xaber.co/categories/%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="能力" scheme="http://xaber.co/tags/%E8%83%BD%E5%8A%9B/"/>
    
      <category term="AST" scheme="http://xaber.co/tags/AST/"/>
    
      <category term="编译器" scheme="http://xaber.co/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
      <category term="babel" scheme="http://xaber.co/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>webpack 文档与配置</title>
    <link href="http://xaber.co/2019/08/15/webpack-%E6%96%87%E6%A1%A3%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://xaber.co/2019/08/15/webpack-文档与配置/</id>
    <published>2019-08-14T16:17:52.000Z</published>
    <updated>2019-08-14T16:33:47.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://webpack.docschina.org" target="_blank" rel="noopener">印记中文 - webpack 文档</a></p><p>推荐顺序：</p><a id="more"></a><ol><li><a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noopener">概念</a></li><li><a href="https://webpack.docschina.org/guides/" target="_blank" rel="noopener">指南</a></li><li><a href="https://webpack.docschina.org/configuration/" target="_blank" rel="noopener">配置</a></li><li><a href="https://webpack.docschina.org/loaders/" target="_blank" rel="noopener">LOADER</a></li><li><a href="https://webpack.docschina.org/plugins/" target="_blank" rel="noopener">PLUGIN</a></li><li><a href="https://webpack.docschina.org/api/" target="_blank" rel="noopener">API</a></li></ol><h2 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h2><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul><li><a href="https://github.com/facebook/create-react-app/blob/cbaed7f9fff2fc570f4f206aa057253bd4f74c9e/packages/react-scripts/config/webpack.config.js" target="_blank" rel="noopener">create-react-app webpack.config.js</a></li><li><a href="https://github.com/facebook/create-react-app/blob/cbaed7f9fff2fc570f4f206aa057253bd4f74c9e/packages/react-scripts/config/webpackDevServer.config.js" target="_blank" rel="noopener">create-react-app webpackDevServer.config.js</a></li></ul><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ul><li><a href="https://github.com/vuejs/vue-cli/tree/e2e3469a183b6e738cea1820f9a517cb3cac464f/packages/%40vue/cli-service/lib/config" target="_blank" rel="noopener">@vue/cli config</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文档&quot;&gt;&lt;a href=&quot;#文档&quot; class=&quot;headerlink&quot; title=&quot;文档&quot;&gt;&lt;/a&gt;文档&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://webpack.docschina.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;印记中文 - webpack 文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐顺序：&lt;/p&gt;
    
    </summary>
    
      <category term="总结系列" scheme="http://xaber.co/categories/%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="前端工程化" scheme="http://xaber.co/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="能力" scheme="http://xaber.co/tags/%E8%83%BD%E5%8A%9B/"/>
    
      <category term="webpack" scheme="http://xaber.co/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>browserify 中文文档与使用教程</title>
    <link href="http://xaber.co/2019/08/01/browserify/"/>
    <id>http://xaber.co/2019/08/01/browserify/</id>
    <published>2019-08-01T04:54:12.000Z</published>
    <updated>2019-08-14T16:37:35.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大概介绍"><a href="#大概介绍" class="headerlink" title="大概介绍"></a>大概介绍</h2><ol><li><strong>浏览器端</strong>的前端<strong>打包</strong>工具</li><li>主要用于在浏览器中使用 npm 包，最终会转换为 commonJS (require) 类似方式，在浏览器使用</li><li>方便模块细分，每个模块自成，通过 <code>require</code> 引用其他模块</li><li>基于流 <code>Stream</code></li><li>旧时代产物，尽管也能勉强处理 css（<a href="https://github.com/browserify/awesome-browserify#css-bundlers" target="_blank" rel="noopener">CSS bundlers</a>），html（<a href="https://github.com/browserify/brfs" target="_blank" rel="noopener">brfs</a>），但是不太友好，且年久失修</li></ol><p>阅读此篇，大概可以较好使用 browserify，以及将其用在合适的地方</p><p>此外，文中带 <del>删除线</del> 的内容，因相对的内容过时，阅读意义不大，可简单跳过</p><a id="more"></a><h2 id="大概分析"><a href="#大概分析" class="headerlink" title="大概分析"></a>大概分析</h2><p>以 nums.js，demo.js，build 文件做大概分析</p><h4 id="nums-js"><a href="#nums-js" class="headerlink" title="nums.js"></a>nums.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniq = <span class="built_in">require</span>(<span class="string">'uniq'</span>); <span class="comment">// uniq 为 npm 依赖包</span></span><br><span class="line"><span class="keyword">var</span> nums = [ <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span> ];</span><br><span class="line"><span class="built_in">module</span>.exports = nums</span><br></pre></td></tr></table></figure><h4 id="demo-js"><a href="#demo-js" class="headerlink" title="demo.js"></a>demo.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = <span class="built_in">require</span>(<span class="string">'./nums'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nums)</span><br></pre></td></tr></table></figure><h4 id="build"><a href="#build" class="headerlink" title="build"></a>build</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> browserify = <span class="built_in">require</span>(<span class="string">'browserify'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">browserify([<span class="string">'./src/demo'</span>])</span><br><span class="line">.bundle()</span><br><span class="line">.pipe(fs.createWriteStream(<span class="string">'./build/demo.js'</span>))</span><br></pre></td></tr></table></figure><h4 id="build-后文件"><a href="#build-后文件" class="headerlink" title="build 后文件"></a>build 后文件</h4><p>通过 <a href="https://github.com/browserify/detective" target="_blank" rel="noopener">detective</a> 进行依赖查找，后落地为以下文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">e,n,t</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">i,f</span>)</span>&#123;<span class="keyword">if</span>(!n[i])&#123;<span class="keyword">if</span>(!e[i])&#123;<span class="keyword">var</span> c=<span class="string">"function"</span>==<span class="keyword">typeof</span> <span class="built_in">require</span>&amp;&amp;<span class="built_in">require</span>;<span class="keyword">if</span>(!f&amp;&amp;c)<span class="keyword">return</span> c(i,!<span class="number">0</span>);<span class="keyword">if</span>(u)<span class="keyword">return</span> u(i,!<span class="number">0</span>);<span class="keyword">var</span> a=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span>+i+<span class="string">"'"</span>);<span class="keyword">throw</span> a.code=<span class="string">"MODULE_NOT_FOUND"</span>,a&#125;<span class="keyword">var</span> p=n[i]=&#123;<span class="attr">exports</span>:&#123;&#125;&#125;;e[i][<span class="number">0</span>].call(p.exports,<span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;<span class="keyword">var</span> n=e[i][<span class="number">1</span>][r];<span class="keyword">return</span> o(n||r)&#125;,p,p.exports,r,e,n,t)&#125;<span class="keyword">return</span> n[i].exports&#125;<span class="keyword">for</span>(<span class="keyword">var</span> u=<span class="string">"function"</span>==<span class="keyword">typeof</span> <span class="built_in">require</span>&amp;&amp;<span class="built_in">require</span>,i=<span class="number">0</span>;i&lt;t.length;i++)o(t[i]);<span class="keyword">return</span> o&#125;<span class="keyword">return</span> r&#125;)()(&#123;</span><br><span class="line">      <span class="number">1</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</span><br><span class="line"><span class="meta">          "use strict"</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 为避免内容过长，此部分略去</span></span><br><span class="line"></span><br><span class="line">          <span class="built_in">module</span>.exports = unique</span><br><span class="line"></span><br><span class="line">      &#125;,&#123;&#125;],</span><br><span class="line">      <span class="number">2</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">const</span> nums = <span class="built_in">require</span>(<span class="string">'./nums'</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(nums)</span><br><span class="line">      &#125;,&#123;<span class="string">"./nums"</span>:<span class="number">3</span>&#125;],</span><br><span class="line">      <span class="number">3</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> uniq = <span class="built_in">require</span>(<span class="string">'uniq'</span>);</span><br><span class="line">          <span class="keyword">var</span> nums = [ <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span> ];</span><br><span class="line"></span><br><span class="line">          <span class="built_in">module</span>.exports = nums</span><br><span class="line">      &#125;,&#123;<span class="string">"uniq"</span>:<span class="number">1</span>&#125;],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    [<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><h4 id="build-后文件运转方式"><a href="#build-后文件运转方式" class="headerlink" title="build 后文件运转方式"></a>build 后文件运转方式</h4><p>上面的编译后文件，顶部的压缩代码，来源于 <a href="https://github.com/browserify/browser-pack/blob/e5ca7eb5053a4fc6c7b198e1ac831e7f9c3b44d6/prelude.js" target="_blank" rel="noopener"><code>browser-pack</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modules are defined as an array</span></span><br><span class="line"><span class="comment">// [ module function, map of requireuires ]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// map of requireuires is short require name -&gt; numeric require</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// anything defined in a previous bundle is accessed via the</span></span><br><span class="line"><span class="comment">// orig method which is the requireuire for previous bundles</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params">modules, cache, entry</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Save the require from previous bundle to this closure if any</span></span><br><span class="line">    <span class="keyword">var</span> previousRequire = <span class="keyword">typeof</span> <span class="built_in">require</span> == <span class="string">"function"</span> &amp;&amp; <span class="built_in">require</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">newRequire</span>(<span class="params">name, jumped</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cache[name]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!modules[name]) &#123;</span><br><span class="line">                <span class="comment">// if we cannot find the module within our internal map or</span></span><br><span class="line">                <span class="comment">// cache jump to the current global require ie. the last bundle</span></span><br><span class="line">                <span class="comment">// that was added to the page.</span></span><br><span class="line">                <span class="keyword">var</span> currentRequire = <span class="keyword">typeof</span> <span class="built_in">require</span> == <span class="string">"function"</span> &amp;&amp; <span class="built_in">require</span>;</span><br><span class="line">                <span class="keyword">if</span> (!jumped &amp;&amp; currentRequire) <span class="keyword">return</span> currentRequire(name, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If there are other bundles on this page the require from the</span></span><br><span class="line">                <span class="comment">// previous one is saved to 'previousRequire'. Repeat this as</span></span><br><span class="line">                <span class="comment">// many times as there are bundles until the module is found or</span></span><br><span class="line">                <span class="comment">// we exhaust the require chain.</span></span><br><span class="line">                <span class="keyword">if</span> (previousRequire) <span class="keyword">return</span> previousRequire(name, <span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Cannot find module \''</span> + name + <span class="string">'\''</span>);</span><br><span class="line">                err.code = <span class="string">'MODULE_NOT_FOUND'</span>;</span><br><span class="line">                <span class="keyword">throw</span> err;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> m = cache[name] = &#123;<span class="attr">exports</span>:&#123;&#125;&#125;;</span><br><span class="line">            modules[name][<span class="number">0</span>].call(m.exports, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> id = modules[name][<span class="number">1</span>][x];</span><br><span class="line">                <span class="keyword">return</span> newRequire(id ? id : x);</span><br><span class="line">            &#125;,m,m.exports,outer,modules,cache,entry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache[name].exports;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;entry.length;i++) newRequire(entry[i]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Override the current require with this new one</span></span><br><span class="line">    <span class="keyword">return</span> newRequire;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> outer;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>上方的编译代码，即相当于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// step 1</span></span><br><span class="line">newRequire(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 2</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> nums = <span class="built_in">require</span>(<span class="string">'./nums'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nums)</span><br><span class="line">&#125;).call(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="comment">// name is 2</span></span><br><span class="line"><span class="comment">// x is './nums'</span></span><br><span class="line"><span class="comment">// id is 3</span></span><br><span class="line">    <span class="keyword">var</span> id = modules[name][<span class="number">1</span>][x];</span><br><span class="line">    <span class="keyword">return</span> newRequire(id ? id : x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 至于说，为什么这里要增加 outer, modules, cache, entry 这样的无用参数</span></span><br><span class="line"><span class="comment">// 可参考：https://github.com/browserify/browser-pack/issues/82</span></span><br><span class="line"><span class="comment">// 简单理解为：有其他用途</span></span><br><span class="line">&#125;, &#123; <span class="attr">exports</span>:&#123;&#125; &#125;, &#123;&#125;, outer, modules, cache, entry)</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 3, 4, 5, etc...</span></span><br></pre></td></tr></table></figure><p>以此类推，通过 <code>newRequire</code> 以及相应的 <code>modules</code> 编号，达到代码执行的目的。</p><h2 id="多入口文件编译"><a href="#多入口文件编译" class="headerlink" title="多入口文件编译"></a>多入口文件编译</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> browserify = <span class="built_in">require</span>(<span class="string">'browserify'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定入口即可</span></span><br><span class="line">[<span class="string">'./src/demo-1'</span>, <span class="string">'./src/demo-2'</span>].forEach(<span class="function"><span class="params">f</span> =&gt;</span> &#123;</span><br><span class="line">  browserify(f).bundle().pipe(fs.createWriteStream(f.replace(<span class="string">'./src'</span>, <span class="string">'./build'</span>) + <span class="string">'.js'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h4 id="entries"><a href="#entries" class="headerlink" title="entries"></a>entries</h4><p>同 browserify 第一个参数，files</p><h4 id="basedir"><a href="#basedir" class="headerlink" title="basedir"></a>basedir</h4><p>如果 <code>entries</code> / <code>files</code> 为 stream，需要指定 <code>basedir</code> 来让 browserify 可以处理内容中的相对路径</p><p>默认为 <code>.</code> 即当前脚本运行目录</p><h4 id="require"><a href="#require" class="headerlink" title="require"></a><del>require</del></h4><p>数组，通过模块名或文件路径指定需要打包到bundle中的其他模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">browserify(<span class="string">'demo-4'</span>, &#123;</span><br><span class="line">  basedir: <span class="string">'./src'</span>,</span><br><span class="line">  <span class="built_in">require</span>: [<span class="string">'./demo-3-module-2'</span>],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>适用于一些全局的处理，又没有模块依赖的内容</p><p>例如 <code>./demo-3-module-2</code> 内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.demo3Func = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 参数 <code>opts.require</code> 方式引入，那么所有被打包的文件，都会有此部分代码</p><h4 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h4><p><code>debug</code> 为 <code>true</code> 时，会将 sourcemap 添加到包的末尾</p><h4 id="ignoreMissing"><a href="#ignoreMissing" class="headerlink" title="ignoreMissing"></a><del>ignoreMissing</del></h4><p>默认为 <code>false</code>，即如果 <code>require</code> 的模块不存在时，会报错；如果设置为<code>false</code>，即忽略报错</p><h4 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h4><p>一个数组，跳过数组中每个文件的所有 <code>require</code> 和全局解析</p><p>适用于jquery或threejs等巨型、无需解析的库，避免解析耗时过长</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  noParse: [<span class="string">'jquery'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h4><p>一个数组，用于内容的相应转换。例如使用 uglifyify</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">browserify(f, &#123;</span><br><span class="line">    transform: [<span class="string">'babelify'</span>], <span class="comment">// babel 配置在 .babelrc 中指定</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">browserify(f, &#123;</span><br><span class="line">    transform: [[<span class="string">'babelify'</span>, &#123; <span class="attr">presets</span>: [<span class="string">'@babel/preset-env'</span>] &#125;]],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>数组的元素可以为字符串，或者数组（该数组第一项为使用的transform组件，第二项为该组件配置项）。</p><p>下方 plugin 等，同理。</p><h4 id="ignoreTransform"><a href="#ignoreTransform" class="headerlink" title="ignoreTransform"></a><del>ignoreTransform</del></h4><p>一个数组，用于过滤不需要做 <code>transform</code> 的 transform 控件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">browserify(f, &#123;</span><br><span class="line">    transform: [[<span class="string">'babelify'</span>, &#123; <span class="attr">presets</span>: [<span class="string">'@babel/preset-env'</span>] &#125;]],</span><br><span class="line">    ignoreTransform: [<span class="string">'babelify'</span>],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也就不会进行 <code>babelify</code> transform</p><p>这个参数没什么作用，其实如果不想进行转换，不把它放入 <code>transform</code> 内就好，不需要多此一举在 <code>transform</code> 中添加，又在 <code>ignoreTransform</code> 定义不进行转换</p><h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><p>插件数组。主要用于一些更高级的插件配置，增强 browserify 功能。</p><p>详见：<a href="https://github.com/browserify/browserify#plugins" target="_blank" rel="noopener">plugins</a> 或者下方一些示例</p><h4 id="extensions"><a href="#extensions" class="headerlink" title="extensions"></a>extensions</h4><p>参数可为字符串或数组。默认是 <code>[&#39;.js&#39;, &#39;.json&#39;]</code>，可以补充 <code>.ts</code>, <code>.jsx</code> 等等</p><h4 id="paths"><a href="#paths" class="headerlink" title="paths"></a>paths</h4><p>一个目录数组，用于在查找未使用相对路径引用的模块时浏览搜索，可以是绝对的或相对于basedir。调用browserify命令时，等效设置 <code>NODE_PATH</code> 环境变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">browserify(<span class="string">'./src/demo'</span>, &#123;</span><br><span class="line">    basedir: <span class="string">'./'</span>,</span><br><span class="line">    transform: [[<span class="string">'babelify'</span>, &#123; <span class="attr">presets</span>: [<span class="string">'@babel/preset-env'</span>] &#125;]],</span><br><span class="line">    paths: [<span class="string">'src'</span>], <span class="comment">// ./src 下的模块引用都不需要使用相对路径引用</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">browserify(<span class="string">'./demo'</span>, &#123;</span><br><span class="line">    basedir: <span class="string">'./src'</span>,</span><br><span class="line">    transform: [[<span class="string">'babelify'</span>, &#123; <span class="attr">presets</span>: [<span class="string">'@babel/preset-env'</span>] &#125;]],</span><br><span class="line">    paths: [<span class="string">'test'</span>], <span class="comment">// ./src/test 下的模块引用都不需要使用相对路径引用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>例如：原来 <code>require(&#39;./a&#39;)</code> 可以直接写为 <code>require(&#39;a&#39;)</code></p><h4 id="commondir"><a href="#commondir" class="headerlink" title="commondir"></a><del>commondir</del></h4><p>没什么作用的参数，要么不传递，要么传递 <code>false</code></p><p>目前看 <a href="https://github.com/browserify/browserify/blob/4190ed509f46a17b2071af2c58cea505e41f43b4/index.js#L616" target="_blank" rel="noopener">browserify index.js:616</a> 只会在 <code>builtIns</code> 为数组时，会将 <code>basedir</code> 设置为 <code>/</code></p><p>可能对 sourcemap 有一点影响，其他没什么作用</p><h4 id="fullPaths"><a href="#fullPaths" class="headerlink" title="fullPaths"></a><del>fullPaths</del></h4><p>布尔值，默认为 <code>false</code>，参考上方的分析代码，对应模块会被标记为数字 id，例如： <code>./nums: 0</code></p><p>如果设置为 true，不会转换为 id，而是以绝对路径形式展示。例如：<code>&quot;./nums&quot;:&quot;/Users/xxx/xxx/xxx/browserify-demo/src/nums.js&quot;</code>。官网文档描述其对于保留生成包的原始路径很有用，但是如果在生产环境下，需要设置为 <code>false</code>，否则可能会暴露一些信息</p><h4 id="standalone"><a href="#standalone" class="headerlink" title="standalone"></a><del>standalone</del></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// beep.js</span></span><br><span class="line"><span class="keyword">var</span> shout = <span class="built_in">require</span>(<span class="string">'./shout.js'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">beep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(shout(<span class="string">'beep'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shout.js </span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">shout</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.toUpperCase() + <span class="string">'!'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// build.js</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">'browserify'</span>);</span><br><span class="line"><span class="keyword">var</span> b = browserify(<span class="string">'./src/beep.js'</span>, &#123; <span class="attr">standalone</span>: <span class="string">'beep-boop'</span> &#125;);</span><br><span class="line">b.bundle().pipe(fs.createWriteStream(<span class="string">'./build/demo-5.js'</span>));</span><br></pre></td></tr></table></figure><p>如果使用 <code>standalone: &#39;beep-boop&#39;</code> 最终打包出来的内容，就不是 <a href="https://github.com/browserify/browser-pack/blob/e5ca7eb5053a4fc6c7b198e1ac831e7f9c3b44d6/prelude.js" target="_blank" rel="noopener"><code>browser-pack</code></a> 做的包裹，而是</p><p>这个 <a href="https://github.com/ForbesLindesay/umd/blob/master/template.js" target="_blank" rel="noopener">umd/template</a> 做的包裹，主要用来处理 requireJS 类似的调用方式，包括在全局下增加 变量。例如上方最终在全局下增加的 <code>beepBoop</code>（驼峰） 变量。</p><p>所以作为 standalone（“独立”）的模块，就目前9012年来说，没有什么意义。</p><p>参考：<a href="https://www.forbeslindesay.co.uk/post/46324645400/standalone-browserify-builds" target="_blank" rel="noopener">Standalone Browserify Builds</a></p><h4 id="externalRequireName"><a href="#externalRequireName" class="headerlink" title="externalRequireName"></a><del>externalRequireName</del></h4><p>文档不全，没什么用途，不要使用。需要搭配 <code>prelude</code> 参数（文档未描述）。参见：</p><ol><li><a href="https://github.com/browserify/browserify/blob/master/test/multi_bundle_unique.js#L13" target="_blank" rel="noopener">test/multi_bundle_unique</a></li><li><a href="https://github.com/browserify/browserify/issues/972" target="_blank" rel="noopener">opts.externalRequireName does not work in standalone mode</a></li></ol><h4 id="browserField"><a href="#browserField" class="headerlink" title="browserField"></a><del>browserField</del></h4><p>如果在项目中 package.json 中配置 browser 字段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"browser"</span>: &#123;</span><br><span class="line">    <span class="string">"ccc"</span>: <span class="string">"./src/ccc.js"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在代码源文件中，<code>require(&#39;ccc&#39;)</code> 会自动被处理成 <code>require(&#39;./src/ccc.js&#39;)</code></p><p>功能和 paths 类似，但是其主要用来<strong>替换</strong>原有的模块，而不是 <code>alias</code> 作用</p><p>而优先级方面，<code>paths</code> 的设置更高。不过，在使用上需要尽量避免<code>paths</code> 和 <code>browserField</code> 设置相同模块的情况，以免造成一些歧义和不可控的现象</p><p>为 <code>false</code> 时，将忽略 package.json 中这个字段</p><h4 id="builtins"><a href="#builtins" class="headerlink" title="builtins"></a><del>builtins</del></h4><p>设置要使用的内置函数列表，默认情况下为 <a href="https://github.com/browserify/browserify/blob/master/lib/builtins.js" target="_blank" rel="noopener"><code>lib/builtins.js</code></a></p><p>可为 <code>false</code>、<code>array</code>、<code>object</code></p><p>如果设置为 false，不会进行任何 Node 相关内容的设置</p><p>如果设置为 <code>array</code>，可以设置为 <a href="https://github.com/browserify/browserify/blob/master/lib/builtins.js" target="_blank" rel="noopener"><code>lib/builtins.js</code></a> 对应的 key name，例如： <code>[&#39;assert&#39;, &#39;buffer&#39;]</code> 代表只将此两部分作为内置内容</p><p>如果设置为 <code>Object</code>，将直接替换掉默认的 <a href="https://github.com/browserify/browserify/blob/master/lib/builtins.js" target="_blank" rel="noopener"><code>lib/builtins.js</code></a>，而采用用户的配置</p><p>详见：<a href="https://github.com/browserify/browserify/blob/4190ed509f46a17b2071af2c58cea505e41f43b4/index.js#L534" target="_blank" rel="noopener">builtins 代码逻辑</a></p><h4 id="bare"><a href="#bare" class="headerlink" title="bare"></a><del>bare</del></h4><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(__dirname)</span><br><span class="line"><span class="built_in">console</span>.log(process.env)</span><br></pre></td></tr></table></figure><p>默认为 <code>false</code>，会将 <code>__dirname</code>、<code>process.env</code> 设置为浏览器可运行的内容 （包含 <code>builtins</code> ）。<code>process.env</code> 会被设置为 <a href="https://github.com/defunctzombie/node-process/blob/master/browser.js" target="_blank" rel="noopener">node-process</a></p><p>设置为 <code>true</code> 时，同 <code>builtins = false, commondir = false</code>。创建一个不包含 Node builtins 的bundle，并且不设置除 <code>__dirname</code> 和 <code>__filename</code> 之外的全局 Node 变量。即 <code>process.env</code> 还是 <code>process.env</code>。而这样的处理，如果模块内有使用相关 Node 模块，浏览器端运行会直接报错</p><h4 id="node"><a href="#node" class="headerlink" title="node"></a><del>node</del></h4><p>默认为 <code>false</code></p><p>设置为 <code>true</code> 时，创建一个在 Node 中运行的bundle，不使用浏览器版本的依赖项。与传递 <code>{bare：true，browserField：false}</code> 相同。这个参数，一般也用不上，如果在 node 运行，也便不需要 browserify</p><h4 id="detectGlobals"><a href="#detectGlobals" class="headerlink" title="detectGlobals"></a><del>detectGlobals</del></h4><p>默认为 <code>true</code>，只在 <code>bare</code> 为 <code>false</code> 时作用。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(__dirname)</span><br><span class="line"><span class="built_in">console</span>.log(process.env)</span><br></pre></td></tr></table></figure><p>会进行模块扫描，上方 <code>__dirname</code> 和 <code>process.env</code> 的设置，是先通过检测，后设置，不设置其他多余内容。但是这样，检测的时间会长一些</p><p>如果将其设置为 <code>false</code>，类似 <code>bare</code> 设置为 <code>true</code>，不会进行  <code>__dirname</code> 和 <code>process.env</code> 的设置</p><h4 id="insertGlobals"><a href="#insertGlobals" class="headerlink" title="insertGlobals"></a><del>insertGlobals</del></h4><p>默认为 <code>false</code>，即不直接设置所有 Node 相关的内容，而是通过 <code>detectGlobals=true</code> 按需设置</p><p>如果设置为 <code>true</code>，会始终插入 Node 相关内容，而不做相应模块分析检测。提高了效率，但是打出来的包，内容也更大。但是<code>detectGlobals</code> 必须为 <code>true</code> 才能工作</p><p>其他一些作用的需要条件详见：<a href="https://github.com/browserify/browserify/blob/4190ed509f46a17b2071af2c58cea505e41f43b4/index.js#L572" target="_blank" rel="noopener">globalTr</a></p><h4 id="insertGlobalVars"><a href="#insertGlobalVars" class="headerlink" title="insertGlobalVars"></a><del>insertGlobalVars</del></h4><p>会被作为 <code>opts.vars</code> 传递给 <a href="https://github.com/browserify/insert-module-globals/blob/master/index.js" target="_blank" rel="noopener">insert-module-globals</a></p><p>格式可参考 <a href="https://github.com/browserify/insert-module-globals/blob/master/index.js#L27" target="_blank" rel="noopener">defaultVars</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  detectGlobals: <span class="literal">true</span>,</span><br><span class="line">  insertGlobalVars: &#123;</span><br><span class="line">    forTest: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'1111'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>detectGlobals</code> 需要为 <code>true</code>，这样才能检测文件内的 forTest 变量，并做相应设置</p><h4 id="bundleExternal"><a href="#bundleExternal" class="headerlink" title="bundleExternal"></a><del>bundleExternal</del></h4><p>默认为 <code>true</code>，代表内置的 <code>process</code>、<code>buffer</code> 是否可以设置进去</p><p>详见：<a href="https://github.com/browserify/browserify/blob/4190ed509f46a17b2071af2c58cea505e41f43b4/index.js#L608" target="_blank" rel="noopener">index.js#L608</a></p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  detectGlobals: <span class="literal">true</span>,</span><br><span class="line">  insertGlobal: <span class="literal">true</span>,</span><br><span class="line">  bundleExternal: <span class="literal">false</span>,</span><br><span class="line">  insertGlobalVars: &#123;</span><br><span class="line">    xxx: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'1111'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使 <code>detectGlobals</code>, <code>insertGlobal</code> 都为 <code>true</code>，也不会进行 <code>process</code> 和 <code>buffer</code> 的设置</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h4 id="b-add-file-opts"><a href="#b-add-file-opts" class="headerlink" title="b.add(file, opts)"></a>b.add(file, opts)</h4><p>同 <code>opts.entries</code> 参数</p><h4 id="b-require-file-opts"><a href="#b-require-file-opts" class="headerlink" title="b.require(file, opts)"></a>b.require(file, opts)</h4><p>同 <code>opts.require</code> 参数</p><h4 id="b-ignore-file-、b-external-file-、b-exclude-file"><a href="#b-ignore-file-、b-external-file-、b-exclude-file" class="headerlink" title="b.ignore(file)、b.external(file)、b.exclude(file)"></a><del>b.ignore(file)</del>、<del>b.external(file)</del>、<del>b.exclude(file)</del></h4><p>这三个方法，都是用来将 打包文件内的某个/某几个模块 移除编译内容，参数可为 <code>string</code>、<code>array</code></p><p>三个方法的区别，文档也没说清（browserify 文档太过简略）。大概如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br><span class="line">$(<span class="string">'body'</span>).css(<span class="string">'background'</span>, <span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ignore</span></span><br><span class="line">(&#123;</span><br><span class="line">  <span class="number">1</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</span><br><span class="line">  &#125;,&#123;&#125;],</span><br><span class="line">  <span class="number">2</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br><span class="line">    $(<span class="string">'body'</span>).css(<span class="string">'background'</span>, <span class="string">'red'</span>)</span><br><span class="line">  &#125;,&#123;<span class="string">"jquery"</span>:<span class="number">1</span>&#125;],</span><br><span class="line">&#125;, &#123;&#125;,[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// exclude</span></span><br><span class="line">(&#123;</span><br><span class="line">  <span class="number">1</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br><span class="line">  $(<span class="string">'body'</span>).css(<span class="string">'background'</span>, <span class="string">'red'</span>)</span><br><span class="line">  &#125;,&#123;<span class="string">"jquery"</span>:<span class="literal">undefined</span>&#125;]</span><br><span class="line">&#125;, &#123;&#125;,[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// external</span></span><br><span class="line">(&#123;</span><br><span class="line">  <span class="number">1</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br><span class="line">  $(<span class="string">'body'</span>).css(<span class="string">'background'</span>, <span class="string">'red'</span>)</span><br><span class="line">  &#125;,&#123;<span class="string">"jquery"</span>:<span class="string">"jquery"</span>&#125;]</span><br><span class="line">&#125;,&#123;&#125;,[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>理解大概是：</p><ol><li><code>ignore</code> 代表忽略，如果内部引用了，会将其模块作为作为空模块处理，模块的位置还在</li><li><code>exclude</code> 会将该模块直接移除，并且如果 <code>require</code>了的话，值为 <code>undefined</code></li><li><code>external</code> 会将该模块移除，但是对应的模块引入，还是会在运行时进行 <code>require(name)</code> 的形式，由全局的 require 进行其他模块依赖引入</li></ol><p>这么看，也只有 <code>external</code> 具备一定的实用性</p><h4 id="b-transform-tr-opts"><a href="#b-transform-tr-opts" class="headerlink" title="b.transform(tr, opts={})"></a>b.transform(tr, opts={})</h4><p>同 <code>opts.transform</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b.transform(<span class="string">'babelify'</span>, &#123; <span class="attr">presets</span>: [<span class="string">'@babel/preset-env'</span>] &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同</span></span><br><span class="line">browserify(<span class="string">'./src/demo'</span>, &#123;</span><br><span class="line">  transform: [[<span class="string">'babelify'</span>, &#123; <span class="attr">presets</span>: [<span class="string">'@babel/preset-env'</span>] &#125;]],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="b-plugin-plugin-opts"><a href="#b-plugin-plugin-opts" class="headerlink" title="b.plugin(plugin, opts)"></a>b.plugin(plugin, opts)</h4><p>同 <code>opts.plugin</code></p><h4 id="b-bundle-cb"><a href="#b-bundle-cb" class="headerlink" title="b.bundle(cb)"></a>b.bundle(cb)</h4><p>将内容以及内容内部的 <code>reuqire</code> 内容，一并打包进一个文件内</p><p>创建了一个可读流，用于 pipe 进可写流文件。例如：</p><p><code>b.bundle().pipe(fs.createWriteStream(&#39;./build/demo-7.js&#39;))</code></p><p><code>callback</code> 为可选项，参数为 <code>err, buf</code>，<code>buf</code> 为文件 <code>buffer</code> 内容，因此也就可以基于 <code>buf</code> 内容进行一些其他处理</p><h4 id="b-pipeline"><a href="#b-pipeline" class="headerlink" title="b.pipeline"></a><del>b.pipeline</del></h4><p>一个属性，使用 <a href="https://github.com/browserify/labeled-stream-splicer" target="_blank" rel="noopener">labeled-stream-splicer</a>，个人简单理解为将内容拆分为不同的分段，通过流的方式进行传递</p><p>一般来讲，如果不是写插件之类东西，单纯使用 browserify 层面上来说，用不到</p><p>对应的，browserify 内置了一些 label</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'record'</span> - save inputs to play back later on subsequent bundle() calls</span><br><span class="line"><span class="string">'deps'</span> - <span class="built_in">module</span>-deps</span><br><span class="line"><span class="string">'json'</span> - adds <span class="built_in">module</span>.exports= to the beginning <span class="keyword">of</span> json files</span><br><span class="line"><span class="string">'unbom'</span> - remove byte-order markers</span><br><span class="line"><span class="string">'unshebang'</span> - remove #! labels on the first line</span><br><span class="line"><span class="string">'syntax'</span> - check <span class="keyword">for</span> syntax errors</span><br><span class="line"><span class="string">'sort'</span> - sort the dependencies <span class="keyword">for</span> deterministic bundles</span><br><span class="line"><span class="string">'dedupe'</span> - remove duplicate source contents</span><br><span class="line"><span class="string">'label'</span> - apply integer labels to files</span><br><span class="line"><span class="string">'emit-deps'</span> - emit <span class="string">'dep'</span> event</span><br><span class="line"><span class="string">'debug'</span> - apply source maps</span><br><span class="line"><span class="string">'pack'</span> - browser-pack</span><br><span class="line"><span class="string">'wrap'</span> - apply final wrapping, <span class="built_in">require</span>= and a newline and semicolon</span><br></pre></td></tr></table></figure><p>可以通过 <code>b.pipeline.get(label)</code> 的方式获取，并对其进行相应的处理</p><h4 id="b-reset-opts"><a href="#b-reset-opts" class="headerlink" title="b.reset(opts)"></a><del>b.reset(opts)</del></h4><p>将流恢复到 <code>bundle()</code> 前的状态，主要用于需要多次 <code>bundle()</code> 的场景</p><p>实际每次 <code>bundle()</code> 调用后，<code>reset()</code> 都会自动执行，所以这个方法在实际使用过程中，可能也没有太大的用处</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = browserify(<span class="string">'./src/beep.js'</span>, &#123;</span><br><span class="line">  debug: <span class="literal">true</span>,</span><br><span class="line">  commondir: <span class="literal">false</span>,</span><br><span class="line">  builtins: [],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">b</span><br><span class="line">.transform(<span class="string">'uglifyify'</span>, &#123; <span class="attr">global</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">.bundle().pipe(fs.createWriteStream(<span class="string">'./build/demo-6.js'</span>));</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  b.bundle().pipe(fs.createWriteStream(<span class="string">'./build/demo-7.js'</span>));</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>上方 打包出来 demo-6、demo-7 内容是完全一致的</p><p>或者参考 <a href="https://github.com/browserify/browserify/blob/4190ed509f46a17b2071af2c58cea505e41f43b4/test/reset.js" target="_blank" rel="noopener">browserify/test/reset.js</a></p><h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a><del>其他工具</del></h2><p>更多的工具，可见 <a href="https://github.com/browserify/awesome-browserify#tools" target="_blank" rel="noopener">awesome-browserify#tools</a>，此处取一部分代表性内容</p><h4 id="budo"><a href="#budo" class="headerlink" title="budo"></a>budo</h4><p>启动 http 服务器，进行相应 browserify 打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">budo ./beep.js --live --open</span><br></pre></td></tr></table></figure><p>如果 index.html 内，引用 <code>&lt;script src=&quot;./beep.js&quot;&gt;&lt;/script&gt;</code>，最终启动的服务便是这个 index.html，以及实时打包的 <code>http://127.0.0.1:9966/beep.js</code> 文件</p><p>内容类似如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/budo/livereload.js"</span> <span class="attr">async</span>=<span class="string">""</span> <span class="attr">defer</span>=<span class="string">""</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"beep.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="envify"><a href="#envify" class="headerlink" title="envify"></a>envify</h4><p>给 <code>process.env</code> 添加环境变量替换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b.transform(envify(&#123;</span><br><span class="line">  <span class="comment">// 将 process.env 其他字段设置为 undefined</span></span><br><span class="line">  _: <span class="string">'purge'</span>,</span><br><span class="line">  <span class="comment">// process.env.NODE_ENV 会被自动替换为 'development'，而不是在运行时获取 process.env.NODE_ENV 值</span></span><br><span class="line">  NODE_ENV: <span class="string">'development'</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h4 id="babelify"><a href="#babelify" class="headerlink" title="babelify"></a>babelify</h4><p>因为 browserify 只处理文件相关依赖引入，不处理文件的 es6 转换，因此如果需要使用 es6、es7 语法，需要经过 babelify 进行转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'./src/demo-1'</span>, <span class="string">'./src/demo-2'</span>].forEach(<span class="function"><span class="params">f</span> =&gt;</span> &#123;</span><br><span class="line">  browserify(f)</span><br><span class="line">    .transform(<span class="string">'babelify'</span>, &#123; <span class="attr">presets</span>: [<span class="string">'@babel/preset-env'</span>] &#125;)</span><br><span class="line">    .bundle()</span><br><span class="line">    .pipe(fs.createWriteStream(f.replace(<span class="string">'./src'</span>, <span class="string">'./build'</span>) + <span class="string">'.js'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="tsify"><a href="#tsify" class="headerlink" title="tsify"></a><del>tsify</del></h4><p>因为 browserify 只处理文件相关依赖引入，如果想要使用 typescript 编写浏览器端代码，需要进行相应转换</p><p>但是原则上，其实也可以通过 gulp-babel 的方式进行处理，因为：</p><ol><li>babel 7 支持了 typescript 的转换</li><li>gulp-babel 也是基于流</li></ol><p>或者，通过 gulp-typescript 进行处理，理由同上</p><h4 id="uglifyify"><a href="#uglifyify" class="headerlink" title="uglifyify"></a>uglifyify</h4><p>代码丑化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'./src/demo-1'</span>, <span class="string">'./src/demo-2'</span>].forEach(<span class="function"><span class="params">f</span> =&gt;</span> &#123;</span><br><span class="line">  browserify(f)</span><br><span class="line">    .transform(<span class="string">'uglifyify'</span>, &#123; <span class="attr">global</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .bundle()</span><br><span class="line">    .pipe(fs.createWriteStream(f.replace(<span class="string">'./src'</span>, <span class="string">'./build'</span>) + <span class="string">'.js'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="tinyify"><a href="#tinyify" class="headerlink" title="tinyify"></a><del>tinyify</del></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b.plugin(<span class="string">'tinyify'</span>, &#123;</span><br><span class="line">  env: &#123;</span><br><span class="line">    PUBLIC_PATH: <span class="string">'https://mywebsite.surge.sh/'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以下用到的插件的整合版本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b</span><br><span class="line">    .transform(<span class="string">'unassertify'</span>, &#123; <span class="attr">global</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .transform(<span class="string">'envify'</span>, &#123; <span class="attr">global</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .transform(<span class="string">'uglifyify'</span>, &#123; <span class="attr">global</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .plugin(<span class="string">'common-shakeify'</span>)</span><br><span class="line">    .plugin(<span class="string">'browser-pack-flat/plugin'</span>)</span><br><span class="line">    .bundle()</span><br><span class="line">    .pipe(<span class="built_in">require</span>(<span class="string">'minify-stream'</span>)(&#123; <span class="attr">sourceMap</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">    .pipe(fs.createWriteStream(<span class="string">'./output.js'</span>))</span><br></pre></td></tr></table></figure></p><h4 id="watchify"><a href="#watchify" class="headerlink" title="watchify"></a>watchify</h4><p>检测改动，自动编译</p><p>作为插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = browserify(<span class="string">'./demo-2'</span>, &#123;</span><br><span class="line">  basedir: <span class="string">'src'</span>,</span><br><span class="line">  debug: <span class="literal">true</span>,</span><br><span class="line">  paths: [<span class="string">'./'</span>],</span><br><span class="line">  fullPaths: <span class="literal">true</span>,</span><br><span class="line">  plugin: [[<span class="string">'watchify'</span>, &#123;</span><br><span class="line">    delay: <span class="number">100</span>,</span><br><span class="line">    ignoreWatch: [<span class="string">'**/node_modules/**'</span>],</span><br><span class="line">    poll: <span class="literal">false</span></span><br><span class="line">  &#125;]]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">b.on(<span class="string">'update'</span>, bundle)</span><br><span class="line">bundle()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bundle</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">  b</span><br><span class="line">    .transform(<span class="string">'babelify'</span>, &#123; <span class="attr">presets</span>: [<span class="string">'@babel/preset-env'</span>] &#125;)</span><br><span class="line">    .transform(<span class="string">'uglifyify'</span>, &#123; <span class="attr">global</span>: <span class="literal">true</span>, <span class="attr">sourceMap</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .bundle()</span><br><span class="line">    .on(<span class="string">'error'</span>, <span class="built_in">console</span>.error)</span><br><span class="line">    .pipe(fs.createWriteStream(<span class="string">'./build/demo-5.js'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = watchify(browserify(<span class="string">'./demo-2'</span>, &#123;</span><br><span class="line">  basedir: <span class="string">'src'</span>,</span><br><span class="line">  debug: <span class="literal">true</span>,</span><br><span class="line">  paths: [<span class="string">'./'</span>],</span><br><span class="line">  fullPaths: <span class="literal">true</span>,</span><br><span class="line">&#125;), &#123;</span><br><span class="line">  delay: <span class="number">100</span>,</span><br><span class="line">  ignoreWatch: [<span class="string">'**/node_modules/**'</span>],</span><br><span class="line">  poll: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">b.on(<span class="string">'update'</span>, bundle)</span><br><span class="line">bundle()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bundle</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">  b</span><br><span class="line">  .transform(<span class="string">'babelify'</span>, &#123; <span class="attr">presets</span>: [<span class="string">'@babel/preset-env'</span>] &#125;)</span><br><span class="line">  .transform(<span class="string">'uglifyify'</span>, &#123; <span class="attr">global</span>: <span class="literal">true</span>, <span class="attr">sourceMap</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  .bundle()</span><br><span class="line">  .on(<span class="string">'error'</span>, <span class="built_in">console</span>.error)</span><br><span class="line">  .pipe(fs.createWriteStream(<span class="string">'./build/demo-5.js'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附：<a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/fast-browserify-builds-with-watchify.md" target="_blank" rel="noopener">Fast browserify builds with watchify</a></p><h4 id="css-modulesify"><a href="#css-modulesify" class="headerlink" title="css-modulesify"></a>css-modulesify</h4><p>如其名 <a href="https://github.com/css-modules/css-modulesify" target="_blank" rel="noopener">css-modulesify</a>，使用它可以在 js 中 <code>require</code> css 内容</p><h4 id="brfs"><a href="#brfs" class="headerlink" title="brfs"></a>brfs</h4><p>使用 <a href="https://github.com/browserify/brfs" target="_blank" rel="noopener">brfs</a>，可以达到 js 中 <code>require</code> html 类似的效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = fs.readFileSync(__dirname + <span class="string">'/robot.html'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终转换为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="string">"&lt;b&gt;beep boop&lt;/b&gt;\n"</span>;</span><br></pre></td></tr></table></figure><h4 id="browserify-hmr"><a href="#browserify-hmr" class="headerlink" title="browserify-hmr"></a><del>browserify-hmr</del></h4><p>browserify 本身是基于流，效率比较高。热更新的用处不大，而且根据 <a href="https://github.com/Macil/browserify-hmr#browserify-hmr" target="_blank" rel="noopener">README.md</a> 内作者描述，此插件还是存在不少问题</p><h4 id="factor-bundle"><a href="#factor-bundle" class="headerlink" title="factor-bundle"></a>factor-bundle</h4><p>拆包：将 x、y 共用部分，打包进 <code>common.js</code>，有一定的实用性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">browserify([ <span class="string">'./files/x.js'</span>, <span class="string">'./files/y.js'</span> ])</span><br><span class="line">  .plugin(<span class="string">'factor-bundle'</span>, &#123; <span class="attr">outputs</span>: [ <span class="string">'bundle/x.js'</span>, <span class="string">'bundle/y.js'</span> ] &#125;)</span><br><span class="line">  .bundle().pipe(fs.createWriteStream(<span class="string">'bundle/common.js'</span>))</span><br></pre></td></tr></table></figure><h2 id="和-gulp-对比"><a href="#和-gulp-对比" class="headerlink" title="和 gulp 对比"></a>和 gulp 对比</h2><h4 id="gulp-缺陷"><a href="#gulp-缺陷" class="headerlink" title="gulp 缺陷"></a>gulp 缺陷</h4><ol><li>gulp 没有相关 <code>require</code> 引用处理的能力</li><li><p>如果单纯只用 gulp，相应模块之间的拆分，只能通过全局变量的方式进行管理，相对来说比较混乱。例如：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a module</span></span><br><span class="line"><span class="built_in">window</span>.lib.someFunc = xxx</span><br><span class="line"></span><br><span class="line"><span class="comment">// b module</span></span><br><span class="line"><span class="built_in">window</span>.lib.someFunc()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包</span></span><br><span class="line">gulp.src([<span class="string">'a.js'</span>, <span class="string">'b.js'</span>])</span><br></pre></td></tr></table></figure></li></ol><h4 id="browserify-优势与缺陷"><a href="#browserify-优势与缺陷" class="headerlink" title="browserify 优势与缺陷"></a>browserify 优势与缺陷</h4><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><ol><li><p>而如果用 browserify，因为模块之间的引用，通过 <code>require</code> 完成。与 node 模块编写方式一致，此外，入口文件只需要一个。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// a module</span></span><br><span class="line">exports.someFunc = xxx</span><br><span class="line"></span><br><span class="line"><span class="comment">// b module</span></span><br><span class="line"><span class="keyword">const</span> &#123; someFunc &#125; = <span class="built_in">require</span>(<span class="string">'./a'</span>)</span><br><span class="line">someFunc()</span><br><span class="line"></span><br><span class="line">browserify([<span class="string">'./b'</span>])</span><br><span class="line">  .bundle()</span><br><span class="line">  .pipe(fs.createWriteStream(<span class="string">'./build/b.js'</span>))</span><br></pre></td></tr></table></figure></li></ol><h5 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h5><ol><li>以 <code>js</code> 作为入口文件，缺乏 <code>css</code>、<code>html</code> 等处理能力</li></ol><h4 id="一起使用"><a href="#一起使用" class="headerlink" title="一起使用"></a>一起使用</h4><p>而因为他们都是基于流的处理，因此可以通过流相关的工具，例如 <code>vinyl-source-stream</code>、<code>through2</code> 进行相应转换，来达到共用的目的</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>基于其与 gulp 的比较，个人认为 <strong>最好的方式</strong> 是在 gulp 中集成 browserify 功能（将 browserify 作为 gulp 的一个扩展），只用于 <code>require</code> 相关处理</p><p>这样，可以结合双方的优点，并且避免了双方的缺陷</p><p>而像 babel、typescript 相关转换以及 sourcemap、minify 等等功能，交给 gulp 相关插件</p><p>gulp 对应的 browserify 插件：<a href="https://github.com/ngryman/gulp-bro" target="_blank" rel="noopener"><code>gulp-bro</code></a></p><p>代码也比较简单，仅仅是对于流进行了相应转换 <a href="https://github.com/ngryman/gulp-bro/blob/master/index.js" target="_blank" rel="noopener">gulp-bro 源码</a></p><p>最后，此文对 browserify 做的部分介绍，相关配置、插件其实已经过时而没有太大存在和深究的意义</p><p>此外，</p><ol><li>browserify 的配置很多，而且很多都重复功能</li><li>browserify 基本上也只有浏览器前端才会需要使用，也就没必要用到太多的无用配置。例如：<code>bare, builtins, detectGlobals, insertGlobals, insertGlobalVars</code> 等等配置都应该移除</li><li>原 <code>gulp-browserify</code> 已经停止维护，像其他的一些 browserify 工具，也都很少再有更新</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;大概介绍&quot;&gt;&lt;a href=&quot;#大概介绍&quot; class=&quot;headerlink&quot; title=&quot;大概介绍&quot;&gt;&lt;/a&gt;大概介绍&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;浏览器端&lt;/strong&gt;的前端&lt;strong&gt;打包&lt;/strong&gt;工具&lt;/li&gt;
&lt;li&gt;主要用于在浏览器中使用 npm 包，最终会转换为 commonJS (require) 类似方式，在浏览器使用&lt;/li&gt;
&lt;li&gt;方便模块细分，每个模块自成，通过 &lt;code&gt;require&lt;/code&gt; 引用其他模块&lt;/li&gt;
&lt;li&gt;基于流 &lt;code&gt;Stream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;旧时代产物，尽管也能勉强处理 css（&lt;a href=&quot;https://github.com/browserify/awesome-browserify#css-bundlers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSS bundlers&lt;/a&gt;），html（&lt;a href=&quot;https://github.com/browserify/brfs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;brfs&lt;/a&gt;），但是不太友好，且年久失修&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;阅读此篇，大概可以较好使用 browserify，以及将其用在合适的地方&lt;/p&gt;
&lt;p&gt;此外，文中带 &lt;del&gt;删除线&lt;/del&gt; 的内容，因相对的内容过时，阅读意义不大，可简单跳过&lt;/p&gt;
    
    </summary>
    
      <category term="总结系列" scheme="http://xaber.co/categories/%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="前端工程化" scheme="http://xaber.co/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="能力" scheme="http://xaber.co/tags/%E8%83%BD%E5%8A%9B/"/>
    
      <category term="browserify" scheme="http://xaber.co/tags/browserify/"/>
    
  </entry>
  
  <entry>
    <title>react-native-auto-fade-images</title>
    <link href="http://xaber.co/2019/07/22/react-native-auto-fade-images/"/>
    <id>http://xaber.co/2019/07/22/react-native-auto-fade-images/</id>
    <published>2019-07-22T13:14:19.000Z</published>
    <updated>2019-07-22T13:30:16.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>N 张图片，每间隔一段时间隐藏一张，后显示第二张，依次过渡</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>绝对定位</li><li>使用两个 <code>Image</code> 组件</li><li>在第一个 <code>Image</code> <code>fadeOut</code> 完成后，将第一个 <code>Image source</code> 设置为 下一张图片。此时状态：隐藏<code>opacity: 0</code>的第二张图片，盖住一张显示<code>opacity: 1</code>的第二张图片</li><li>第一个 <code>Image</code> 组件从隐藏<code>opacity: 0</code>变更为显示<code>opacity: 1</code>，并设置第二个 <code>Image</code> 组件 <code>source</code> 为 第三张图片。此时状态：显示的第二张图片，盖住一张显示的第三章图片。</li><li>开始 <code>fadeOut</code> 动画，重复 3、4、5 步骤</li></ol><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; View, Image, StyleSheet &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Animatable <span class="keyword">from</span> <span class="string">'react-native-animatable'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  image: &#123;</span><br><span class="line">    position: <span class="string">'absolute'</span>,</span><br><span class="line">    top: <span class="number">0</span>,</span><br><span class="line">    left: <span class="number">0</span>,</span><br><span class="line">    zIndex: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  animateImage: &#123;</span><br><span class="line">    position: <span class="string">'absolute'</span>,</span><br><span class="line">    top: <span class="number">0</span>,</span><br><span class="line">    left: <span class="number">0</span>,</span><br><span class="line">    zIndex: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Props &#123;</span><br><span class="line">  containerStyle: <span class="built_in">Object</span></span><br><span class="line">  imageStyle: <span class="built_in">Object</span></span><br><span class="line">  sources: <span class="built_in">any</span>[]</span><br><span class="line">  animDuration: <span class="built_in">number</span></span><br><span class="line">  holdDuration: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> State &#123;</span><br><span class="line">  current: <span class="built_in">number</span></span><br><span class="line">  paused: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="keyword">extends</span> React.Component&lt;Props, State&gt; &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    current: <span class="number">0</span>,</span><br><span class="line">    paused: <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  animateImage: <span class="built_in">any</span></span><br><span class="line">  timer: <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.startAnimation()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getNextIndex = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; sources &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">const</span> &#123; current &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> current === sources.length - <span class="number">1</span> ? <span class="number">0</span> : current + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.timer &amp;&amp; clearTimeout(<span class="keyword">this</span>.timer)</span><br><span class="line">    <span class="keyword">this</span>.animateImage &amp;&amp; <span class="keyword">this</span>.animateImage.stopAnimation()</span><br><span class="line">    <span class="keyword">this</span>.animateImage = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  startAnimation = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; animDuration &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.animateImage) &#123;</span><br><span class="line">      <span class="keyword">this</span>.animateImage.transitionTo(&#123;</span><br><span class="line">        opacity: <span class="number">0</span>,</span><br><span class="line">      &#125;, animDuration, <span class="string">'ease-out'</span>)</span><br><span class="line">      <span class="keyword">this</span>.timer &amp;&amp; clearTimeout(<span class="keyword">this</span>.timer)</span><br><span class="line">      <span class="keyword">this</span>.timer = setTimeout(<span class="keyword">this</span>.onAnimateEnd, animDuration)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onAnimateEnd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; holdDuration &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="comment">// 先停留一下，等 Animatable.Image 设置成和 下一张图片一样的图片</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; paused: <span class="literal">true</span> &#125;, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.animateImage) &#123;</span><br><span class="line">        <span class="comment">// 再将这张相同的图片显示出来，避免直接设置造成闪烁的问题</span></span><br><span class="line">        <span class="keyword">this</span>.animateImage.transitionTo(&#123; opacity: <span class="number">1</span> &#125;)</span><br><span class="line">        <span class="keyword">this</span>.timer &amp;&amp; clearTimeout(<span class="keyword">this</span>.timer)</span><br><span class="line">        <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.setState(&#123; paused: <span class="literal">false</span>, current: <span class="keyword">this</span>.getNextIndex() &#125;)</span><br><span class="line">          <span class="keyword">this</span>.startAnimation()</span><br><span class="line">        &#125;, holdDuration)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; containerStyle, imageStyle, sources &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">if</span> (!sources || !sources.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sources.length === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &lt;View style=&#123;containerStyle&#125;&gt;</span><br><span class="line">        &lt;Image source=&#123;sources[<span class="number">0</span>]&#125; style=&#123;[styles.image, imageStyle]&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    const &#123; current, paused &#125; = this.state</span></span><br><span class="line"><span class="regexp">    const next = this.getNextIndex()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    return &lt;View style=&#123;containerStyle&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Animatable.Image</span></span><br><span class="line"><span class="regexp">          ref=&#123;ref =&gt; this.animateImage = ref&#125;</span></span><br><span class="line"><span class="regexp">          style=&#123;[styles.animateImage, imageStyle]&#125;</span></span><br><span class="line"><span class="regexp">          useNativeDriver=&#123;true&#125;</span></span><br><span class="line"><span class="regexp">          source=&#123;sources[paused ? next : current]&#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">      &lt;Image source=&#123;sources[next]&#125; style=&#123;[styles.image, imageStyle]&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><ol><li><code>sources</code> 属性长度需不可变，否则会引发意外情况</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h2&gt;&lt;p&gt;N 张图片，每间隔一段时间隐藏一张，后显示第二张，依次过渡&lt;/p&gt;
    
    </summary>
    
      <category term="react-native" scheme="http://xaber.co/categories/react-native/"/>
    
    
      <category term="react-native" scheme="http://xaber.co/tags/react-native/"/>
    
      <category term="animation" scheme="http://xaber.co/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>node 代理转发与 Google Cloud、域名配置</title>
    <link href="http://xaber.co/2018/12/28/node-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91%E4%B8%8E-Google-Cloud%E3%80%81%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/"/>
    <id>http://xaber.co/2018/12/28/node-代理转发与-Google-Cloud、域名配置/</id>
    <published>2018-12-27T16:15:03.000Z</published>
    <updated>2019-07-11T03:20:43.768Z</updated>
    
    <content type="html"><![CDATA[<p>此文介绍 node 简单搭建一个代理转发服务，部署至 Google Cloud 服务器，并为该服务绑定域名。</p><a id="more"></a><h3 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h3><p>需要访问的域名被拦截在墙外，而代码部署的服务器在墙内，无法访问外网服务。</p><h3 id="node-搭建服务"><a href="#node-搭建服务" class="headerlink" title="node 搭建服务"></a>node 搭建服务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>)</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">80</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'*'</span>, proxy(&#123;</span><br><span class="line">  target: <span class="string">'https://api.proxydemo.com/'</span>,</span><br><span class="line">  changeOrigin: <span class="literal">true</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.listen(port)</span><br></pre></td></tr></table></figure><h3 id="Google-Cloud"><a href="#Google-Cloud" class="headerlink" title="Google Cloud"></a>Google Cloud</h3><ol><li>Compute Engine 创建 vm 实例</li><li>SSH 连接服务器</li><li>部署上方 node 服务</li><li>生成（一般会自动生成）静态 IP 地址（外部 IP） <code>xxx.xxx.xxx.xxx</code></li></ol><h3 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h3><p>配置域名 <code>https://api.proxymiddle.com/</code> 解析至 <code>xxx.xxx.xxx.xxx</code></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>请求 <code>https://api.proxymiddle.com/</code> 查看最终结果是否为墙外 <code>https://api.proxydemo.com/</code> 的返回结果</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文介绍 node 简单搭建一个代理转发服务，部署至 Google Cloud 服务器，并为该服务绑定域名。&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="http://xaber.co/categories/node/"/>
    
    
      <category term="proxy" scheme="http://xaber.co/tags/proxy/"/>
    
      <category term="node" scheme="http://xaber.co/tags/node/"/>
    
      <category term="http-proxy-middleware" scheme="http://xaber.co/tags/http-proxy-middleware/"/>
    
  </entry>
  
  <entry>
    <title>Ganache 与 Truffle 介绍</title>
    <link href="http://xaber.co/2018/06/21/Ganache-%E4%B8%8E-Truffle-%E4%BB%8B%E7%BB%8D/"/>
    <id>http://xaber.co/2018/06/21/Ganache-与-Truffle-介绍/</id>
    <published>2018-06-21T11:36:28.000Z</published>
    <updated>2018-06-21T11:39:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ganache"><a href="#Ganache" class="headerlink" title="Ganache"></a>Ganache</h2><p>主要功能为在本地启动一个以太坊私有网络，并在一开始，创建10个account，供开发者使用。</p><p>下载开箱即用 <a href="https://truffleframework.com/ganache" target="_blank" rel="noopener">ganache</a></p><h2 id="Truffle"><a href="#Truffle" class="headerlink" title="Truffle"></a>Truffle</h2><p>官网介绍：以太坊智能合约开发、测试的一把瑞士军刀。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>npm install -g truffle</code></p><h3 id="教程系列"><a href="#教程系列" class="headerlink" title="教程系列"></a>教程系列</h3><p>运行完以下四个教程，基本能掌握 <code>truffle</code> 的大致用法（此文可不看）。</p><ol><li><a href="https://truffleframework.com/tutorials/debugger-variable-inspection" target="_blank" rel="noopener">VARIABLE INSPECTION: GOING DEEPER WITH THE TRUFFLE SOLIDITY DEBUGGER</a></li><li><a href="https://truffleframework.com/tutorials/debugging-a-smart-contract" target="_blank" rel="noopener">DEBUGGING A SMART CONTRACT</a></li><li><a href="https://truffleframework.com/tutorials/robust-smart-contracts-with-openzeppelin" target="_blank" rel="noopener">BUILDING ROBUST SMART CONTRACTS WITH OPENZEPPELIN</a></li><li><a href="https://truffleframework.com/tutorials/pet-shop" target="_blank" rel="noopener">ETHEREUM PET SHOP</a></li></ol><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>truffle init</code> 通过脚本工具创建一个初始化，里面包含</p><ol><li><code>contracts</code></li><li><code>migrations</code></li><li><code>tests</code></li><li><code>truffle.js</code></li></ol><p>其中 <code>truffle.js</code> 中配置项，用于连接对应的网络。例如 <code>Ganache</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// See &lt;http://truffleframework.com/docs/advanced/configuration&gt;</span></span><br><span class="line">  <span class="comment">// for more about customizing your Truffle configuration!</span></span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">      host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      port: <span class="number">7545</span>,</span><br><span class="line">      network_id: <span class="string">"*"</span> <span class="comment">// Match any network id</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>contracts</code> 目录下编写智能合约。</p><p><code>migrations</code> 目录下对应文件用于部署智能合约到区块链上，以 1、2、3… 等序号开头。</p><p><code>test</code> 目录下，用于编写测试。支持 智能合约<code>.sol</code>的测试，以及支持使用 <code>javascript</code> 进行测试（使用 <a href="https://github.com/mochajs/mocha" target="_blank" rel="noopener">mocha</a> 和 <a href="https://github.com/chaijs/chai" target="_blank" rel="noopener">chai</a>）。</p><h3 id="truffle-boxes"><a href="#truffle-boxes" class="headerlink" title="truffle boxes"></a>truffle boxes</h3><p><code>truffle init</code> 构建一个空项目。而 <code>truffle unbox &lt;boxname&gt;</code> 用于从远程仓库拉一个box下来做初始化。</p><p>当前已有的 box 列表见：<a href="https://truffleframework.com/boxes" target="_blank" rel="noopener">TRUFFLE BOXES</a></p><h3 id="truffle-compile"><a href="#truffle-compile" class="headerlink" title="truffle compile"></a>truffle compile</h3><p><code>truffle compile</code> 编译 <code>contracts</code> 目录下 <code>.sol</code> 文件，在 <code>build/contracts</code> 目录下生成对应 artifacts JSON 文件。</p><p>如果需要重新编译，使用 <code>truffle compile --all</code></p><p>其他内容具体见：<a href="https://truffleframework.com/docs/getting_started/compile" target="_blank" rel="noopener">COMPILING CONTRACTS</a></p><h3 id="truffle-migrate"><a href="#truffle-migrate" class="headerlink" title="truffle migrate"></a>truffle migrate</h3><p><code>truffle migrate</code> 按照 <code>migrations</code> 下的序号命名顺序，进行调用并部署。</p><p>此部分功能，主要使用 <a href="https://github.com/trufflesuite/truffle-contract" target="_blank" rel="noopener">truffle-contract</a> 工具实现。</p><p>一般形态为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Migrations = artifacts.require(<span class="string">"./Migrations.sol"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Migrations);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>artifacts</code> 是 <code>truffle-contract</code> 提供的功能，<code>require</code> 需要是 <code>contracts/&lt;name&gt;.sol</code> 文件中同名的 <code>name</code></p><p>而如果同一个<code>.sol</code>文件中，定义了两个 <code>contract</code>，可通过 <code>require(&lt;contract-name&gt;)</code> 的形式来引入。</p><p><code>function</code> 除了接收 <code>deployer</code> 之外，还接收 <code>network</code> 参数，<code>deployer.deploy</code> 也支持其他的参数形式传递。</p><p>具体见：<a href="https://truffleframework.com/docs/getting_started/migrations" target="_blank" rel="noopener">RUNNING MIGRATIONS</a></p><h3 id="truffle-test"><a href="#truffle-test" class="headerlink" title="truffle test"></a>truffle test</h3><p>详见：</p><ol><li><a href="https://truffleframework.com/docs/getting_started/testing" target="_blank" rel="noopener">TESTING YOUR CONTRACTS</a></li><li><a href="https://truffleframework.com/docs/getting_started/javascript-tests" target="_blank" rel="noopener">WRITING TESTS IN JAVASCRIPT</a></li><li><a href="https://truffleframework.com/docs/getting_started/solidity-tests" target="_blank" rel="noopener">WRITING TESTS IN SOLIDITY</a></li></ol><h3 id="packages"><a href="#packages" class="headerlink" title="packages"></a>packages</h3><p><code>import</code> 优先引用 <code>.sol</code> 模块（同名情况下）</p><h3 id="contract-packages"><a href="#contract-packages" class="headerlink" title="contract packages"></a>contract packages</h3><h4 id="ethpm"><a href="#ethpm" class="headerlink" title="ethpm"></a>ethpm</h4><p><code>truffle install &lt;eth-package-name&gt;</code></p><p>包列表（界面较为简陋，基本没什么人提交，时间戳还是错的，文件存在 ipfs 上）—— <a href="https://www.ethpm.com/registry/packages" target="_blank" rel="noopener">Ethereum Package Management</a></p><p>更多内容见：<a href="https://truffleframework.com/docs/getting_started/packages-ethpm" target="_blank" rel="noopener">PACKAGE MANAGEMENT VIA ETHPM</a></p><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><p>一些example contracts 可直接拿来使用：<a href="https://github.com/ConsenSys/example-truffle-library" target="_blank" rel="noopener">example-truffle-library</a> —— 包已经被移除了 😊</p><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ol><li>教程 <a href="https://truffleframework.com/tutorials/debugger-variable-inspection" target="_blank" rel="noopener">VARIABLE INSPECTION: GOING DEEPER WITH THE TRUFFLE SOLIDITY DEBUGGER</a></li><li>文档 <a href="https://truffleframework.com/docs/getting_started/debugging" target="_blank" rel="noopener">DEBUGGING YOUR CONTRACTS</a></li></ol><h3 id="Console-与-debug"><a href="#Console-与-debug" class="headerlink" title="Console 与 debug"></a>Console 与 debug</h3><p><code>truffle console</code>、<code>truffle develop</code> 都是进入 <code>truffle</code> 环境，相应的 <code>compile</code> 等命令，只需要敲一个 <code>compile</code> 即可，不需要 <code>truffle compile</code></p><p>另外一些高级选项，如在写、调试智能合约，如果有需要，可以再参考配置与更多参数选项 —— 见 <strong>ADVANCED</strong> 部分。<a href="https://truffleframework.com/docs/advanced/configuration" target="_blank" rel="noopener">CONFIGURATION</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><a href="https://github.com/trufflesuite/truffle-hdwallet-provider" target="_blank" rel="noopener">truffle-hdwallet-provider</a> 通过助记词构建一个 web3 provider。</li><li><a href="https://github.com/OpenZeppelin/openzeppelin-solidity" target="_blank" rel="noopener">openzeppelin-solidity</a> 已存在的、安全的智能合约通用代码，例如 <code>SafeMath</code> 等，降低出问题的风险。</li><li><a href="https://truffleframework.com/docs/drizzle/getting-started" target="_blank" rel="noopener">DRIZZLE</a> 前端开发Dapp的工具</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ganache&quot;&gt;&lt;a href=&quot;#Ganache&quot; class=&quot;headerlink&quot; title=&quot;Ganache&quot;&gt;&lt;/a&gt;Ganache&lt;/h2&gt;&lt;p&gt;主要功能为在本地启动一个以太坊私有网络，并在一开始，创建10个account，供开发者使用。&lt;/p&gt;
&lt;p&gt;下载开箱即用 &lt;a href=&quot;https://truffleframework.com/ganache&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ganache&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Truffle&quot;&gt;&lt;a href=&quot;#Truffle&quot; class=&quot;headerlink&quot; title=&quot;Truffle&quot;&gt;&lt;/a&gt;Truffle&lt;/h2&gt;&lt;p&gt;官网介绍：以太坊智能合约开发、测试的一把瑞士军刀。&lt;/p&gt;
    
    </summary>
    
      <category term="Blockchain" scheme="http://xaber.co/categories/Blockchain/"/>
    
    
      <category term="ethereum" scheme="http://xaber.co/tags/ethereum/"/>
    
      <category term="solidity" scheme="http://xaber.co/tags/solidity/"/>
    
      <category term="Tools" scheme="http://xaber.co/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Jest文档备注</title>
    <link href="http://xaber.co/2017/07/13/Jest%E6%96%87%E6%A1%A3%E5%A4%87%E6%B3%A8/"/>
    <id>http://xaber.co/2017/07/13/Jest文档备注/</id>
    <published>2017-07-13T09:51:44.000Z</published>
    <updated>2018-12-26T16:38:02.822Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://facebook.github.io/jest/" target="_blank" rel="noopener">Jest</a> 文档备注，方便个人Review查询</p><p>后续有需要会再做更新</p><a id="more"></a><p><img src="/images/Jest_zpsljkd3qt6.png" alt="JEST"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://facebook.github.io/jest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jest&lt;/a&gt; 文档备注，方便个人Review查询&lt;/p&gt;
&lt;p&gt;后续有需要会再做更新&lt;/p&gt;
    
    </summary>
    
      <category term="Test" scheme="http://xaber.co/categories/Test/"/>
    
    
      <category term="工具" scheme="http://xaber.co/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>node 图片合成</title>
    <link href="http://xaber.co/2017/07/12/node-%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90/"/>
    <id>http://xaber.co/2017/07/12/node-图片合成/</id>
    <published>2017-07-12T03:34:53.000Z</published>
    <updated>2017-07-12T03:42:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇关于两个工具模块<code>images</code>、<code>gm</code>的介绍与问题处理</p><a id="more"></a><h3 id="一、本地最简单的方式-images模块"><a href="#一、本地最简单的方式-images模块" class="headerlink" title="一、本地最简单的方式 - images模块"></a>一、本地最简单的方式 - images模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const images = require(&apos;images&apos;)</span><br><span class="line"></span><br><span class="line">images(distPath)</span><br><span class="line">    .draw(images(tag), 0, 0)</span><br><span class="line">    .save(distPath);</span><br></pre></td></tr></table></figure><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>mac 上运行正常，centos上需要自己编译各种不同的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Can&apos;t load the addon. Issue to: https://github.com/zhangyuanwei/node-images/issues Error: /lib64/libc.so.6: version `GLIBC_2.14&apos; not found (required by /data/webroot/www/wx_edit/node_modules/images/bindings/linux/x64/6.0.0/binding.node)</span><br></pre></td></tr></table></figure><p>具体见 <a href="https://github.com/zhangyuanwei/node-images/issues/45" target="_blank" rel="noopener">https://github.com/zhangyuanwei/node-images/issues/45</a></p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>操作太复杂成本太高</p><h3 id="二、gm模块"><a href="#二、gm模块" class="headerlink" title="二、gm模块"></a>二、gm模块</h3><p>推荐使用</p><p><a href="https://github.com/aheckmann/gm" target="_blank" rel="noopener">https://github.com/aheckmann/gm</a></p><p>调用的相关其他工具，GraphicsMagick、ImageMagick</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function comImage(distPath, tag) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        gm(distPath)</span><br><span class="line">        .command(&apos;composite&apos;)</span><br><span class="line">        .in(&apos;-gravity&apos;, &apos;NorthWest&apos;)</span><br><span class="line">        .in(tag)</span><br><span class="line">        .write(distPath, function(err) &#123;</span><br><span class="line">            if (!err) &#123;</span><br><span class="line">                resolve(distPath);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="坑-1"><a href="#坑-1" class="headerlink" title="坑"></a>坑</h4><p>mac 上运行正常，centos上通过<code>yum install imagemagick</code>、<code>yum install graphicsmagick</code>没法玩。</p><p>需要执行安装工具，见</p><ol><li><a href="https://gist.github.com/paul91/9008409" target="_blank" rel="noopener">How to install GraphicsMagick on CentOS 6.4</a></li><li><a href="https://gist.github.com/abernardobr/e4292953fc84f9456cfa" target="_blank" rel="noopener">Install Graphics Magick on CentOS 7</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># Install build dependencies</span><br><span class="line">yum install -y gcc libpng libjpeg libpng-devel libjpeg-devel ghostscript libtiff libtiff-devel freetype freetype-devel</span><br><span class="line"></span><br><span class="line"># Get GraphicsMagick source</span><br><span class="line">wget ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/1.3/GraphicsMagick-1.3.9.tar.gz</span><br><span class="line">tar zxvf GraphicsMagick-1.3.9.tar.gz</span><br><span class="line"></span><br><span class="line"># Configure and compile</span><br><span class="line">cd GraphicsMagick-1.3.9</span><br><span class="line">./configure --enable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># Ensure everything was installed correctly</span><br><span class="line">gm version</span><br><span class="line"></span><br><span class="line"># If you are going to use this with PHP you can also instal the pecl extension</span><br><span class="line">pecl install gmagick-1.0.8b2</span><br></pre></td></tr></table></figure><h4 id="继续坑-如果报错"><a href="#继续坑-如果报错" class="headerlink" title="继续坑 - 如果报错"></a>继续坑 - 如果报错</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gm: error while loading shared libraries: libGraphicsMagick.so.3: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p>解决方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;/usr/local/lib&quot; &gt;&gt; /etc/ld.so.conf</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure></p><ol><li><a href="http://wiki.octave.org/GraphicsMagick" target="_blank" rel="noopener">GraphicsMagick</a></li><li><a href="https://duntuk.com/how-install-graphicsmagick-gmagick-php-extension" target="_blank" rel="noopener">How to install GraphicsMagick with GMagick PHP extension</a></li></ol><h4 id="最终建议"><a href="#最终建议" class="headerlink" title="最终建议"></a>最终建议</h4><p>centOS上的依赖安装，让专业的运维操作解决</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇关于两个工具模块&lt;code&gt;images&lt;/code&gt;、&lt;code&gt;gm&lt;/code&gt;的介绍与问题处理&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="http://xaber.co/categories/Node/"/>
    
    
      <category term="工具" scheme="http://xaber.co/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>谈谈前端工程化</title>
    <link href="http://xaber.co/2017/05/21/%E8%B0%88%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <id>http://xaber.co/2017/05/21/谈谈前端工程化/</id>
    <published>2017-05-21T14:22:27.000Z</published>
    <updated>2017-05-21T15:09:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>此篇是前两天在公司作为研发部门的一个TT分享，同步至此。分享的准备过程，其实也是对自己体系化的整理。原本认为分享过程大家死气沉沉，却没想到后面有同学发消息说学到很多，挺好。</p><p>话不多说，开始正题。<strong>此篇卖点</strong>：</p><a id="more"></a><ol><li>前端工程化包含哪些内容</li><li>前端工程化汲取的思考借鉴</li></ol><p>分享PPT，移除了公司部分的信息、历程，具体内容可见 此 <a href="https://github.com/Xaber20110202/Container/blob/master/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%EF%BC%88%E5%AF%B9%E5%A4%96%EF%BC%89.pdf" target="_blank" rel="noopener">PDF文件</a>。</p><h3 id="基础的前端工程化"><a href="#基础的前端工程化" class="headerlink" title="基础的前端工程化"></a>基础的前端工程化</h3><p><img src="http://h0.hucdn.com/open/201720/6a17dbea03b4f9aa_697x346.png" alt="基础的前端工程化"></p><h3 id="进阶的前端工程化"><a href="#进阶的前端工程化" class="headerlink" title="进阶的前端工程化"></a>进阶的前端工程化</h3><p><img src="http://h0.hucdn.com/open/201720/81f7c0f34eb04f95_1149x954.png" alt="进阶的前端工程化"></p><h3 id="手淘的前端工程化参考"><a href="#手淘的前端工程化参考" class="headerlink" title="手淘的前端工程化参考"></a>手淘的前端工程化参考</h3><p><img src="http://h0.hucdn.com/open/201720/3cb1fb4eeeb59036_1859x1816.png" alt="手淘的前端工程化大图"></p><h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><ol><li>大部分公司停留在基础的前端工程化阶段，因为后续更多的工程化迭代，需要有庞大的体量，以及，资深、专家级别的工程师、甚至专门的架构组做体系化思考与梳理</li><li>而这类级别的工程师，对小公司来说，可遇不可求的同时，也没有能力和资源去寻求投入进行工程化建设</li><li>小公司内部做的优化，主体欠缺更大的考虑和方向</li></ol><p>活到老学到老</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><a href="https://github.com/fouber/blog" target="_blank" rel="noopener">张云龙前端工程化系列博客</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇是前两天在公司作为研发部门的一个TT分享，同步至此。分享的准备过程，其实也是对自己体系化的整理。原本认为分享过程大家死气沉沉，却没想到后面有同学发消息说学到很多，挺好。&lt;/p&gt;
&lt;p&gt;话不多说，开始正题。&lt;strong&gt;此篇卖点&lt;/strong&gt;：&lt;/p&gt;
    
    </summary>
    
      <category term="总结系列" scheme="http://xaber.co/categories/%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="前端工程化" scheme="http://xaber.co/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="能力" scheme="http://xaber.co/tags/%E8%83%BD%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>ES6基础系列 —— class的糖怎么吃</title>
    <link href="http://xaber.co/2017/04/27/ES6%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97-%E2%80%94%E2%80%94-class%E7%9A%84%E7%B3%96%E6%80%8E%E4%B9%88%E5%90%83/"/>
    <id>http://xaber.co/2017/04/27/ES6基础系列-——-class的糖怎么吃/</id>
    <published>2017-04-27T09:21:24.000Z</published>
    <updated>2018-12-26T16:38:02.822Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>原型前前后后大概分享过也不止3次了，面试的时候也经常在提，虽然老话常谈，也没什么好讲的东西</p><p>不过，还是要重点强调下，原型和闭包是JS中核心中的核心，这两个东西会玩，基本上日常类的需求、bug改造起来会驾轻就熟很多</p><h3 id="先来几个栗子"><a href="#先来几个栗子" class="headerlink" title="先来几个栗子"></a>先来几个栗子</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const A = function () &#123;&#125;;</span><br><span class="line">A.prototype = &#123;</span><br><span class="line">    num: 1,</span><br><span class="line">    text: &apos;aaa&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 第一题</span><br><span class="line">const x = new A();</span><br><span class="line">console.log(x.num); </span><br><span class="line">console.log(x.text);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const y = new A();</span><br><span class="line">A.prototype = &#123;</span><br><span class="line">    num: 2</span><br><span class="line">&#125;;</span><br><span class="line">// 第二题</span><br><span class="line">console.log(y.num); </span><br><span class="line">console.log(y.text); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y.num = 3;</span><br><span class="line">const z = new A();</span><br><span class="line">// 第三题</span><br><span class="line">console.log(z.num); </span><br><span class="line">console.log(z.text);</span><br></pre></td></tr></table></figure><h3 id="一张图描述ES-5-prototype与继承"><a href="#一张图描述ES-5-prototype与继承" class="headerlink" title="一张图描述ES 5 prototype与继承"></a>一张图描述ES 5 prototype与继承</h3><p><img src="/images/090E1138-EA5C-460C-9881-13ED191872F9_zps32bmqjrs.jpeg" alt=""></p><h3 id="引用值更改"><a href="#引用值更改" class="headerlink" title="引用值更改"></a>引用值更改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function A () &#123;&#125;</span><br><span class="line">A.prototype = &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">        str: &apos;aaa&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var x = new A();</span><br><span class="line">var z = new A();</span><br><span class="line">x.obj.str = &apos;bbb&apos;;</span><br><span class="line">console.log(z.obj.str);</span><br></pre></td></tr></table></figure><p>会发现：<code>obj.str</code> 属性共享了，混乱了</p><p><strong>一般推荐的正常做法</strong>是，属性放在实例上也就是构造函数上，每个实例各自创建，而方法放在原型上，用于继承与共享</p><h3 id="ES-6-class-小例子"><a href="#ES-6-class-小例子" class="headerlink" title="ES 6 class 小例子"></a>ES 6 class 小例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.obj = &#123;</span><br><span class="line">            str: &apos;aaa&apos;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        alert(this.obj.str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">y = new A();</span><br><span class="line">h = new A();</span><br><span class="line">y.obj.str = &apos;bbb&apos;;</span><br><span class="line"></span><br><span class="line">y.alert();</span><br><span class="line">h.alert();</span><br></pre></td></tr></table></figure><p>这里的<code>obj.str</code> 没有共享了，为什么？</p><h3 id="ES-6-语法糖-extends、super"><a href="#ES-6-语法糖-extends、super" class="headerlink" title="ES 6 语法糖 extends、super"></a>ES 6 语法糖 extends、super</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class B extends A &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        // super 必须在最开始</span><br><span class="line">        // 一方面的原因从下面这行也可以看出来</span><br><span class="line">        this.str2 = this.obj.str + &apos;bbb&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    alertAndLog() &#123;</span><br><span class="line">        super.alert();</span><br><span class="line">        console.log(this.str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ------ 等价于 ------</span><br><span class="line"></span><br><span class="line">// 构造函数</span><br><span class="line">function B (props) &#123;</span><br><span class="line">    A.call(this, props);</span><br><span class="line">    this.str2 = this.obj.str + &apos;bbb&apos;;</span><br><span class="line">&#125;</span><br><span class="line">B.prototype = Object.create(A.prototype);</span><br><span class="line">B.prototype.alertAndLog = function () &#123;</span><br><span class="line">    A.prototype.alert();</span><br><span class="line">    console.log(this.str2);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>上面class的写法是不是更一目了然？这大概就是ES 6 class 语法糖的意义</li><li>注意上面的 super 的区别，在constructor 中，它代表父类型的构造函数，在原型方法中，则代表父类型的原型</li><li>ES5的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6的继承机制完全不同，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。因此，如果有constructor 就必须有 super()</li></ol><h3 id="7-static-关键字"><a href="#7-static-关键字" class="headerlink" title="7. static 关键字"></a>7. static 关键字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class B extends A &#123;</span><br><span class="line">    static console () &#123;</span><br><span class="line">        console.log(this.str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var t = new B();</span><br><span class="line">t.console(); // 是什么？</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line">B.console = function () &#123;</span><br><span class="line">    console.log(this.num);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="8-静态方法里使用-super-是怎么样的？"><a href="#8-静态方法里使用-super-是怎么样的？" class="headerlink" title="8. 静态方法里使用 super 是怎么样的？"></a>8. 静态方法里使用 super 是怎么样的？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class C extends B &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">    &#125;,</span><br><span class="line">    static consoleAndAlert() &#123;</span><br><span class="line">        // 跟 constructor 功效一致</span><br><span class="line">        super.console();</span><br><span class="line">        alert(this.str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C.str2 = &apos;ccc&apos;;</span><br><span class="line">C.consoleAndAlert();</span><br></pre></td></tr></table></figure><h3 id="9-缺陷"><a href="#9-缺陷" class="headerlink" title="9. 缺陷"></a>9. 缺陷</h3><h4 id="没有-private-关键字"><a href="#没有-private-关键字" class="headerlink" title="没有 private 关键字"></a>没有 private 关键字</h4><p>a. 使用ES6 Symbol模拟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const bar = Symbol(&apos;bar&apos;);</span><br><span class="line">const snaf = Symbol(&apos;snaf&apos;);</span><br><span class="line"></span><br><span class="line">export default class myClass&#123;</span><br><span class="line">    // 公有方法</span><br><span class="line">    foo(baz) &#123;</span><br><span class="line">        return this[bar](baz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 私有方法</span><br><span class="line">    [bar](baz) &#123;</span><br><span class="line">        return this[snaf] = baz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>b. 使用闭包模拟<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myClass = (()=&gt; &#123;</span><br><span class="line">    let num = 1;</span><br><span class="line">    return class A &#123;</span><br><span class="line">        foo(num2) &#123;</span><br><span class="line">            num += num2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>c. ES7 提案 —— 用 # 号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">    #x = 0;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        #x; // 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="静态属性、属性没法在class外层中定义，ES7-提案"><a href="#静态属性、属性没法在class外层中定义，ES7-提案" class="headerlink" title="静态属性、属性没法在class外层中定义，ES7 提案"></a>静态属性、属性没法在class外层中定义，ES7 提案</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    a = 10;</span><br><span class="line">    static a = 20;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-与Java的类继承区别"><a href="#10-与Java的类继承区别" class="headerlink" title="10. 与Java的类继承区别"></a>10. 与Java的类继承区别</h3><ol><li>JS 始终还是基于原型做的继承实现，基于的属性、闭包变量搜索</li><li>而像JAVA，更多是通过重新构建的形式完成继承，类和实例是不同的东西</li><li>类在定义完成后，运行时是不可动态添加属性</li><li>至于特性方面，JAVA有非常多的关键字，也是基于关键字的作用域实现各种各样的功能，抽象、多态、重写、重载</li><li>例如：public、protected、private、abstract、final</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">ECMAScript 6 入门</a></p><p><a href="https://segmentfault.com/a/1190000003798438" target="_blank" rel="noopener">JavaScript 原型系统的变迁，以及 ES6 class</a></p><p><a href="http://www.codeceo.com/article/java-extends.html" target="_blank" rel="noopener">Java 继承详解</a></p><p><a href="http://changsiyuan.github.io/2015/11/23/js-prototype/" target="_blank" rel="noopener">JavaScript 原型和原型链的理解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;原型前前后后大概分享过也不止3次了，面试的时候也经常在提，虽然老话常谈，也没什么好讲的东西&lt;/p&gt;
&lt;p&gt;不过，还是要重点强调下，原型和闭包是JS中核心中的核心，这两个东西会玩，基本上日常类的需求、bug改造起来会驾轻就熟很多&lt;/p&gt;
&lt;h3 id=&quot;先来几个栗子&quot;&gt;&lt;a href=&quot;#先来几个栗子&quot; class=&quot;headerlink&quot; title=&quot;先来几个栗子&quot;&gt;&lt;/a&gt;先来几个栗子&lt;/h3&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://xaber.co/categories/JavaScript/"/>
    
    
      <category term="底层基础" scheme="http://xaber.co/tags/%E5%BA%95%E5%B1%82%E5%9F%BA%E7%A1%80/"/>
    
      <category term="ES6" scheme="http://xaber.co/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>网页在微信中分享部分场景小图标丢失问题</title>
    <link href="http://xaber.co/2017/04/12/%E7%BD%91%E9%A1%B5%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E5%88%86%E4%BA%AB%E9%83%A8%E5%88%86%E5%9C%BA%E6%99%AF%E5%B0%8F%E5%9B%BE%E6%A0%87%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
    <id>http://xaber.co/2017/04/12/网页在微信中分享部分场景小图标丢失问题/</id>
    <published>2017-04-12T10:57:51.000Z</published>
    <updated>2019-07-18T09:01:12.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h3><ol><li>在微信中点击右上角分享，显示的标题、描述、图片有助于用户了解这个链接具体内容</li><li>技术侧根据<a href="https://mp.weixin.qq.com/wiki" target="_blank" rel="noopener">微信JS-SDK说明文档</a>，先通过后端请求获取权限验证配置，之后通过<code>wx.config</code>配置jssdk，最后通过<code>wx.shareConfig</code>进行标题、描述、链接、图片配置</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>部分场景下，用户点击分享展示的消息，在标题、描述、链接都正常的情况下，图片丢失，始终不展示<br><img src="http://h0.hucdn.com/open/201715/d9dd9615de9a91a2_1434x1274.png" alt=""></p><a id="more"></a><h3 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h3><ol><li>其实第一点想到的是：我前端没问题，“你微信端测一测”。毕竟我们是按照标准的方式进行的配置</li><li>我们自己的图片访问不稳定，分享时微信将该图片存储了，导致展示错误</li></ol><p>因而当时想到的两种最快定位路径是：</p><ol><li>咨询是否有微信相关工程师资源协助排查</li><li>是否可以查询相关图片访问404的百分比</li></ol><h3 id="然而"><a href="#然而" class="headerlink" title="然而"></a>然而</h3><ol><li>资源这块不是你想联系就能联系到的，如果你朋友的朋友的朋友认识马云，但未必你能见得到</li><li>又拍云较难统计这块数据</li></ol><h3 id="排查路径"><a href="#排查路径" class="headerlink" title="排查路径"></a>排查路径</h3><ol><li>联系多个出问题的用户，了解到都是android用户，并且听到些许关键词：多选群发</li><li>个人IOS机器试了好久多选群发，没有问题，上面的问题被略过了</li><li>使用 <a href="https://github.com/nodeWechat/wechat4u" target="_blank" rel="noopener">wechat4u</a> 控制台聊天机器人，log相关消息内容，发现对于图片无法显示的情况，appattach段中缺少数据，排除了CDN网络的问题（即使传递了404图片，也有appattach字段）<br><img src="http://h0.hucdn.com/open/201715/dfbc66e91d75c5f6_484x495.jpg" alt=""></li><li>发现另一个用户也提到相关关键词——群发，进一步了解到，也是android用户</li><li>几个人拉群，android机器进行群发，问题复现</li><li>测试几台ios、android测试机，确定问题为微信android客户端问题：多选群发较高频率出现图片丢失情况</li></ol><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><ol><li>通过微信公众号“微信团队”反馈问题</li><li>知乎上搜索微信工程师，私信联系反馈</li><li>知乎上创建问题，继续@相关人反馈</li><li>朋友圈发消息寻求朋友相关资源协助（最终联系到一位微信工程师，定位到问题，并同步下个版本会做修复）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景描述&quot;&gt;&lt;a href=&quot;#背景描述&quot; class=&quot;headerlink&quot; title=&quot;背景描述&quot;&gt;&lt;/a&gt;背景描述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在微信中点击右上角分享，显示的标题、描述、图片有助于用户了解这个链接具体内容&lt;/li&gt;
&lt;li&gt;技术侧根据&lt;a href=&quot;https://mp.weixin.qq.com/wiki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信JS-SDK说明文档&lt;/a&gt;，先通过后端请求获取权限验证配置，之后通过&lt;code&gt;wx.config&lt;/code&gt;配置jssdk，最后通过&lt;code&gt;wx.shareConfig&lt;/code&gt;进行标题、描述、链接、图片配置&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;部分场景下，用户点击分享展示的消息，在标题、描述、链接都正常的情况下，图片丢失，始终不展示&lt;br&gt;&lt;img src=&quot;http://h0.hucdn.com/open/201715/d9dd9615de9a91a2_1434x1274.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其他技能" scheme="http://xaber.co/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="微信" scheme="http://xaber.co/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>前端职场技术路径</title>
    <link href="http://xaber.co/2017/03/30/%E5%89%8D%E7%AB%AF%E8%81%8C%E5%9C%BA%E6%8A%80%E6%9C%AF%E8%B7%AF%E5%BE%84/"/>
    <id>http://xaber.co/2017/03/30/前端职场技术路径/</id>
    <published>2017-03-29T16:07:36.000Z</published>
    <updated>2017-03-29T16:35:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下仅描述个人对技术岗（当前所在公司、阿里系类似评级）职场路径的看法。</p><p>虽谈前端工程师，PHP工程师、JAVA工程师、运营、产品，其实相似、相通。</p><a id="more"></a><h3 id="实习生"><a href="#实习生" class="headerlink" title="实习生"></a>实习生</h3><p>最好有一些想法，汇聚一些问题，向前辈们多请教多学习。这里切忌一点，如果没有一定了解，千万不要有乱七八糟的想法还固执己见不听取意见，跟一些资深前辈争执，这样会显得很不可理喻，除非是有过硬的知识背景。</p><h3 id="P4工程师"><a href="#P4工程师" class="headerlink" title="P4工程师"></a>P4工程师</h3><p>日常基本以小需求为主，积极进取，也就有更多的机会让上级了解到你，委派更重要的任务。过程中，提炼一些问题，并通过相关手段能够自行解决，带来一些小的优化产出。</p><p>偶尔产出一些稍微大点的优化成果，便是考评提升的依据。</p><h3 id="P5高级工程师"><a href="#P5高级工程师" class="headerlink" title="P5高级工程师"></a>P5高级工程师</h3><p>日常以中型业务需求为主，平时辅以一些小优化，这才是高级工程师的职责。</p><p>如果作为P5，大需求做太慢，一直在处理日常需求，只是满足业务需求，小优化见不了几个，这样的高级工程师是不合格的。</p><p>至于说一个季度不时有一些大的优化成果产出，那也便有了升职的可能。</p><h3 id="P6资深工程师"><a href="#P6资深工程师" class="headerlink" title="P6资深工程师"></a>P6资深工程师</h3><p>日常以中大型需求、项目为主，能独立承担大型项目主要开发、能协调相关资源、跟进相应时间节点、确保项目平稳上线。</p><p>同样的，除此之外，一个季度至少需要几个大优化保底，才能说比较符合资深工程师的身份。</p><p>至于说升职的可能，关键要素在于是否承担了大体系、大系统、基础层面的产品化方案设计与建设。看得准方向，推得了架构，能够拔高整个团队的段位和水平。</p><h3 id="P7专家"><a href="#P7专家" class="headerlink" title="P7专家"></a>P7专家</h3><p>日常工作主体以大体系、大系统、基础层面建设为主，稳步推动技术演进、升级迭代。</p><p>更多是参与到基础设施开创与完善的过程中，汇聚想法、综合方案，看准拍板。</p><h3 id="……"><a href="#……" class="headerlink" title="……"></a>……</h3><hr><h3 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h3><p>主体要素为：发现问题、解决问题。</p><p>因而主观能动性非常重要。</p><p>而差别则在于解决问题的方式、程度、范围、深度，即能力范畴。</p><p>好似封装的境界：封装页面代码、封装项目下的模块、抽离业务封装多项目间共享模块、上线组件系统定义模块构建规范与方式等……</p><p>每一个层面都会遇到不一样的问题，每一次的解决，积累的经验，也使得我们向更高的境界靠拢。</p><p>最后，万变不离其宗，多观察、多学习、多努力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下仅描述个人对技术岗（当前所在公司、阿里系类似评级）职场路径的看法。&lt;/p&gt;
&lt;p&gt;虽谈前端工程师，PHP工程师、JAVA工程师、运营、产品，其实相似、相通。&lt;/p&gt;
    
    </summary>
    
      <category term="总结系列" scheme="http://xaber.co/categories/%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="总结规划" scheme="http://xaber.co/tags/%E6%80%BB%E7%BB%93%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>使用atcon告别混乱的if else</title>
    <link href="http://xaber.co/2017/03/02/%E4%BD%BF%E7%94%A8atcon%E5%91%8A%E5%88%AB%E6%B7%B7%E4%B9%B1%E7%9A%84if-else/"/>
    <id>http://xaber.co/2017/03/02/使用atcon告别混乱的if-else/</id>
    <published>2017-03-01T16:23:45.000Z</published>
    <updated>2017-03-02T06:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，来聊聊混乱的<code>if、else</code>是怎么来的，怎么和他们说再见，以及写的一个工具函数<code>atcon</code>。</p><a id="more"></a><h3 id="一、代码是怎样混乱的"><a href="#一、代码是怎样混乱的" class="headerlink" title="一、代码是怎样混乱的"></a>一、代码是怎样混乱的</h3><p>最简单的一个需求：根据活动改变二维码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">qrcode = &apos;img_a&apos;;</span><br><span class="line"></span><br><span class="line">// 活动二</span><br><span class="line">if (activity === 2) &#123;</span><br><span class="line">    qrcode = &apos;img_b&apos;;</span><br><span class="line">// 活动三</span><br><span class="line">&#125; else if (activity === 3) &#123;</span><br><span class="line">    qrcode = &apos;img_c&apos;;</span><br><span class="line">// 活动四</span><br><span class="line">&#125; else if (activity === 4) &#123;</span><br><span class="line">    qrcode = &apos;img_d&apos;;</span><br><span class="line">// 活动五</span><br><span class="line">&#125; else if (activity === 5) &#123;</span><br><span class="line">    qrcode = &apos;img_e&apos;;</span><br><span class="line">// 活动六</span><br><span class="line">&#125; else if (activity === 6) &#123;</span><br><span class="line">    qrcode = &apos;img_f&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，这个逻辑看起来还是挺简单的。这时候，我们增加一个变量<code>notice</code>，因为需要根据活动改变文案，而且只在某些特殊情况变更，于是它可能变成了这样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">qrcode = &apos;img_a&apos;;</span><br><span class="line">notice = &apos;文案一&apos;;</span><br><span class="line"></span><br><span class="line">// 活动二</span><br><span class="line">if (activity === 2) &#123;</span><br><span class="line">    qrcode = &apos;img_b&apos;;</span><br><span class="line">// 活动三</span><br><span class="line">&#125; else if (activity === 3) &#123;</span><br><span class="line">    qrcode = &apos;img_c&apos;;</span><br><span class="line">    notice = &apos;文案三&apos;;</span><br><span class="line">// 活动四</span><br><span class="line">&#125; else if (activity === 4) &#123;</span><br><span class="line">    qrcode = &apos;img_d&apos;;</span><br><span class="line">// 活动五</span><br><span class="line">&#125; else if (activity === 5) &#123;</span><br><span class="line">    qrcode = &apos;img_e&apos;;</span><br><span class="line">    notice = &apos;文案五&apos;;</span><br><span class="line">// 活动六</span><br><span class="line">&#125; else if (activity === 6) &#123;</span><br><span class="line">    qrcode = &apos;img_f&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来也没什么。但是这时候，产品跑来说，活动下线了，二维码需要做区分。于是代码可能又变成了这样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">qrcode = &apos;img_a&apos;;</span><br><span class="line">notice = &apos;文案零&apos;;</span><br><span class="line"></span><br><span class="line">// 活动二</span><br><span class="line">if (activity === 2) &#123;</span><br><span class="line">    qrcode = &apos;img_b&apos;;</span><br><span class="line">    if (isEnd) &#123;</span><br><span class="line">        qrcode = &apos;img_h&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">// 活动三</span><br><span class="line">&#125; else if (activity === 3) &#123;</span><br><span class="line">    qrcode = &apos;img_c&apos;;</span><br><span class="line">    notice = &apos;文案三&apos;;</span><br><span class="line">    if (isEnd) &#123;</span><br><span class="line">        qrcode = &apos;img_i&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">// 活动四</span><br><span class="line">&#125; else if (activity === 4) &#123;</span><br><span class="line">    qrcode = &apos;img_d&apos;;</span><br><span class="line">    if (isEnd) &#123;</span><br><span class="line">        qrcode = &apos;img_j&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">// 活动五</span><br><span class="line">&#125; else if (activity === 5) &#123;</span><br><span class="line">    qrcode = &apos;img_e&apos;;</span><br><span class="line">    notice = &apos;文案五&apos;;</span><br><span class="line">    if (isEnd) &#123;</span><br><span class="line">        qrcode = &apos;img_k&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">// 活动六</span><br><span class="line">&#125; else if (activity === 6) &#123;</span><br><span class="line">    qrcode = &apos;img_f&apos;;</span><br><span class="line">    if (isEnd) &#123;</span><br><span class="line">        qrcode = &apos;img_l&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isEnd) &#123;</span><br><span class="line">    notice = &apos;下线了&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是开始有点懵逼了？Hold on，隔了几天，产品又跑来跟我们说，活动三、四、五效果不是特别好，我们准备改一版样式，做下ABTEST看看效果。</p><p>这意味着我们的代码里又要增加一个变量，于是我们只能说，卧槽。</p><h3 id="二、如何改造"><a href="#二、如何改造" class="headerlink" title="二、如何改造"></a>二、如何改造</h3><p>或者说，如何在一开始给自己留好后路。</p><p>我们先从第1步重新开始，如果用对象保存这些关联，是不是就会简单很多呢。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">imgMap = &#123;</span><br><span class="line">    &apos;2&apos;: &apos;img_b&apos;,</span><br><span class="line">    &apos;3&apos;: &apos;img_c&apos;,</span><br><span class="line">    &apos;4&apos;: &apos;img_d&apos;,</span><br><span class="line">    &apos;5&apos;: &apos;img_e&apos;,</span><br><span class="line">    &apos;6&apos;: &apos;img_f&apos;</span><br><span class="line">&#125;;</span><br><span class="line">qrcode = imgMap[activity] || &apos;img_a&apos;;</span><br></pre></td></tr></table></figure><p>第2步，增加的notice，其实和qrcode没有任何关联。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">noticeMap = &#123;</span><br><span class="line">    &apos;3&apos;: &apos;文案三&apos;,</span><br><span class="line">    &apos;5&apos;: &apos;文案五&apos;</span><br><span class="line">&#125;;</span><br><span class="line">notice = noticeMap[activity] || &apos;文案零&apos;;</span><br></pre></td></tr></table></figure><p>活动下线区分，我们稍稍改变下结构好了，几分钟的事。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">imgMap = &#123;</span><br><span class="line">    online: &#123;</span><br><span class="line">        &apos;2&apos;: &apos;img_b&apos;,</span><br><span class="line">        // .....etc.</span><br><span class="line">    &#125;,</span><br><span class="line">    offline: &#123;</span><br><span class="line">        &apos;2&apos;: &apos;img_h&apos;,</span><br><span class="line">        // .....etc.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var noticeMap = &#123;</span><br><span class="line">    online: &#123;</span><br><span class="line">        &apos;3&apos;: &apos;文案三&apos;,</span><br><span class="line">        &apos;5&apos;: &apos;文案五&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    offline: &apos;下线了&apos;</span><br><span class="line">&#125;;</span><br><span class="line">qrcode = imgMap[isEnd ? &apos;offline&apos; : &apos;online&apos;][activity] || &apos;img_a&apos;;</span><br><span class="line"></span><br><span class="line">if (isEnd) &#123;</span><br><span class="line">    notice = noticeMap.offline;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    notice = noticeMap.online[activity] || &apos;文案零&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面，我们的编码方式，整体还是挺不错的，每种状态都差不多能对应一个结果。</p><p>但是，有没有发现，我们在<code>notice</code>的处理上，又开始写<code>if、else</code>了。</p><p>这里先不提，我们继续下面一步。</p><p>如果只是对在线的活动二、三做abtest，并改变里面的二维码和图片，我们该怎么做呢？</p><p>如果采用上面imgMap一一对应的关系，数据结构就变成了这样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">imgMap = &#123;</span><br><span class="line">    online: &#123;</span><br><span class="line">        &apos;2&apos;: &#123;</span><br><span class="line">            a: &apos;img_b&apos;,</span><br><span class="line">            b: &apos;img_o&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;3&apos;: &#123;</span><br><span class="line">            a: &apos;img_b&apos;,</span><br><span class="line">            b: &apos;img_p&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;4&apos;: &#123;</span><br><span class="line">            a: &apos;img_c&apos;,</span><br><span class="line">            d: &apos;img_c&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        // .....etc.</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    offline: &#123;</span><br><span class="line">        &apos;2&apos;: &#123;</span><br><span class="line">            a: &apos;img_h&apos;,</span><br><span class="line">            b: &apos;img_h&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;3&apos;: &#123;</span><br><span class="line">            a: &apos;img_b&apos;,</span><br><span class="line">            b: &apos;img_b&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;4&apos;: &#123;</span><br><span class="line">            a: &apos;img_c&apos;,</span><br><span class="line">            d: &apos;img_c&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        // .....etc.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有没有发现，为了保证我们可以一次性访问到具体对应的值，我们做了<strong>非常多重复配置</strong>。</p><p>我们当然不希望进行重复配置，而是希望处理的结构可以像这样简单：</p><p>var noticeMap = {<br>    online: {<br>        ‘2’: {<br>            a: ‘abtest文案二’<br>        },<br>        ‘3’: {<br>            a: ‘abtest文案三’,<br>            b: ‘文案三’<br>        },<br>        ‘5’: ‘文案五’<br>    },<br>    offline: ‘下线了’<br>};</p><p>但是我们怎么提取对应的值，又如何避免提取的过程不会出错呢。</p><p>像上面notice一样，我们只能写<code>if、else</code>判断代码，外加循环判断对应属性的值是否存在，好像又要重走以前的老路。</p><h3 id="三、使用-atcon"><a href="#三、使用-atcon" class="headerlink" title="三、使用 atcon"></a>三、使用 atcon</h3><p>atcon就是用来解决这个问题，封装了属性值提取、reduce循环判断等处理，让大家可以拥有清晰美妙的结构的同时，也能非常方便地提取对应条件分支的值。</p><p>使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">imgMap = &#123;</span><br><span class="line">    online: &#123;</span><br><span class="line">        &apos;2&apos;: &#123;</span><br><span class="line">            a: &apos;img_b&apos;,</span><br><span class="line">            b: &apos;img_o&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;3&apos;: &#123;</span><br><span class="line">            a: &apos;img_b&apos;,</span><br><span class="line">            b: &apos;img_p&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;4&apos;: &apos;img_c&apos;,</span><br><span class="line">        &apos;5&apos;: &apos;img_d&apos;,</span><br><span class="line">        &apos;6&apos;: &apos;img_e&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    offline: &#123;</span><br><span class="line">        &apos;2&apos;: &apos;img_h&apos;,</span><br><span class="line">        &apos;3&apos;: &apos;img_i&apos;,</span><br><span class="line">        &apos;4&apos;: &apos;img_j&apos;,</span><br><span class="line">        &apos;5&apos;: &apos;img_k&apos;,</span><br><span class="line">        &apos;6&apos;: &apos;img_l&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    __DEFAULT__: &apos;img_a&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">noticeMap = &#123;</span><br><span class="line">    online: &#123;</span><br><span class="line">        &apos;2&apos;: &#123;</span><br><span class="line">            a: &apos;abtest文案二&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;3&apos;: &#123;</span><br><span class="line">            a: &apos;abtest文案三&apos;,</span><br><span class="line">            b: &apos;文案三&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;5&apos;: &apos;文案五&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    offline: &apos;下线了&apos;</span><br><span class="line">    __DEFAULT__: &apos;文案零&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">isImg = img =&gt; img.search(/\.(png|jpg)$/) !== -1;</span><br><span class="line">isString = str =&gt; Object.prototype.toString.call(str) === &apos;[object String]&apos;;</span><br><span class="line"></span><br><span class="line">qrcode = atcon(imgMap, [isEnd ? &apos;offline&apos; : &apos;online&apos;, activity, isAbtest ? &apos;a&apos; : &apos;b&apos;], isImg);</span><br><span class="line">notice = atcon(noticeMap, [isEnd ? &apos;offline&apos; : &apos;online&apos;, activity, isAbtest ? &apos;a&apos; : &apos;b&apos;], isString);</span><br></pre></td></tr></table></figure><p>atcon将我们一开始的默认值，也通过<code>__DEFAULT__</code>的提取，做了指定。因此，复杂的分支判断，只要先通过细致设想的结构，然后与atcon完美地结合起来，就可以开始和<code>if else</code>说再见了。</p><h3 id="四、结构变更"><a href="#四、结构变更" class="headerlink" title="四、结构变更"></a>四、结构变更</h3><p>如果这时候，需要把所有abtest的a，文案全部改成一样的，而下线的文案保持跟上线的文案一致，我们甚至能够直接改变noticeMap结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">noticeMap = &#123;</span><br><span class="line">    b: &#123;</span><br><span class="line">        &apos;3&apos;: &apos;文案三&apos;,</span><br><span class="line">        &apos;5&apos;: &apos;文案五&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    a: &apos;一样的ABTEST文案&apos;,</span><br><span class="line">    __DEFAULT__: &apos;文案零&apos;</span><br><span class="line">&#125;;</span><br><span class="line">notice = atcon(noticeMap, [isAbtest ? &apos;a&apos; : &apos;b&apos;, activity], isString);</span><br></pre></td></tr></table></figure><p>我们改变思路、结构的同时，改变atcon第二个数组参数的数组项位置和数量，就达到了调整复杂<code>if else</code>逻辑的目的。</p><h3 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h3><p>我们不改逻辑，基本不改代码，我们只改配置。</p><p>从现在起，告别混乱的<code>if else</code>。</p><p>具体见：<a href="https://github.com/Xaber20110202/atcon" target="_blank" rel="noopener">atcon</a></p><hr><h3 id="思路来源"><a href="#思路来源" class="headerlink" title="思路来源"></a>思路来源</h3><ul><li><a href="https://book.douban.com/subject/4822685/" target="_blank" rel="noopener">编码 隐匿在计算机软硬件背后的语言</a> —— 用符号代替语言</li><li><a href="https://book.douban.com/subject/26382780/" target="_blank" rel="noopener">JavaScript设计模式与开发实践</a> —— 策略模式、职责链模式</li><li><a href="https://github.com/milan-hwj/judgment" target="_blank" rel="noopener">milan-hwj</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一篇，来聊聊混乱的&lt;code&gt;if、else&lt;/code&gt;是怎么来的，怎么和他们说再见，以及写的一个工具函数&lt;code&gt;atcon&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="编程系列" scheme="http://xaber.co/categories/%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="可维护性" scheme="http://xaber.co/tags/%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7/"/>
    
      <category term="if else" scheme="http://xaber.co/tags/if-else/"/>
    
  </entry>
  
  <entry>
    <title>微信授权登录流程</title>
    <link href="http://xaber.co/2017/02/22/%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/"/>
    <id>http://xaber.co/2017/02/22/微信授权登录流程/</id>
    <published>2017-02-22T13:10:40.000Z</published>
    <updated>2018-12-26T16:38:02.822Z</updated>
    
    <content type="html"><![CDATA[<p>优点：</p><ul><li>仅在用户openid、unionid未绑定过平台账号情况下，需要手机号、验证码进行注册、登录、绑定</li><li>已经绑定过unionid的用户，在同一个公众平台下的不同公众号、小程序上第一次做注册、登录、绑定操作时，无需再通过手机号验证码，只要再进行一次用户信息授权（unionid、需用户确认）</li><li>当openid已存在绑定关系，利用静默信息授权（openid、无感知），进行登录操作</li></ul><a id="more"></a><p><img src="/images/2017.01.09_zpsz5wutexo.png" alt="微信授权登录流程"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅在用户openid、unionid未绑定过平台账号情况下，需要手机号、验证码进行注册、登录、绑定&lt;/li&gt;
&lt;li&gt;已经绑定过unionid的用户，在同一个公众平台下的不同公众号、小程序上第一次做注册、登录、绑定操作时，无需再通过手机号验证码，只要再进行一次用户信息授权（unionid、需用户确认）&lt;/li&gt;
&lt;li&gt;当openid已存在绑定关系，利用静默信息授权（openid、无感知），进行登录操作&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="其他技能" scheme="http://xaber.co/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>字符编码ASCII，Unicode和UTF-8学习</title>
    <link href="http://xaber.co/2017/02/22/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81ASCII%EF%BC%8CUnicode%E5%92%8CUTF-8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://xaber.co/2017/02/22/字符编码ASCII，Unicode和UTF-8学习/</id>
    <published>2017-02-22T13:02:01.000Z</published>
    <updated>2017-02-22T13:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>此文大量内容复制自<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode和UTF-8</a>，在此基础上，增加部分个人理解，用于存档。</p><a id="more"></a><h3 id="一、ASCII码"><a href="#一、ASCII码" class="headerlink" title="一、ASCII码"></a>一、ASCII码</h3><p>所有的信息最终都表示为一个二进制的字符串，八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。</p><p>上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。<br>ASCII码一共规定了128个字符的编码，比如空格”SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。</p><p>见 <a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">维基百科 - ASCII</a></p><h3 id="二、非ASCII编码"><a href="#二、非ASCII编码" class="headerlink" title="二、非ASCII编码"></a>二、非ASCII编码</h3><p>一个字节8位，代表256个字符，ASCII码占了128位，剩下128位，各个国家没法分。因而会造成，明明是同一个8位二进制，130（10000010）在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)，在俄语编码中又会代表另一个符号。</p><p>至于亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示256x256=65536个符号。</p><h3 id="三、Unicode"><a href="#三、Unicode" class="headerlink" title="三、Unicode"></a>三、Unicode</h3><p>世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。</p><p>可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，就像它的名字都表示的，这是一种所有符号的编码。</p><p>但是需要注意的是，<strong>Unicode只是字符集</strong>。它规定了一个字符，代表的十六进制是什么，例如汉字”严”的unicode是十六进制数4E25，二进制应该为（100111000100101），而其<strong>没有规定这个二进制代码应该怎么存储</strong>。</p><p>好比我发明了一个字，把 “卧槽” 两个字合成一个字，它的unicode可能是十六进制数EEEE，二进制是1110111011101110（才2位，也还好嘛）。但是，想想0x7FFFFFFF（1111111111111111111111111111111），就逆天了。</p><p>这里有两个问题：</p><ol><li><p>英文字母只用一个字节表示就够了，如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的</p></li><li><p>计算机怎么知道三个字节（11101110 11101110 11101110）表示一个符号，而不是分别表示三个符号？</p></li></ol><h3 id="四、UTF-8"><a href="#四、UTF-8" class="headerlink" title="四、UTF-8"></a>四、UTF-8</h3><p>互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种Unicode的实现方式。其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，<strong>UTF-8是Unicode的实现方式之一</strong>。</p><p>其解决了上面提到的两个问题，这也是它最大的一个特点，因为是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。其解决方式（编码规则）是这样的：</p><ol><li><p>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p></li><li><p>对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Unicode符号范围 | UTF-8编码方式</span><br><span class="line">(十六进制) | （二进制）</span><br><span class="line">--------------------+---------------------------------------------</span><br><span class="line">0000 0000 到 0000 007F | 0xxxxxxx</span><br><span class="line">0000 0080 到 0000 07FF | 110xxxxx 10xxxxxx</span><br><span class="line">0000 0800 到 0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line">0001 0000 到 0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure><p>计算机的识别可以理解为是这样的：依次读取，如果读到这个字节开头是0，这个字节完了就完了；读到这个字节前面有4个1，那就再读3个字节（包括当前的字节就是4个字节）（而且后面三个字节都是以10开头）拼凑起来。即：如果一个字节的第一位是0，则这个字节单独就是一个字符；如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节。</p><p>“严”的unicode是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800-0000 FFFF），因此”严”的UTF-8编码需要三个字节，即格式是”1110xxxx 10xxxxxx 10xxxxxx”。</p><p>然后，从”严”的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。即：100101填到 <code>1110xxxx 10xxxxxx 10xxxxxx</code>，最后那个字节的xxxxxx上，111000填到<code>1110xxxx 10xxxxxx 10xxxxxx</code>最后第二个xxxxxx上，100填到<code>1110xxxx 10xxxxxx 10xxxxxx</code>第一个xxxxxx末尾，得到<code>111xx100 10111000 10100101</code>，然后剩下的xx补为0，这样就得到了，”严”的UTF-8编码是”11100100 10111000 10100101”，其转换成十六进制就是E4B8A5。</p><p>有没有发现，其实”严”的Unicode码是4E25，UTF-8编码是E4B8A5，两者是不一样的。因为UTF-8编码方式的很多位，被用来作为“标志”。</p><h3 id="五、Little-endian和Big-endian"><a href="#五、Little-endian和Big-endian" class="headerlink" title="五、Little endian和Big endian"></a>五、Little endian和Big endian</h3><p>此外，Unicode码也可以采用UCS-2格式直接存储。以汉字”严”为例，Unicode码是4E25，需要用两个字节存储，一个字节是4E，另一个字节是25。存储的时候，4E在前，25在后，就是Big endian方式；25在前，4E在后，就是Little endian方式。</p><p>这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。</p><p>因此，第一个字节在前，就是”大头方式”（Big endian），第二个字节在前就是”小头方式”（Little endian）。</p><p>那么很自然的，就会出现一个问题：计算机怎么知道某一个文件到底采用哪一种方式（大头还是小头）编码？</p><p>Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做”零宽度非换行空格”（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。</p><p>如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。</p><h3 id="六、编码方式识别"><a href="#六、编码方式识别" class="headerlink" title="六、编码方式识别"></a>六、编码方式识别</h3><p>正如前面提到的，UCS-2 大头、小头分别使用FE FF、FF FE来区分，同样的道理，一个文件里有一个”严”字，其编码是六个字节”EF BB BF E4 B8 A5”，前三个字节”EF BB BF”表示这是UTF-8编码，后三个”E4B8A5”就是”严”的具体编码，它的存储顺序与编码顺序是一致的。</p><hr><h4 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h4><ul><li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode和UTF-8</a></li><li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">汉字对应表</a></li><li><a href="http://cenalulu.github.io/linux/character-encoding/" target="_blank" rel="noopener">十分钟搞清字符集和字符编码</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文大量内容复制自&lt;a href=&quot;http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;字符编码笔记：ASCII，Unicode和UTF-8&lt;/a&gt;，在此基础上，增加部分个人理解，用于存档。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="http://xaber.co/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="字符编码" scheme="http://xaber.co/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>ES6基础系列 —— 理解Generator及其应用场景</title>
    <link href="http://xaber.co/2017/01/25/ES6%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97-%E2%80%94%E2%80%94-%E7%90%86%E8%A7%A3generator%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://xaber.co/2017/01/25/ES6基础系列-——-理解generator及其应用场景/</id>
    <published>2017-01-24T16:12:21.000Z</published>
    <updated>2017-02-07T03:09:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天给团队做的一次关于Generator的分享，整理至此。这次分享的目的是：循序渐进地让大家对ES6的Generator有一个初步的了解、然后加深理解、再通过一个run函数知晓其应用场景，最后明晰Generator带来的意义。<br><a id="more"></a></p><h3 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h3><p>我们比较常遇见异步的两个场景：顺序调用和并行调用。</p><p>我们平时的异步处理一般是这样写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var getList1 = (success) =&gt; &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &apos;http://sapi.bbeeii.com/martgoods/category/fightgroup.html&apos;,</span><br><span class="line">        type: &apos;GET&apos;,</span><br><span class="line">        dataType: &apos;jsonp&apos;,</span><br><span class="line">        jsonpCallback: &apos;bbeeiiMartgoodsCategoryGet&apos;,</span><br><span class="line">        success</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">var getList2 = (success) =&gt; &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &apos;http://sapi.bbeeii.com/martshow/1-15----1.html&apos;,</span><br><span class="line">        type: &apos;GET&apos;,</span><br><span class="line">        dataType: &apos;jsonp&apos;,</span><br><span class="line">        jsonpCallback: &apos;bbeeiiMartshowGet&apos;,</span><br><span class="line">        success</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 顺序调用</span><br><span class="line">getList1((resp1) =&gt; &#123;</span><br><span class="line">    // do something</span><br><span class="line">    getList2(resp2 =&gt; &#123;</span><br><span class="line">        // do something</span><br><span class="line">        // ..... 回调地狱</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 可能的并行调用</span><br><span class="line">var getAllList = (getLists, callback) =&gt; &#123;</span><br><span class="line">    const listLen = getLists.length;</span><br><span class="line">    const resultArr = Array.from(&#123;</span><br><span class="line">        length: listLen</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    getLists.forEach((getList, index) =&gt; &#123;</span><br><span class="line">        getList((resp) =&gt; &#123;</span><br><span class="line">            resultArr[index] = resp;</span><br><span class="line"></span><br><span class="line">            // 简单判断 中间要做各种兼容处理、错误判断，比较复杂</span><br><span class="line">            if (resultArr.filter((result) =&gt; result).length === listLen) &#123;</span><br><span class="line">                callback(resultArr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面两个例子相对还比较简单，但当我们把场景搬到Node上，我们毫无疑问会遇到两个问题：</p><ol><li>错误处理</li><li>回调地狱</li></ol><h3 id="二、async-js-／-Promise"><a href="#二、async-js-／-Promise" class="headerlink" title="二、async.js ／ Promise"></a>二、async.js ／ Promise</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 顺序调用</span><br><span class="line">async.series([</span><br><span class="line">        (callback) =&gt; callback(null, &apos;one&apos;),</span><br><span class="line">        (callback) =&gt; callback(null, &apos;two&apos;)</span><br><span class="line">    ],</span><br><span class="line">    // optional callback</span><br><span class="line">    (err, results) =&gt; &#123;</span><br><span class="line">        // results is now equal to [&apos;one&apos;, &apos;two&apos;]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">// 并行调用</span><br><span class="line">async.parallel([</span><br><span class="line">        (callback) =&gt; setTimeout(() =&gt; callback(null, &apos;one&apos;), 200),</span><br><span class="line">        (callback) =&gt; setTimeout(() =&gt; callback(null, &apos;two&apos;), 100)</span><br><span class="line">    ],</span><br><span class="line">    // optional callback</span><br><span class="line">    (err, results) =&gt; &#123;</span><br><span class="line">        // the results array will equal [&apos;one&apos;,&apos;two&apos;] even though</span><br><span class="line">        // the second function had a shorter timeout.</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>我们可以理解为，async.js提供了异步流程控制，相当于上述开篇的进一步封装，但其仍是各种callback。</p><p>同理，Promise尽管提供了链式的调用，看起来告别了回调地狱，提供了非常大的便利，但本质还是“异步的编写方式”，写太多then也比较繁琐（因为不在本文主题之内，不做发散）。</p><h3 id="三、Generator"><a href="#三、Generator" class="headerlink" title="三、Generator"></a>三、Generator</h3><h4 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h4><p>Generator最初步的了解，需要大家至少从 <a href="http://es6.ruanyifeng.com/#docs/Generator" target="_blank" rel="noopener">阮一峰老师的ES6</a> 里了解对应的function*、yield、next、value、done这几个概念。</p><p>先抛一个最简单的理解：就把他看成一种新的语法，Generator函数执行，返回一个对象，对象拥有next方法。next方法每一次执行，依次迭代一个yield，返回一个新的对象，该对象拥有value、done属性。</p><h4 id="3-1-yield后面语句执行时机"><a href="#3-1-yield后面语句执行时机" class="headerlink" title="3.1 yield后面语句执行时机"></a>3.1 yield后面语句执行时机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 2个log哪个先出来</span><br><span class="line">const gen = function*() &#123;</span><br><span class="line">    yield setTimeout(() =&gt; &#123;</span><br><span class="line">        console.log(&apos;gen&apos;);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;;</span><br><span class="line">// Generator实例 拥有next方法</span><br><span class="line">var genResult = gen();</span><br><span class="line"></span><br><span class="line">// next调用执行后，返回一个对象，包含value与done属性</span><br><span class="line">console.log(genResult.next());</span><br></pre></td></tr></table></figure><p><strong>知识点一</strong>：这里有一个误区，有可能会误认为Generator执行环境在另一个线程中，但实际上不是。yield后面的语句，还是按照正常的环境在执行，yield相当于把该行的语句推出来执行，并且从Generator执行环境中退出来。</p><p>再换一个方式，大家再试试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let test = 1;</span><br><span class="line">const gen = function*() &#123;</span><br><span class="line">    yield test = 2;</span><br><span class="line">    test = 3;</span><br><span class="line">&#125;;</span><br><span class="line">const result = gen();</span><br><span class="line">console.log(test); // 1</span><br><span class="line">console.log(result.next().value); // 2</span><br><span class="line">// 补充注意：当迭代遇到return、发生错误、或最后一个yield执行完成再执行一遍next后，才会将done变更为true</span><br><span class="line">console.log(result.next().value, test); // undefined 3</span><br></pre></td></tr></table></figure></p><h4 id="3-2-yield的返回值"><a href="#3-2-yield的返回值" class="headerlink" title="3.2 yield的返回值"></a>3.2 yield的返回值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var gen = function*() &#123;</span><br><span class="line">    var b = yield 1 + 2;</span><br><span class="line">    console.log(&apos;b&apos;, b);</span><br><span class="line">&#125;;</span><br><span class="line">var result = gen();</span><br><span class="line">console.log(&apos;第1次迭代&apos;, result.next());</span><br><span class="line">console.log(&apos;第2次迭代&apos;, result.next());</span><br><span class="line"></span><br><span class="line">// 依次出现：</span><br><span class="line">// 第1次迭代 Object &#123;value: 3, done: false&#125;</span><br><span class="line">// b undefined</span><br><span class="line">// 第2次迭代 Object &#123;value: undefined, done: true&#125;</span><br></pre></td></tr></table></figure><p>这里或许大家会好奇，为什么b是undefined，而第一次迭代出来的对象，value属性得到了 1+2 的值3。</p><p><strong>知识点二</strong>：yield语句没有返回值，当 Generator实例调用next()方法后，返回对象value属性，得到了这一次yield 或return 后面语句的求值情况。</p><p>结合知识点一，可以把yield看成一种类return的语法。其返回值，只作用在next方法调用后返回的对象的value属性上。而其自身，是没有返回值的。</p><p>我们可以试着玩一点改造：把yield 语句换成 yieldFunc，并对后面语句进行一层function包裹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const yieldFunc = (() =&gt; &#123;</span><br><span class="line">    let yieldResult = undefined;</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">        yieldResult = 1 + 2;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">yieldFunc();</span><br></pre></td></tr></table></figure></p><p>如上，类似的，yieldFunc没有返回值，但是yieldResult得到了3。</p><p>再让我们把玩一番：将 function* 改造为 generatorFunc，进行一层function包裹。并将每一次yield、return拆分为不同的字符串，用于eval执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">const generatorFunc = (arr) =&gt; &#123;</span><br><span class="line">    let i = 0;</span><br><span class="line">    let yieldResult = undefined;</span><br><span class="line">    const len = arr.length;</span><br><span class="line"></span><br><span class="line">    const yieldFunc = (callback) =&gt; &#123;</span><br><span class="line">        yieldResult = callback();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // 用于保留作用域</span><br><span class="line">    let evalCall = (i) =&gt; &#123;</span><br><span class="line">        eval(arr[i]);</span><br><span class="line">        evalCall = () =&gt; eval(arr[i + 1]);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            next() &#123;</span><br><span class="line">                evalCall(i);</span><br><span class="line">                i += 1;</span><br><span class="line">                return &#123;</span><br><span class="line">                    value: yieldResult,</span><br><span class="line">                    done: i === len</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const gen = generatorFunc([`var a = 1; var b = yieldFunc(function () &#123;</span><br><span class="line">        return 1 + 2;</span><br><span class="line">    &#125;)`,</span><br><span class="line">    &apos;yieldFunc(function()&#123;console.log(&quot;a=&quot; + a + &quot;;b=&quot; + b)&#125;);&apos;</span><br><span class="line">]);</span><br><span class="line">const result = gen();</span><br><span class="line"></span><br><span class="line">console.log(&apos;第1次迭代&apos;, result.next());</span><br><span class="line">console.log(&apos;第2次迭代&apos;, result.next());</span><br><span class="line"></span><br><span class="line">// 依次出现</span><br><span class="line">// 第1次迭代 Object &#123;value: 3, done: false&#125;</span><br><span class="line">// a=1;b=undefined</span><br><span class="line">// 第2次迭代 Object &#123;value: undefined, done: true&#125;</span><br></pre></td></tr></table></figure><p>是不是发现还挺好玩的？</p><p>但是上面的处理，只是最基本的模拟实现，不支持next传递参数（好像说了什么不得了的东西）。</p><h4 id="3-3-next传递参数"><a href="#3-3-next传递参数" class="headerlink" title="3.3 next传递参数"></a>3.3 next传递参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const gen = function*() &#123;</span><br><span class="line">    const b = yield 1 + 2;</span><br><span class="line">    const c = yield b + &apos;测试&apos;;</span><br><span class="line">    console.log(&apos;c&apos;, c);</span><br><span class="line">&#125;;</span><br><span class="line">const result = gen();</span><br><span class="line">console.log(&apos;第1次迭代&apos;, result.next());</span><br><span class="line">console.log(&apos;第2次迭代&apos;, result.next(&apos;第2次迭代&apos;));</span><br><span class="line">console.log(&apos;第3次迭代&apos;, result.next(&apos;第3次迭代&apos;));</span><br><span class="line"></span><br><span class="line">// 依次出现：</span><br><span class="line">// 第1次迭代 Object &#123;value: 3, done: false&#125;</span><br><span class="line">// 第2次迭代 Object &#123;value: &quot;第2次迭代测试&quot;, done: false&#125;</span><br><span class="line">// c 第3次迭代</span><br><span class="line">// 第3次迭代 Object &#123;value: undefined, done: true&#125;</span><br></pre></td></tr></table></figure><p>我们发现，第一次迭代，得到的value 3毫无疑问，是第一次yield出来的求值情况。而yield是没有返回值的，为什么第二次迭代中，b获得了<em>第2次迭代</em>这个字符串，而在第三次迭代中，为什么c获得了<em>第3次迭代</em>这个字符串。</p><p><strong>知识点三</strong>：next方法可以接受参数，参数替代了上一次yield语句的位置，被作为“返回值”。</p><h3 id="Generator总结"><a href="#Generator总结" class="headerlink" title="Generator总结"></a>Generator总结</h3><p>记住上面三个知识点，非常重要。</p><p>巩固一下最简单的理解（表现层面）：把他看成一种新的语法，Generator函数执行，返回一个对象，对象拥有next方法。</p><ol><li>next方法每一次执行，依次迭代一个yield（这时候才推出后面的语句，进行执行），返回一个新的对象</li><li>yield语句类似于return 本身没有返回值，但其后面语句的求值结果会被作为返回对象的value属性</li><li>next方法可以接受参数，参数被当作上一次yield 语句的返回值</li></ol><p>下面开始明晰其应用场景</p><h3 id="Generator应用场景"><a href="#Generator应用场景" class="headerlink" title="Generator应用场景"></a>Generator应用场景</h3><h4 id="至关重要的run函数"><a href="#至关重要的run函数" class="headerlink" title="至关重要的run函数"></a>至关重要的run函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const run = (fn) =&gt; &#123;</span><br><span class="line">    const gen = fn();</span><br><span class="line">    const next = (data) =&gt; &#123;</span><br><span class="line">        // 第一次传递的data undefined</span><br><span class="line">        const result = gen.next(data);</span><br><span class="line">        if (result.done) return;</span><br><span class="line">        // 只要保证genrator 内部 yield 出来的东西是函数即可</span><br><span class="line">        // yield 出来的是一个函数，接受另一个函数作为参数</span><br><span class="line">        // 也就达到了顺序执行的目的</span><br><span class="line">        result.value(next);</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var getList1 = (success) =&gt; &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &apos;http://sapi.bbeeii.com/martgoods/category/fightgroup.html&apos;,</span><br><span class="line">        type: &apos;GET&apos;,</span><br><span class="line">        dataType: &apos;jsonp&apos;,</span><br><span class="line">        jsonpCallback: &apos;bbeeiiMartgoodsCategoryGet&apos;,</span><br><span class="line">        success</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">var getList2 = (success) =&gt; &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &apos;http://sapi.bbeeii.com/martshow/1-15----1.html&apos;,</span><br><span class="line">        type: &apos;GET&apos;,</span><br><span class="line">        dataType: &apos;jsonp&apos;,</span><br><span class="line">        jsonpCallback: &apos;bbeeiiMartshowGet&apos;,</span><br><span class="line">        success</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">var genFunc = function*() &#123;</span><br><span class="line">    // 注意a/b，是通过 上面的data传进来的东西（而不是函数的返回值）</span><br><span class="line">    // 写惯了异步，还是非常不习惯的</span><br><span class="line">    var a = yield getList1;</span><br><span class="line">    var b = yield getList2;</span><br><span class="line">    console.log(a, b);</span><br><span class="line">&#125;;</span><br><span class="line">run(genFunc);</span><br></pre></td></tr></table></figure><p>记住上面提到的三个知识点，能理解a、b值的情况，相信对Generator理解的问题，便不大了。</p><p>再让我们加深下理解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">run(function * () &#123;</span><br><span class="line">    var a = yield (callback) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            alert(1);</span><br><span class="line">            callback(2);</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var b = yield (callback) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(a, b);</span><br><span class="line">            var c = a + b;</span><br><span class="line">            callback(c);</span><br><span class="line">        &#125;, 3000);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(a, b);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><strong>话糙的最关键点一</strong>：yield没有返回值，通过.next传递进来的值，代替上一个yield语句执行的地方；</li><li><strong>话糙的最关键点二</strong>：yield出来的东西，作为.next迭代出来的对象的value属性</li><li>概念：不是两个线程，是协程（具体名词还未深究）。但会发现，我们完全用了同步的写法，而底层机制仍然是异步，这是比较精髓的地方。</li><li>当我们把上面的data参数，换成error, data，结合generator.throw，进行try catch等操作，包括yield语句本身可以推出任何东西，这里面的可玩空间，就非常大了。</li><li>TJ的co库，应该也是基于上面类似的方式，并且与Promise、<a href="https://github.com/tj/node-thunkify" target="_blank" rel="noopener">thunkify</a>结合，了解run函数，也是从<a href="https://github.com/tj/node-thunkify" target="_blank" rel="noopener">thunkify</a>了解到。</li><li>理解了Generator的概念／机制／应用场景，对ES7 async／await的理解，KOA的使用，相信后续也会方便很多。</li></ol><hr><h4 id="参考来源："><a href="#参考来源：" class="headerlink" title="参考来源："></a>参考来源：</h4><ul><li><a href="https://www.zhihu.com/question/25413141/answer/30767780" target="_blank" rel="noopener">nodejs异步控制「co、async、Q 、『es6原生promise』、then.js、bluebird」有何优缺点？最爱哪个？哪个简单？</a></li><li><a href="https://zhuanlan.zhihu.com/p/20794401" target="_blank" rel="noopener">生成器（Generator）——《实战 ES2015》章节试读</a></li><li><a href="http://www.alloyteam.com/2016/02/generators-in-depth/" target="_blank" rel="noopener">【转向Javascript系列】深入理解Generators</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/04/generator.html" target="_blank" rel="noopener">Generator 函数的含义与用法</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/05/thunk.html" target="_blank" rel="noopener">Thunk 函数的含义和用法</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/05/co.html" target="_blank" rel="noopener">co 函数库的含义和用法</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/05/async.html" target="_blank" rel="noopener">async 函数的含义和用法</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天给团队做的一次关于Generator的分享，整理至此。这次分享的目的是：循序渐进地让大家对ES6的Generator有一个初步的了解、然后加深理解、再通过一个run函数知晓其应用场景，最后明晰Generator带来的意义。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://xaber.co/categories/JavaScript/"/>
    
    
      <category term="底层基础" scheme="http://xaber.co/tags/%E5%BA%95%E5%B1%82%E5%9F%BA%E7%A1%80/"/>
    
      <category term="ES6" scheme="http://xaber.co/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>杭州半日</title>
    <link href="http://xaber.co/2017/01/01/%E6%9D%AD%E5%B7%9E%E5%8D%8A%E6%97%A5/"/>
    <id>http://xaber.co/2017/01/01/杭州半日/</id>
    <published>2016-12-31T17:08:26.000Z</published>
    <updated>2018-12-26T16:38:02.816Z</updated>
    
    <content type="html"><![CDATA[<p>16年最后一天，想先记一记最后一天上班日的事。</p><a id="more"></a><p>昨天是16年上班日的最后一天，给自己请（放）了半天假，一个人单独出去走走。</p><p>早上上班，中午吃过，一点出发。手机没电，先到武林广场武林银泰七楼借了个移动电源（芝麻信用，还挺好用）。</p><p>公交到茅家埠2点40左右。</p><p>为什么突如其来想到这么短暂的出游，感觉下来，客观因素还有半天年假以为年底就到期，主观因素是2016年发生了太多事，奔跑的一年心力交瘁，计划赶不上变化，马上就要结束，想着找个安静的地方坐一坐躺一躺看一看，晒晒太阳（天气确实不错）。</p><p>至于地点，也只是蚂蜂窝上看到，宁静淡然，评价不错。</p><p>杭州这座城市，2010年9月起大学入学到现在，也呆了快6年半了。而对这座城市，却仍然陌生。</p><p>大学前四年宅在下沙大学寝室里，大一和朋友谈天说地抽烟，几乎躺遍了下沙各高校的操场。毕业工作后，始终围绕着九堡转着圈。上班、下班，两点一线。</p><p>直至15年初，交了女朋友，逛吃逛吃了不少的街，才知道杭州有龙翔桥、湖滨银泰、利星、武林广场，衣服有HM、ZARA、Gap… 女装有snidel、Basic House、Jucy Judy… 化妆品有YSL、纪梵希…</p><p>自小到大，像是另一个世界没接触过的东西，开始“闯”进我的生活。确实多亏了女朋友，感谢她，带我了解杭州这座城市，了解这里的美食、街道，从而融入杭州这座城市。</p><p>杭州不大不小，确实零散去了一些地方，但就我个人感官，杭州不止于此。我们经常认为看到的是全部，说什么从你的全世界路过，其实大部分连生活所在的城市都不了解，又何谈世界。</p><p>回到茅家埠，绕着西里湖转了大半圈。走走停停拍照坐下躺下吹吹风，冬天里风和日丽，别样的惬意，好似能忘却不少事，又想起不少事，回荡起一丝丝情绪。</p><p><img src="/images/UNADJUSTEDNONRAW_thumb_2bbd_zpsqlaqmo9e.jpg" alt=""></p><p><img src="/images/UNADJUSTEDNONRAW_thumb_2bd3_zpsufi96knn.jpg" alt=""></p><p><img src="/images/UNADJUSTEDNONRAW_thumb_2be1_zpsxwaegtcm.jpg" alt=""></p><p>枯萎的看似荷花，因而认为夏日来会是另一番滋味。虽是周五，也有些许人。后来在亭子里稍作休憩，陌生人在旁边玩着《王者荣耀》。笑看他站那玩了十几分钟，起身询问要不要一起开个黑。尽管平台不同没玩成也没关系，倒也别有一番乐趣。</p><p>4点半，准备到龙翔桥。走到马路边，吃了一惊。发现在这里的路面，和日本的道路有的一拼，干净、整洁。突然发现，对这个城市在这之前存在不少关于脏乱差的误解。<br><img src="/images/UNADJUSTEDNONRAW_thumb_2bf0_zpshcaapls3.jpg" alt=""></p><p>龙翔桥星巴克坐着，下面十字路口人头攒动，自然而然联想到涉谷那个亚洲人流最大的十字路口。<br><img src="/images/UNADJUSTEDNONRAW_thumb_2bf5_zpsnu8i4ogf.jpg" alt=""></p><p>想吃臻货，约了朋友，离他近的地方，找了一家西子国际店。诶？庆春银泰对面什么时候耸立起这样两座高楼。银座，又像是来到日本，还蛮意思。<br><a href="/images/3mT1QLg3TcaXES86CCa9aA_thumb_2bfa_zpsre9urzw4.jpg"></a></p><p>约完，回家，坐反车，上天桥，最后留个影，回家。<br><img src="/images/UNADJUSTEDNONRAW_thumb_2c04_zpsfkwyilto.jpg" alt=""><br><img src="/images/UNADJUSTEDNONRAW_thumb_2c01_zpsjqz5towy.jpg" alt=""></p><p>之前听过一个说法，人来人往，都只是在不同地方，画着或大或小的交际圈。</p><p>但实际我们会发现，人不应该停止探索的脚步，带着发现的眼睛，哪怕就这样走一走，也会看见或多或少不一样的东西。这也是从《人类简史》中对欧洲的描述所了解到的。</p><p>固步自封，停在原点，夜郎自大，管中窥豹，这些词我是希望离我个人包括周围的人远一点。</p><p>嗯，The End.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;16年最后一天，想先记一记最后一天上班日的事。&lt;/p&gt;
    
    </summary>
    
      <category term="记录系列" scheme="http://xaber.co/categories/%E8%AE%B0%E5%BD%95%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>谈谈技术核心职责是什么</title>
    <link href="http://xaber.co/2016/12/23/%E8%B0%88%E8%B0%88%E6%8A%80%E6%9C%AF%E6%A0%B8%E5%BF%83%E8%81%8C%E8%B4%A3%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://xaber.co/2016/12/23/谈谈技术核心职责是什么/</id>
    <published>2016-12-23T03:40:16.000Z</published>
    <updated>2018-12-26T16:38:02.817Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写文了，哈。</p><p>过去三年的工作经历，回头发现，大部分时间都在拼了命地支撑运营需求，想让业务快速发展，好让自己快速提升。甚至站在了运营层面提出过各种各样的东西，但实际上这样好吗？</p><p>一直在跟着业务跑，在业务上做过不少迭代优化，也带来过一些提升。而在技术层面上，却在一两年前就到达了自己的技术瓶颈，不再明确自己核心应该考虑什么。</p><p>在业务一开始的“初创”阶段，我们没法思考太多，只能拼了命地快速迭代，还挺享受这种从无到有的快感。但当一个业务稳定下来之后，不需要再疲于奔命的时候，我们该做什么？</p><a id="more"></a><ol><li>我们说要有高大上的追求，纵观几年下来，我们积累了什么东西</li><li>我们过程中总是在遇到各种问题之后临时去解决</li><li>天天跟着业务跑，没了成长，到底什么才是你我想要的，是业务能力还是技术能力</li></ol><p>这是值得深思的点，好比为什么有的技术能产出weex、HMS，有的能提出模块化、服务化的概念，有的做了CTO，而有的转行做了产品，有的做了运营总监。当然，我觉得“而”字后面的相对来说还是较少。</p><p>昨天参与了社群运营部门leader的总结规划会，几乎听不懂。但是经常被提起的一个点是：你的部门核心价值是什么？</p><p>昨晚回去，我也在想，我们部门的核心职责是什么？支撑运营需求？协助运营、产品快速提升GMV、日活、客单价？</p><p>是的，没错，但是我们如何结合我们的技术，到底做哪些可以提升GMV、日活、客单价呢？</p><p>不知道。</p><p>术业有专攻，运营的运营能力一般会强于我们，产品的产品能力一般会强于我们，而我们的技术能力一般会强于他们。当然不排除某些运营、产品做过技术，也不排除技术可以从无到有从构想一个产品到运营策略到开发一人包办，确实谁专业谁驱动。这中间，逻辑分析能力倒是共通的。</p><p>例如：产品说，我要做一个活动，用来吸收粉丝、发券、提升GMV，但是他又不说这个活动想要达到什么值，于是你没法分析里面的价值，而开发要花15天。哎哟卧槽，这产品傻逼吧，也许你会这样想。然后你再一想，哎？好像活动形式换一下，也差不多能达到类似效果，但是开发只要花2天。</p><p>这可以理解为产品向技术的初始阶段，但是是在需求评审过程。但当我们脱离支撑需求，分析需求合理性逻辑性目的可达成性之外，我们应该考虑什么。</p><p>现在我的想法是，技术的核心应该还是提供更健全的系统和服务、完善流程，提供运营、产品、开发更高的效率，带给团队提升空间，这比一切务虚的更能带来价值。</p><p>而作为前端，除了业务支撑里的做页面、做活动、做需求，我们之前也提了不少业务优化、技术优化，但是我们还是不知道我们下个季度可以做什么。因为我们说的业务优化、技术优化，缺乏目标和方向。</p><p>思索下来，我把前端的核心职能、应做的考虑、能带来的东西汇总为：</p><h3 id="一、体验"><a href="#一、体验" class="headerlink" title="一、体验"></a>一、体验</h3><h5 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h5><p>例如：页面加载时长，页面渲染时长等</p><h5 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h5><p>例如：UI呈现，UI还原度，CSS3动效，用户交互习惯提升，更好的交互体验等</p><h3 id="二、效率"><a href="#二、效率" class="headerlink" title="二、效率"></a>二、效率</h3><h5 id="决策效率"><a href="#决策效率" class="headerlink" title="决策效率"></a>决策效率</h5><p>如何建立数据反馈、打点机制，更快、更友好地响应决策，以及发现中间的问题</p><p>例如：上线一个系统，运营、产品、技术能清晰地知晓我们做的调整触发了怎样的波动</p><p>例如：上线一个系统，看一眼系统界面，就能知道代码错误出在第几行第几列</p><h5 id="运营效率"><a href="#运营效率" class="headerlink" title="运营效率"></a>运营效率</h5><p>是否可以通过系统配置来提升公司运营（注，这里是动词不是名词）效率？可以提升多少量化数据？</p><p>例如：搭建系统可以让页面（活动页面、营销玩法、后台页面等）快速上线</p><h5 id="开发效率"><a href="#开发效率" class="headerlink" title="开发效率"></a>开发效率</h5><p>举例：</p><ol><li>前后端对接慢 —— mock系统</li><li>开发慢 —— 引入新技术，好比mvvm框架；引入模块化，提供xxx组件</li><li>打包慢 —— 依赖打包，节省发布时间</li><li>为什么这些事情天天重复在做，是否可以封装节省时间？</li><li>开放式环境经常被打扰，工作流经常被打断，每天都在聊QQ划水怎么办？ —— 涉及到项目管理，是否有什么流程机制解决？</li></ol><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><h5 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h5><ol><li>代码规范 —— jshint、eshint等</li><li>代码复杂度 —— 是否有工具</li></ol><h5 id="bug情况"><a href="#bug情况" class="headerlink" title="bug情况"></a>bug情况</h5><ol><li>原因是什么？—— 能做什么动作减少bug？</li></ol><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ol><li>如何保障更牛逼的流量进入而系统不崩？</li><li>如何做到更快的问题响应？</li><li>如何将线上风险前置，如何规避风险？</li></ol><h3 id="团队发展"><a href="#团队发展" class="headerlink" title="团队发展"></a>团队发展</h3><ol><li>如何打造更强有力的团队？</li><li>团队知识体系如稳健提升？—— 上面的动作以及分享是否ok？</li><li>如何持续不断创新？</li></ol><h3 id="业务创收"><a href="#业务创收" class="headerlink" title="业务创收"></a>业务创收</h3><p>这部分更多是运营、产品需要去考虑的。而在我们其他一些方面做的还OK的情况，或者我们有了解可以做的事情，我们也可以从业务角度达到一种创收的效果，不过这很大程度超出一个技术能力范围之外。</p><p>例如：</p><ol><li>大数据做卖广告的平台，微信推出小程序</li><li>推出了3D游戏、AR游戏，提升了xxx效果</li><li>我们在业务优化上做了什么什么，提升了xxx量，这也是我们通过我们自己达到的创收</li></ol><h3 id="公司／业界影响力"><a href="#公司／业界影响力" class="headerlink" title="公司／业界影响力"></a>公司／业界影响力</h3><p>例如，阿里推出的系列全套，seajs、weex等等等等。当然这也是解决了内部一些问题之后，所提炼开源出来的</p><p>而在KPI制定这一块，我们不能像以前一样一直跟着业务去走，甚至给自己定GMV、流量，这些大部分都不是我们能控制的。单纯的业务支撑，最终总结的时候，说我们支撑了xxx业务，达到了xxx体量，太空，没含金量，中间可能我们也没做什么努力，但是它也达成了，也就没有成就感。</p><p>在想我们要做什么的时候，我发现可以按照上面的内容展开我们的考虑，因为这些是我们技术所能提供的。KPI是我们的目标，而这个目标到底是什么，要解决的是什么问题，而我们为之能做出什么动作。S是基本不可达成的，B是基本要求，A则是凭着我们自己蹦一蹦可以达到的，那么我们的B／S怎么来设定，能通过什么数据来做量化验证，这就是我们所要面临的问题。</p><p>我们可以从上面几个维度去构想我们未来的事情，想要解决或者优化的问题，也可以和自己想学习的技术相结合，甚至说去做业务创收，但是我们要有能力想好做什么能达成我们的目标。写一个虚的东西，最终评价完全没法展开。</p><p>我们要做什么，一定要有原因。想不好要解决的问题，也就想不好自己要做什么，也就盲目。盲目是一个不好的状态。我们不应该只知道跟着业务跑，而忽略了我们自身的能力所能提供的；也不应该只知道引入新技术（Google这几年推的热气球、人工智能等等项目，想要达成创收，也占据了不少眼球，有的甚至上了科技TOP10，但是这两天从好奇心日报了解到，这些项目这一年大部分都砍掉了），而偏离了我们的目标（是盈利、社会奉献还是满足自身的探索满足）。针对我们要解决的问题，发散思考，提出能解决的方案，于是我们有了目标，有了行动策略，这样，我们也就有了方向与踏踏实实的成就感。</p><p>以上，暂时想到这么多。</p><p>搞了三年，积累了不少产品相关能力，也挺好。</p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>补充一张前端大图 —— 2017.03.10</p><p><img src="/images/C2905A76-2425-42E6-BD72-D15E9FC00D02_zpseyliwsgu.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没写文了，哈。&lt;/p&gt;
&lt;p&gt;过去三年的工作经历，回头发现，大部分时间都在拼了命地支撑运营需求，想让业务快速发展，好让自己快速提升。甚至站在了运营层面提出过各种各样的东西，但实际上这样好吗？&lt;/p&gt;
&lt;p&gt;一直在跟着业务跑，在业务上做过不少迭代优化，也带来过一些提升。而在技术层面上，却在一两年前就到达了自己的技术瓶颈，不再明确自己核心应该考虑什么。&lt;/p&gt;
&lt;p&gt;在业务一开始的“初创”阶段，我们没法思考太多，只能拼了命地快速迭代，还挺享受这种从无到有的快感。但当一个业务稳定下来之后，不需要再疲于奔命的时候，我们该做什么？&lt;/p&gt;
    
    </summary>
    
      <category term="总结系列" scheme="http://xaber.co/categories/%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="总结规划" scheme="http://xaber.co/tags/%E6%80%BB%E7%BB%93%E8%A7%84%E5%88%92/"/>
    
      <category term="核心职能" scheme="http://xaber.co/tags/%E6%A0%B8%E5%BF%83%E8%81%8C%E8%83%BD/"/>
    
  </entry>
  
</feed>
